-- MySQL dump 10.13  Distrib 5.7.25, for Linux (x86_64)
--
-- Host: localhost    Database: qar-backup03022019
-- ------------------------------------------------------
-- Server version	5.7.25-0ubuntu0.16.04.2

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `answers`
--

DROP TABLE IF EXISTS `answers`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `answers` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `result_question_id` int(11) NOT NULL,
  `choice` char(3) NOT NULL,
  `justify` text,
  `start_time` time DEFAULT NULL,
  `end_time` time DEFAULT NULL,
  `created` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FK` (`user_id`),
  KEY `fk_answers_result_questions1_idx` (`result_question_id`),
  CONSTRAINT `fk_answers_result_questions1` FOREIGN KEY (`result_question_id`) REFERENCES `result_questions` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_answers_users1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=1191 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `answers`
--

LOCK TABLES `answers` WRITE;
/*!40000 ALTER TABLE `answers` DISABLE KEYS */;
INSERT INTO `answers` VALUES (8,12,365,'OP2',NULL,'12:05:27','12:06:20','2019-01-11 12:06:20'),(9,12,361,'4',NULL,'12:05:27','12:06:20','2019-01-11 12:06:20'),(10,12,362,'4',NULL,'12:05:27','12:06:20','2019-01-11 12:06:20'),(11,12,363,'4',NULL,'12:05:27','12:06:20','2019-01-11 12:06:20'),(12,12,364,'4',NULL,'12:05:27','12:06:20','2019-01-11 12:06:20'),(13,12,360,'4',NULL,'12:05:27','12:06:20','2019-01-11 12:06:20'),(14,12,366,'N/A','N/A','12:05:27','12:06:20','2019-01-11 12:06:20'),(22,12,379,'OP2',NULL,'12:07:19','12:08:03','2019-01-11 12:08:03'),(23,12,375,'4',NULL,'12:07:19','12:08:03','2019-01-11 12:08:03'),(24,12,376,'4',NULL,'12:07:19','12:08:03','2019-01-11 12:08:03'),(25,12,377,'4',NULL,'12:07:19','12:08:03','2019-01-11 12:08:03'),(26,12,378,'4',NULL,'12:07:19','12:08:03','2019-01-11 12:08:04'),(27,12,374,'4',NULL,'12:07:19','12:08:03','2019-01-11 12:08:04'),(28,12,380,'N/A','N/A','12:07:19','12:08:03','2019-01-11 12:08:04'),(29,12,386,'OP2',NULL,'12:08:04','12:08:33','2019-01-11 12:08:33'),(30,12,382,'4',NULL,'12:08:04','12:08:33','2019-01-11 12:08:33'),(31,12,383,'4',NULL,'12:08:04','12:08:33','2019-01-11 12:08:33'),(32,12,384,'4',NULL,'12:08:04','12:08:33','2019-01-11 12:08:33'),(33,12,385,'4',NULL,'12:08:04','12:08:33','2019-01-11 12:08:33'),(34,12,381,'4',NULL,'12:08:04','12:08:33','2019-01-11 12:08:33'),(35,12,387,'N/A','N/A','12:08:04','12:08:33','2019-01-11 12:08:33'),(43,13,456,'OP2',NULL,'13:30:25','13:31:19','2019-01-11 13:31:19'),(44,13,452,'5',NULL,'13:30:25','13:31:19','2019-01-11 13:31:19'),(45,13,453,'4',NULL,'13:30:25','13:31:19','2019-01-11 13:31:19'),(46,13,454,'4',NULL,'13:30:25','13:31:19','2019-01-11 13:31:19'),(47,13,455,'4',NULL,'13:30:25','13:31:19','2019-01-11 13:31:19'),(48,13,451,'4',NULL,'13:30:25','13:31:19','2019-01-11 13:31:19'),(49,13,457,'N/A','N/A','13:30:25','13:31:19','2019-01-11 13:31:19'),(50,13,449,'OP2',NULL,'13:31:19','13:32:35','2019-01-11 13:32:36'),(51,13,445,'4',NULL,'13:31:19','13:32:35','2019-01-11 13:32:36'),(52,13,446,'4',NULL,'13:31:19','13:32:35','2019-01-11 13:32:36'),(53,13,447,'3',NULL,'13:31:19','13:32:35','2019-01-11 13:32:36'),(54,13,448,'4',NULL,'13:31:19','13:32:35','2019-01-11 13:32:36'),(55,13,444,'4',NULL,'13:31:19','13:32:35','2019-01-11 13:32:36'),(56,13,450,'N/A','o .forEach poderia ser convertido em um .map retornando uma nova coleção, deixando o código mais limpo','13:31:19','13:32:35','2019-01-11 13:32:36'),(57,13,442,'OP1',NULL,'13:32:36','13:34:17','2019-01-11 13:34:17'),(58,13,438,'2',NULL,'13:32:36','13:34:17','2019-01-11 13:34:17'),(59,13,439,'2',NULL,'13:32:36','13:34:17','2019-01-11 13:34:17'),(60,13,440,'2',NULL,'13:32:36','13:34:17','2019-01-11 13:34:17'),(61,13,441,'2',NULL,'13:32:36','13:34:17','2019-01-11 13:34:17'),(62,13,437,'3',NULL,'13:32:36','13:34:17','2019-01-11 13:34:17'),(63,13,443,'N/A','Acho que a substituição do for each normal para o obj.forEach() não se justifica quando não há uso de chamadas map/filter ou alguma outra função que facilita o processamento de listas.','13:32:36','13:34:17','2019-01-11 13:34:17'),(64,13,435,'OP2',NULL,'13:34:18','13:34:39','2019-01-11 13:34:39'),(65,13,431,'5',NULL,'13:34:18','13:34:39','2019-01-11 13:34:39'),(66,13,432,'5',NULL,'13:34:18','13:34:39','2019-01-11 13:34:39'),(67,13,433,'5',NULL,'13:34:18','13:34:39','2019-01-11 13:34:39'),(68,13,434,'3',NULL,'13:34:18','13:34:39','2019-01-11 13:34:39'),(69,13,430,'5',NULL,'13:34:18','13:34:39','2019-01-11 13:34:39'),(70,13,436,'N/A','N/A','13:34:18','13:34:39','2019-01-11 13:34:39'),(71,13,428,'OP1',NULL,'13:34:40','13:34:56','2019-01-11 13:34:56'),(72,13,424,'2',NULL,'13:34:40','13:34:56','2019-01-11 13:34:56'),(73,13,425,'2',NULL,'13:34:40','13:34:56','2019-01-11 13:34:56'),(74,13,426,'2',NULL,'13:34:40','13:34:56','2019-01-11 13:34:56'),(75,13,427,'3',NULL,'13:34:40','13:34:56','2019-01-11 13:34:56'),(76,13,423,'3',NULL,'13:34:40','13:34:56','2019-01-11 13:34:56'),(77,13,429,'N/A','N/A','13:34:40','13:34:56','2019-01-11 13:34:56'),(78,13,421,'OP2',NULL,'13:34:57','13:36:09','2019-01-11 13:36:09'),(79,13,417,'5',NULL,'13:34:57','13:36:09','2019-01-11 13:36:09'),(80,13,418,'5',NULL,'13:34:57','13:36:09','2019-01-11 13:36:09'),(81,13,419,'5',NULL,'13:34:57','13:36:09','2019-01-11 13:36:09'),(82,13,420,'5',NULL,'13:34:57','13:36:09','2019-01-11 13:36:09'),(83,13,416,'5',NULL,'13:34:57','13:36:09','2019-01-11 13:36:09'),(84,13,422,'N/A','N/A','13:34:57','13:36:09','2019-01-11 13:36:09'),(85,15,456,'OP2',NULL,'14:48:03','14:48:58','2019-01-11 14:48:58'),(86,15,452,'3',NULL,'14:48:03','14:48:58','2019-01-11 14:48:58'),(87,15,453,'3',NULL,'14:48:03','14:48:58','2019-01-11 14:48:59'),(88,15,454,'3',NULL,'14:48:03','14:48:58','2019-01-11 14:48:59'),(89,15,455,'3',NULL,'14:48:03','14:48:58','2019-01-11 14:48:59'),(90,15,451,'3',NULL,'14:48:03','14:48:58','2019-01-11 14:48:59'),(91,15,457,'N/A','N/A','14:48:03','14:48:58','2019-01-11 14:48:59'),(92,15,449,'OP2',NULL,'14:49:01','14:49:25','2019-01-11 14:49:25'),(93,15,445,'3',NULL,'14:49:01','14:49:25','2019-01-11 14:49:25'),(94,15,446,'3',NULL,'14:49:01','14:49:25','2019-01-11 14:49:25'),(95,15,447,'3',NULL,'14:49:01','14:49:25','2019-01-11 14:49:25'),(96,15,448,'3',NULL,'14:49:01','14:49:25','2019-01-11 14:49:25'),(97,15,444,'3',NULL,'14:49:01','14:49:25','2019-01-11 14:49:25'),(98,15,450,'N/A','N/A','14:49:01','14:49:25','2019-01-11 14:49:25'),(99,15,442,'OP2',NULL,'14:49:27','14:49:52','2019-01-11 14:49:52'),(100,15,438,'3',NULL,'14:49:27','14:49:52','2019-01-11 14:49:52'),(101,15,439,'3',NULL,'14:49:27','14:49:52','2019-01-11 14:49:52'),(102,15,440,'3',NULL,'14:49:27','14:49:52','2019-01-11 14:49:53'),(103,15,441,'3',NULL,'14:49:27','14:49:52','2019-01-11 14:49:53'),(104,15,437,'3',NULL,'14:49:27','14:49:52','2019-01-11 14:49:53'),(105,15,443,'N/A','N/A','14:49:27','14:49:52','2019-01-11 14:49:53'),(106,15,435,'OP2',NULL,'14:49:54','14:50:12','2019-01-11 14:50:12'),(107,15,431,'3',NULL,'14:49:54','14:50:12','2019-01-11 14:50:12'),(108,15,432,'3',NULL,'14:49:54','14:50:12','2019-01-11 14:50:12'),(109,15,433,'3',NULL,'14:49:54','14:50:12','2019-01-11 14:50:12'),(110,15,434,'3',NULL,'14:49:54','14:50:12','2019-01-11 14:50:12'),(111,15,430,'3',NULL,'14:49:54','14:50:12','2019-01-11 14:50:12'),(112,15,436,'N/A','N/A','14:49:54','14:50:12','2019-01-11 14:50:12'),(113,15,428,'OP1',NULL,'14:50:14','14:51:37','2019-01-11 14:51:38'),(114,15,424,'3',NULL,'14:50:14','14:51:37','2019-01-11 14:51:38'),(115,15,425,'3',NULL,'14:50:14','14:51:37','2019-01-11 14:51:38'),(116,15,426,'3',NULL,'14:50:14','14:51:37','2019-01-11 14:51:38'),(117,15,427,'3',NULL,'14:50:14','14:51:37','2019-01-11 14:51:38'),(118,15,423,'3',NULL,'14:50:14','14:51:37','2019-01-11 14:51:38'),(119,15,429,'N/A','N/A','14:50:14','14:51:37','2019-01-11 14:51:38'),(120,15,421,'OP1',NULL,'14:51:46','14:52:33','2019-01-11 14:52:33'),(121,15,417,'3',NULL,'14:51:46','14:52:33','2019-01-11 14:52:33'),(122,15,418,'3',NULL,'14:51:46','14:52:33','2019-01-11 14:52:33'),(123,15,419,'3',NULL,'14:51:46','14:52:33','2019-01-11 14:52:33'),(124,15,420,'3',NULL,'14:51:46','14:52:33','2019-01-11 14:52:33'),(125,15,416,'3',NULL,'14:51:46','14:52:33','2019-01-11 14:52:33'),(126,15,422,'N/A','N/A','14:51:46','14:52:33','2019-01-11 14:52:33'),(127,17,456,'OP1',NULL,'21:12:15','21:27:56','2019-01-11 21:27:56'),(128,17,452,'3',NULL,'21:12:15','21:27:56','2019-01-11 21:27:57'),(129,17,453,'4',NULL,'21:12:15','21:27:56','2019-01-11 21:27:57'),(130,17,454,'2',NULL,'21:12:15','21:27:56','2019-01-11 21:27:57'),(131,17,455,'2',NULL,'21:12:15','21:27:56','2019-01-11 21:27:57'),(132,17,451,'2',NULL,'21:12:15','21:27:56','2019-01-11 21:27:57'),(133,17,457,'N/A','Acredito que nesse exemplo o código transformado ficou menos legível, mas não me parece ter sido \"culpa\" das expressões lambda. No meu ponto de vista, a (falta de) identação prejudica a leitura do encadeamento de chamadas.\r\nAinda com relação ao encadeamento, creio que a transformação faria mais sentido se a chamada a Stream.forEach() fosse substituída por Stream.collect(). Com o forEach, o código ainda se lê iterativo.\r\n\r\nComo um comentário \"minor\", o parâmetro da primeira expressão lambda (closestElement) não está batendo com a variável utilizada (element).','21:12:15','21:27:56','2019-01-11 21:27:57'),(134,17,449,'OP1',NULL,'21:27:58','21:33:47','2019-01-11 21:33:47'),(135,17,445,'2',NULL,'21:27:58','21:33:47','2019-01-11 21:33:47'),(136,17,446,'4',NULL,'21:27:58','21:33:47','2019-01-11 21:33:47'),(137,17,447,'2',NULL,'21:27:58','21:33:47','2019-01-11 21:33:47'),(138,17,448,'2',NULL,'21:27:58','21:33:47','2019-01-11 21:33:47'),(139,17,444,'2',NULL,'21:27:58','21:33:47','2019-01-11 21:33:47'),(140,17,450,'N/A','Aqui a identação ajuda a leitura (ao contrário do exemplo anterior), mas o argumento contra o uso de forEach() ainda se aplica. Na prática, o forEach() mantém a iteração, apenas mudando a sintaxe para uma que pode ser menos acessível a desenvolvedores menos experientes.','21:27:58','21:33:47','2019-01-11 21:33:47'),(141,17,442,'OP1',NULL,'21:33:48','21:37:13','2019-01-11 21:37:13'),(142,17,438,'2',NULL,'21:33:48','21:37:13','2019-01-11 21:37:13'),(143,17,439,'4',NULL,'21:33:48','21:37:13','2019-01-11 21:37:13'),(144,17,440,'2',NULL,'21:33:48','21:37:13','2019-01-11 21:37:13'),(145,17,441,'1',NULL,'21:33:48','21:37:13','2019-01-11 21:37:13'),(146,17,437,'1',NULL,'21:33:48','21:37:13','2019-01-11 21:37:13'),(147,17,443,'N/A','Aqui o código ficou conceitualmente idêntico após a transformação, mas ficou um pouco pior de ler (nível extra de identação sem que haja correspondente aninhamento de conceitos). Adicionalmente, o último assert ficou formatado de um jeito um pouco estranho na versão transformada.','21:33:48','21:37:13','2019-01-11 21:37:13'),(148,17,435,'OP2',NULL,'21:37:13','21:40:53','2019-01-11 21:40:53'),(149,17,431,'5',NULL,'21:37:13','21:40:53','2019-01-11 21:40:53'),(150,17,432,'5',NULL,'21:37:13','21:40:53','2019-01-11 21:40:53'),(151,17,433,'5',NULL,'21:37:13','21:40:53','2019-01-11 21:40:53'),(152,17,434,'2',NULL,'21:37:13','21:40:53','2019-01-11 21:40:53'),(153,17,430,'2',NULL,'21:37:13','21:40:53','2019-01-11 21:40:53'),(154,17,436,'N/A','Aqui a transformação fez sentido por eliminar o uso de classe anônima (anonymous inner class) com método trivial (muito utilizado para implementar o padrão Command em Java). No entanto, esse critério me parece não ser englobado pelas perguntas do questionário. ','21:37:13','21:40:53','2019-01-11 21:40:54'),(155,17,428,'OP1',NULL,'21:40:54','21:43:00','2019-01-11 21:43:00'),(156,17,424,'3',NULL,'21:40:54','21:43:00','2019-01-11 21:43:00'),(157,17,425,'4',NULL,'21:40:54','21:43:00','2019-01-11 21:43:00'),(158,17,426,'2',NULL,'21:40:54','21:43:00','2019-01-11 21:43:00'),(159,17,427,'2',NULL,'21:40:54','21:43:00','2019-01-11 21:43:00'),(160,17,423,'2',NULL,'21:40:54','21:43:00','2019-01-11 21:43:00'),(161,17,429,'N/A','Assim como o segundo exemplo, esse apenas apresenta um loop \"for\" sintaticamente diferente.','21:40:54','21:43:00','2019-01-11 21:43:00'),(162,17,421,'OP2',NULL,'21:43:00','21:47:57','2019-01-11 21:47:57'),(163,17,417,'4',NULL,'21:43:00','21:47:57','2019-01-11 21:47:57'),(164,17,418,'4',NULL,'21:43:00','21:47:57','2019-01-11 21:47:57'),(165,17,419,'4',NULL,'21:43:00','21:47:57','2019-01-11 21:47:57'),(166,17,420,'4',NULL,'21:43:00','21:47:57','2019-01-11 21:47:57'),(167,17,416,'3',NULL,'21:43:00','21:47:57','2019-01-11 21:47:57'),(168,17,422,'N/A','Aqui uma boa quantidade de \"boilerplate\" foi removida ao usar Optional de uma forma mais idiomática (deixando Optional abstrair o fato de haver ou não um conteúdo e o fato de querermos um outro Optional como resultado das operações).','21:43:00','21:47:57','2019-01-11 21:47:57'),(169,19,456,'OP1',NULL,'10:24:43','10:27:07','2019-01-14 10:27:07'),(170,19,452,'2',NULL,'10:24:43','10:27:07','2019-01-14 10:27:07'),(171,19,453,'2',NULL,'10:24:43','10:27:07','2019-01-14 10:27:07'),(172,19,454,'1',NULL,'10:24:43','10:27:07','2019-01-14 10:27:07'),(173,19,455,'4',NULL,'10:24:43','10:27:07','2019-01-14 10:27:07'),(174,19,451,'5',NULL,'10:24:43','10:27:07','2019-01-14 10:27:07'),(175,19,457,'N/A','N/A','10:24:43','10:27:07','2019-01-14 10:27:07'),(176,19,449,'OP1',NULL,'10:27:07','10:29:41','2019-01-14 10:29:41'),(177,19,445,'1',NULL,'10:27:07','10:29:41','2019-01-14 10:29:41'),(178,19,446,'4',NULL,'10:27:07','10:29:41','2019-01-14 10:29:41'),(179,19,447,'3',NULL,'10:27:07','10:29:41','2019-01-14 10:29:42'),(180,19,448,'3',NULL,'10:27:07','10:29:41','2019-01-14 10:29:42'),(181,19,444,'2',NULL,'10:27:07','10:29:41','2019-01-14 10:29:42'),(182,19,450,'N/A','N/A','10:27:07','10:29:41','2019-01-14 10:29:42'),(183,19,442,'OP1',NULL,'10:29:42','10:30:24','2019-01-14 10:30:24'),(184,19,438,'1',NULL,'10:29:42','10:30:24','2019-01-14 10:30:24'),(185,19,439,'1',NULL,'10:29:42','10:30:24','2019-01-14 10:30:24'),(186,19,440,'2',NULL,'10:29:42','10:30:24','2019-01-14 10:30:24'),(187,19,441,'3',NULL,'10:29:42','10:30:24','2019-01-14 10:30:24'),(188,19,437,'2',NULL,'10:29:42','10:30:24','2019-01-14 10:30:24'),(189,19,443,'N/A','N/A','10:29:42','10:30:24','2019-01-14 10:30:24'),(190,19,435,'OP1',NULL,'10:30:25','10:30:48','2019-01-14 10:30:48'),(191,19,431,'1',NULL,'10:30:25','10:30:48','2019-01-14 10:30:48'),(192,19,432,'1',NULL,'10:30:25','10:30:48','2019-01-14 10:30:48'),(193,19,433,'2',NULL,'10:30:25','10:30:48','2019-01-14 10:30:48'),(194,19,434,'3',NULL,'10:30:25','10:30:48','2019-01-14 10:30:48'),(195,19,430,'1',NULL,'10:30:25','10:30:48','2019-01-14 10:30:48'),(196,19,436,'N/A','N/A','10:30:25','10:30:48','2019-01-14 10:30:48'),(197,19,428,'OP2',NULL,'10:30:49','10:31:22','2019-01-14 10:31:22'),(198,19,424,'4',NULL,'10:30:49','10:31:22','2019-01-14 10:31:22'),(199,19,425,'4',NULL,'10:30:49','10:31:22','2019-01-14 10:31:22'),(200,19,426,'3',NULL,'10:30:49','10:31:22','2019-01-14 10:31:22'),(201,19,427,'3',NULL,'10:30:49','10:31:22','2019-01-14 10:31:22'),(202,19,423,'2',NULL,'10:30:49','10:31:22','2019-01-14 10:31:23'),(203,19,429,'N/A','N/A','10:30:49','10:31:22','2019-01-14 10:31:23'),(204,19,421,'OP1',NULL,'10:31:23','10:32:25','2019-01-14 10:32:25'),(205,19,417,'2',NULL,'10:31:23','10:32:25','2019-01-14 10:32:26'),(206,19,418,'4',NULL,'10:31:23','10:32:25','2019-01-14 10:32:26'),(207,19,419,'2',NULL,'10:31:23','10:32:25','2019-01-14 10:32:26'),(208,19,420,'4',NULL,'10:31:23','10:32:25','2019-01-14 10:32:26'),(209,19,416,'5',NULL,'10:31:23','10:32:25','2019-01-14 10:32:26'),(210,19,422,'N/A','N/A','10:31:23','10:32:25','2019-01-14 10:32:26'),(218,20,365,'OP2',NULL,'17:42:43','17:43:28','2019-01-14 17:43:28'),(219,20,361,'5',NULL,'17:42:43','17:43:28','2019-01-14 17:43:29'),(220,20,362,'5',NULL,'17:42:43','17:43:28','2019-01-14 17:43:29'),(221,20,363,'5',NULL,'17:42:43','17:43:28','2019-01-14 17:43:29'),(222,20,364,'4',NULL,'17:42:43','17:43:28','2019-01-14 17:43:29'),(223,20,360,'4',NULL,'17:42:43','17:43:28','2019-01-14 17:43:29'),(224,20,366,'N/A','N/A','17:42:43','17:43:28','2019-01-14 17:43:29'),(232,20,379,'OP2',NULL,'17:44:34','17:44:53','2019-01-14 17:44:53'),(233,20,375,'4',NULL,'17:44:34','17:44:53','2019-01-14 17:44:53'),(234,20,376,'4',NULL,'17:44:34','17:44:53','2019-01-14 17:44:53'),(235,20,377,'4',NULL,'17:44:34','17:44:53','2019-01-14 17:44:53'),(236,20,378,'4',NULL,'17:44:34','17:44:53','2019-01-14 17:44:53'),(237,20,374,'4',NULL,'17:44:34','17:44:53','2019-01-14 17:44:53'),(238,20,380,'N/A','N/A','17:44:34','17:44:53','2019-01-14 17:44:54'),(239,20,386,'OP2',NULL,'17:44:54','17:45:06','2019-01-14 17:45:06'),(240,20,382,'5',NULL,'17:44:54','17:45:06','2019-01-14 17:45:06'),(241,20,383,'5',NULL,'17:44:54','17:45:06','2019-01-14 17:45:06'),(242,20,384,'5',NULL,'17:44:54','17:45:06','2019-01-14 17:45:07'),(243,20,385,'4',NULL,'17:44:54','17:45:06','2019-01-14 17:45:07'),(244,20,381,'4',NULL,'17:44:54','17:45:06','2019-01-14 17:45:07'),(245,20,387,'N/A','N/A','17:44:54','17:45:06','2019-01-14 17:45:07'),(260,23,456,'OP1',NULL,'18:09:52','18:11:50','2019-01-15 18:11:50'),(261,23,452,'3',NULL,'18:09:52','18:11:50','2019-01-15 18:11:50'),(262,23,453,'3',NULL,'18:09:52','18:11:50','2019-01-15 18:11:50'),(263,23,454,'3',NULL,'18:09:52','18:11:50','2019-01-15 18:11:50'),(264,23,455,'3',NULL,'18:09:52','18:11:50','2019-01-15 18:11:50'),(265,23,451,'4',NULL,'18:09:52','18:11:50','2019-01-15 18:11:50'),(266,23,457,'N/A','N/A','18:09:52','18:11:50','2019-01-15 18:11:50'),(267,25,456,'OP1',NULL,'09:39:12','10:47:23','2019-01-16 10:47:23'),(268,25,452,'1',NULL,'09:39:12','10:47:23','2019-01-16 10:47:24'),(269,25,453,'4',NULL,'09:39:12','10:47:23','2019-01-16 10:47:24'),(270,25,454,'2',NULL,'09:39:12','10:47:23','2019-01-16 10:47:24'),(271,25,455,'2',NULL,'09:39:12','10:47:23','2019-01-16 10:47:24'),(272,25,451,'2',NULL,'09:39:12','10:47:23','2019-01-16 10:47:24'),(273,25,457,'N/A','Talvez seja uma questão de formação, contudo programadores dos anos 80 e 90 têm mais facilidade na compreensão de código onde loops, variáveis de controle e ponteiros sejam explícitos.','09:39:12','10:47:23','2019-01-16 10:47:24'),(274,25,449,'OP1',NULL,'10:47:25','10:57:43','2019-01-16 10:57:43'),(275,25,445,'3',NULL,'10:47:25','10:57:43','2019-01-16 10:57:43'),(276,25,446,'2',NULL,'10:47:25','10:57:43','2019-01-16 10:57:43'),(277,25,447,'2',NULL,'10:47:25','10:57:43','2019-01-16 10:57:43'),(278,25,448,'2',NULL,'10:47:25','10:57:43','2019-01-16 10:57:43'),(279,25,444,'2',NULL,'10:47:25','10:57:43','2019-01-16 10:57:43'),(280,25,450,'N/A','Acredito que não houve redução na quantidade de laços. O comando for do código antigo se transforma  em forEach na transformação, o comando if se transforma em filter. Na minha opinião, o único motivo para justificar a transformação seria o aumento na velocidade de processamento. ','10:47:25','10:57:43','2019-01-16 10:57:43'),(281,25,442,'OP1',NULL,'10:57:43','11:06:36','2019-01-16 11:06:36'),(282,25,438,'3',NULL,'10:57:43','11:06:36','2019-01-16 11:06:36'),(283,25,439,'2',NULL,'10:57:43','11:06:36','2019-01-16 11:06:36'),(284,25,440,'3',NULL,'10:57:43','11:06:36','2019-01-16 11:06:36'),(285,25,441,'2',NULL,'10:57:43','11:06:36','2019-01-16 11:06:36'),(286,25,437,'2',NULL,'10:57:43','11:06:36','2019-01-16 11:06:36'),(287,25,443,'N/A','N/A','10:57:43','11:06:36','2019-01-16 11:06:36'),(288,25,435,'OP2',NULL,'11:06:37','11:09:22','2019-01-16 11:09:22'),(289,25,431,'4',NULL,'11:06:37','11:09:22','2019-01-16 11:09:22'),(290,25,432,'4',NULL,'11:06:37','11:09:22','2019-01-16 11:09:22'),(291,25,433,'4',NULL,'11:06:37','11:09:22','2019-01-16 11:09:22'),(292,25,434,'3',NULL,'11:06:37','11:09:22','2019-01-16 11:09:22'),(293,25,430,'4',NULL,'11:06:37','11:09:22','2019-01-16 11:09:22'),(294,25,436,'N/A','N/A','11:06:37','11:09:22','2019-01-16 11:09:22'),(295,25,428,'OP1',NULL,'11:09:23','11:10:34','2019-01-16 11:10:34'),(296,25,424,'3',NULL,'11:09:23','11:10:34','2019-01-16 11:10:34'),(297,25,425,'2',NULL,'11:09:23','11:10:34','2019-01-16 11:10:34'),(298,25,426,'2',NULL,'11:09:23','11:10:34','2019-01-16 11:10:34'),(299,25,427,'2',NULL,'11:09:23','11:10:34','2019-01-16 11:10:34'),(300,25,423,'2',NULL,'11:09:23','11:10:34','2019-01-16 11:10:35'),(301,25,429,'N/A','N/A','11:09:23','11:10:34','2019-01-16 11:10:35'),(309,25,421,'OP1',NULL,'11:10:35','11:13:20','2019-01-16 11:13:20'),(310,25,417,'2',NULL,'11:10:35','11:13:20','2019-01-16 11:13:21'),(311,25,418,'3',NULL,'11:10:35','11:13:20','2019-01-16 11:13:21'),(312,25,419,'3',NULL,'11:10:35','11:13:20','2019-01-16 11:13:21'),(313,25,420,'1',NULL,'11:10:35','11:13:20','2019-01-16 11:13:21'),(314,25,416,'3',NULL,'11:10:35','11:13:20','2019-01-16 11:13:21'),(315,25,422,'N/A','N/A','11:10:35','11:13:20','2019-01-16 11:13:21'),(316,26,365,'OP2',NULL,'11:12:17','11:14:07','2019-01-16 11:14:07'),(317,26,361,'4',NULL,'11:12:17','11:14:07','2019-01-16 11:14:08'),(318,26,362,'4',NULL,'11:12:17','11:14:07','2019-01-16 11:14:08'),(319,26,363,'4',NULL,'11:12:17','11:14:07','2019-01-16 11:14:08'),(320,26,364,'2',NULL,'11:12:17','11:14:07','2019-01-16 11:14:08'),(321,26,360,'4',NULL,'11:12:17','11:14:07','2019-01-16 11:14:08'),(322,26,366,'N/A','N/A','11:12:17','11:14:07','2019-01-16 11:14:08'),(323,27,456,'OP2',NULL,'11:15:38','11:16:58','2019-01-16 11:16:58'),(324,27,452,'4',NULL,'11:15:38','11:16:58','2019-01-16 11:16:58'),(325,27,453,'4',NULL,'11:15:38','11:16:58','2019-01-16 11:16:58'),(326,27,454,'4',NULL,'11:15:38','11:16:58','2019-01-16 11:16:58'),(327,27,455,'3',NULL,'11:15:38','11:16:58','2019-01-16 11:16:58'),(328,27,451,'3',NULL,'11:15:38','11:16:58','2019-01-16 11:16:58'),(329,27,457,'N/A','N/A','11:15:38','11:16:58','2019-01-16 11:16:58'),(330,27,449,'OP2',NULL,'11:16:59','11:17:43','2019-01-16 11:17:43'),(331,27,445,'4',NULL,'11:16:59','11:17:43','2019-01-16 11:17:43'),(332,27,446,'4',NULL,'11:16:59','11:17:43','2019-01-16 11:17:43'),(333,27,447,'4',NULL,'11:16:59','11:17:43','2019-01-16 11:17:43'),(334,27,448,'3',NULL,'11:16:59','11:17:43','2019-01-16 11:17:43'),(335,27,444,'3',NULL,'11:16:59','11:17:43','2019-01-16 11:17:43'),(336,27,450,'N/A','N/A','11:16:59','11:17:43','2019-01-16 11:17:43'),(337,27,442,'OP2',NULL,'11:17:44','11:18:08','2019-01-16 11:18:08'),(338,27,438,'4',NULL,'11:17:44','11:18:08','2019-01-16 11:18:08'),(339,27,439,'4',NULL,'11:17:44','11:18:08','2019-01-16 11:18:08'),(340,27,440,'4',NULL,'11:17:44','11:18:08','2019-01-16 11:18:08'),(341,27,441,'3',NULL,'11:17:44','11:18:08','2019-01-16 11:18:08'),(342,27,437,'3',NULL,'11:17:44','11:18:08','2019-01-16 11:18:08'),(343,27,443,'N/A','N/A','11:17:44','11:18:08','2019-01-16 11:18:08'),(351,27,435,'OP2',NULL,'11:18:09','11:18:24','2019-01-16 11:18:24'),(352,27,431,'4',NULL,'11:18:09','11:18:24','2019-01-16 11:18:24'),(353,27,432,'4',NULL,'11:18:09','11:18:24','2019-01-16 11:18:24'),(354,27,433,'4',NULL,'11:18:09','11:18:24','2019-01-16 11:18:24'),(355,27,434,'3',NULL,'11:18:09','11:18:24','2019-01-16 11:18:24'),(356,27,430,'3',NULL,'11:18:09','11:18:24','2019-01-16 11:18:25'),(357,27,436,'N/A','N/A','11:18:09','11:18:24','2019-01-16 11:18:25'),(358,27,428,'OP2',NULL,'11:18:25','11:19:15','2019-01-16 11:19:15'),(359,27,424,'4',NULL,'11:18:25','11:19:15','2019-01-16 11:19:15'),(360,27,425,'4',NULL,'11:18:25','11:19:15','2019-01-16 11:19:15'),(361,27,426,'4',NULL,'11:18:25','11:19:15','2019-01-16 11:19:15'),(362,27,427,'4',NULL,'11:18:25','11:19:15','2019-01-16 11:19:15'),(363,27,423,'4',NULL,'11:18:25','11:19:15','2019-01-16 11:19:15'),(364,27,429,'N/A','N/A','11:18:25','11:19:15','2019-01-16 11:19:15'),(365,27,421,'OP2',NULL,'11:19:16','11:19:46','2019-01-16 11:19:46'),(366,27,417,'4',NULL,'11:19:16','11:19:46','2019-01-16 11:19:46'),(367,27,418,'4',NULL,'11:19:16','11:19:46','2019-01-16 11:19:46'),(368,27,419,'4',NULL,'11:19:16','11:19:46','2019-01-16 11:19:46'),(369,27,420,'4',NULL,'11:19:16','11:19:46','2019-01-16 11:19:46'),(370,27,416,'4',NULL,'11:19:16','11:19:46','2019-01-16 11:19:46'),(371,27,422,'N/A','N/A','11:19:16','11:19:46','2019-01-16 11:19:46'),(372,26,379,'OP2',NULL,'11:18:23','11:21:25','2019-01-16 11:21:25'),(373,26,375,'4',NULL,'11:18:23','11:21:25','2019-01-16 11:21:25'),(374,26,376,'5',NULL,'11:18:23','11:21:25','2019-01-16 11:21:25'),(375,26,377,'4',NULL,'11:18:23','11:21:25','2019-01-16 11:21:25'),(376,26,378,'2',NULL,'11:18:23','11:21:25','2019-01-16 11:21:25'),(377,26,374,'5',NULL,'11:18:23','11:21:25','2019-01-16 11:21:25'),(378,26,380,'N/A','N/A','11:18:23','11:21:25','2019-01-16 11:21:25'),(379,26,386,'OP2',NULL,'11:21:26','11:22:58','2019-01-16 11:22:58'),(380,26,382,'4',NULL,'11:21:26','11:22:58','2019-01-16 11:22:58'),(381,26,383,'4',NULL,'11:21:26','11:22:58','2019-01-16 11:22:58'),(382,26,384,'4',NULL,'11:21:26','11:22:58','2019-01-16 11:22:58'),(383,26,385,'4',NULL,'11:21:26','11:22:58','2019-01-16 11:22:58'),(384,26,381,'4',NULL,'11:21:26','11:22:58','2019-01-16 11:22:58'),(385,26,387,'N/A','N/A','11:21:26','11:22:58','2019-01-16 11:22:58'),(400,28,365,'OP2',NULL,'12:17:11','12:19:41','2019-01-16 12:19:41'),(401,28,361,'5',NULL,'12:17:11','12:19:41','2019-01-16 12:19:41'),(402,28,362,'5',NULL,'12:17:11','12:19:41','2019-01-16 12:19:41'),(403,28,363,'5',NULL,'12:17:11','12:19:41','2019-01-16 12:19:41'),(404,28,364,'5',NULL,'12:17:11','12:19:41','2019-01-16 12:19:41'),(405,28,360,'2',NULL,'12:17:11','12:19:41','2019-01-16 12:19:41'),(406,28,366,'N/A','N/A','12:17:11','12:19:41','2019-01-16 12:19:41'),(421,28,379,'OP2',NULL,'12:21:23','12:23:05','2019-01-16 12:23:05'),(422,28,375,'5',NULL,'12:21:23','12:23:05','2019-01-16 12:23:05'),(423,28,376,'5',NULL,'12:21:23','12:23:05','2019-01-16 12:23:05'),(424,28,377,'5',NULL,'12:21:23','12:23:05','2019-01-16 12:23:05'),(425,28,378,'5',NULL,'12:21:23','12:23:05','2019-01-16 12:23:05'),(426,28,374,'2',NULL,'12:21:23','12:23:05','2019-01-16 12:23:05'),(427,28,380,'N/A','N/A','12:21:23','12:23:05','2019-01-16 12:23:05'),(428,28,386,'OP2',NULL,'12:23:05','12:23:19','2019-01-16 12:23:19'),(429,28,382,'5',NULL,'12:23:05','12:23:19','2019-01-16 12:23:19'),(430,28,383,'5',NULL,'12:23:05','12:23:19','2019-01-16 12:23:19'),(431,28,384,'5',NULL,'12:23:05','12:23:19','2019-01-16 12:23:20'),(432,28,385,'5',NULL,'12:23:05','12:23:19','2019-01-16 12:23:20'),(433,28,381,'2',NULL,'12:23:05','12:23:19','2019-01-16 12:23:20'),(434,28,387,'N/A','N/A','12:23:05','12:23:19','2019-01-16 12:23:20'),(435,30,365,'OP1',NULL,'12:21:48','12:23:35','2019-01-16 12:23:35'),(436,30,361,'4',NULL,'12:21:48','12:23:35','2019-01-16 12:23:35'),(437,30,362,'3',NULL,'12:21:48','12:23:35','2019-01-16 12:23:35'),(438,30,363,'3',NULL,'12:21:48','12:23:35','2019-01-16 12:23:35'),(439,30,364,'3',NULL,'12:21:48','12:23:35','2019-01-16 12:23:35'),(440,30,360,'2',NULL,'12:21:48','12:23:35','2019-01-16 12:23:35'),(441,30,366,'N/A','N/A','12:21:48','12:23:35','2019-01-16 12:23:35'),(456,30,379,'OP2',NULL,'12:24:59','12:25:55','2019-01-16 12:25:55'),(457,30,375,'4',NULL,'12:24:59','12:25:55','2019-01-16 12:25:55'),(458,30,376,'4',NULL,'12:24:59','12:25:55','2019-01-16 12:25:55'),(459,30,377,'4',NULL,'12:24:59','12:25:55','2019-01-16 12:25:56'),(460,30,378,'3',NULL,'12:24:59','12:25:55','2019-01-16 12:25:56'),(461,30,374,'3',NULL,'12:24:59','12:25:55','2019-01-16 12:25:56'),(462,30,380,'N/A','N/A','12:24:59','12:25:55','2019-01-16 12:25:56'),(463,30,386,'OP1',NULL,'12:25:56','12:27:03','2019-01-16 12:27:03'),(464,30,382,'4',NULL,'12:25:56','12:27:03','2019-01-16 12:27:03'),(465,30,383,'2',NULL,'12:25:56','12:27:03','2019-01-16 12:27:03'),(466,30,384,'3',NULL,'12:25:56','12:27:03','2019-01-16 12:27:03'),(467,30,385,'4',NULL,'12:25:56','12:27:03','2019-01-16 12:27:04'),(468,30,381,'4',NULL,'12:25:56','12:27:03','2019-01-16 12:27:04'),(469,30,387,'N/A','N/A','12:25:56','12:27:03','2019-01-16 12:27:04'),(484,6,365,'OP2',NULL,'09:11:56','09:13:18','2019-01-17 09:13:18'),(485,6,361,'4',NULL,'09:11:56','09:13:18','2019-01-17 09:13:18'),(486,6,362,'4',NULL,'09:11:56','09:13:18','2019-01-17 09:13:18'),(487,6,363,'5',NULL,'09:11:56','09:13:18','2019-01-17 09:13:18'),(488,6,364,'4',NULL,'09:11:56','09:13:18','2019-01-17 09:13:18'),(489,6,360,'3',NULL,'09:11:56','09:13:18','2019-01-17 09:13:18'),(490,6,366,'N/A','N/A','09:11:56','09:13:18','2019-01-17 09:13:18'),(498,6,379,'OP1',NULL,'09:13:49','09:16:19','2019-01-17 09:16:19'),(499,6,375,'3',NULL,'09:13:49','09:16:19','2019-01-17 09:16:19'),(500,6,376,'2',NULL,'09:13:49','09:16:19','2019-01-17 09:16:19'),(501,6,377,'3',NULL,'09:13:49','09:16:19','2019-01-17 09:16:19'),(502,6,378,'2',NULL,'09:13:49','09:16:19','2019-01-17 09:16:19'),(503,6,374,'3',NULL,'09:13:49','09:16:19','2019-01-17 09:16:19'),(504,6,380,'N/A','N/A','09:13:49','09:16:19','2019-01-17 09:16:19'),(505,6,386,'OP2',NULL,'09:16:20','09:19:30','2019-01-17 09:19:30'),(506,6,382,'4',NULL,'09:16:20','09:19:30','2019-01-17 09:19:30'),(507,6,383,'3',NULL,'09:16:20','09:19:30','2019-01-17 09:19:30'),(508,6,384,'4',NULL,'09:16:20','09:19:30','2019-01-17 09:19:30'),(509,6,385,'3',NULL,'09:16:20','09:19:30','2019-01-17 09:19:30'),(510,6,381,'3',NULL,'09:16:20','09:19:30','2019-01-17 09:19:30'),(511,6,387,'N/A','N/A','09:16:20','09:19:30','2019-01-17 09:19:30'),(519,31,456,'OP1',NULL,'16:15:36','16:21:02','2019-01-18 16:21:02'),(520,31,452,'2',NULL,'16:15:36','16:21:02','2019-01-18 16:21:02'),(521,31,453,'4',NULL,'16:15:36','16:21:02','2019-01-18 16:21:02'),(522,31,454,'3',NULL,'16:15:36','16:21:02','2019-01-18 16:21:02'),(523,31,455,'3',NULL,'16:15:36','16:21:02','2019-01-18 16:21:02'),(524,31,451,'4',NULL,'16:15:36','16:21:02','2019-01-18 16:21:02'),(525,31,457,'N/A','O layout das linhas do código transformado é dificil de comparar. \r\nQuando eu uso lambdas eu coloco cada função em linhas separadas e organizo as linhas de forma mais aberta e similar a laços.\r\n\r\n     elements.stream()\r\n         .map(\r\n               closestElement -> closest(driver, element, selector)\r\n               )\r\n        .filter(\r\n              closestElement -> closestElement != null)\r\n                    .forEach(closestElement -> {\r\n				closests.add(closestElement);\r\n     });\r\nE com minha experiencia em Kotlin acredito que essa linguagem é mais agravel de se usar os lambdas.','16:15:36','16:21:02','2019-01-18 16:21:02'),(526,31,449,'OP1',NULL,'16:21:03','16:22:05','2019-01-18 16:22:05'),(527,31,445,'2',NULL,'16:21:03','16:22:05','2019-01-18 16:22:05'),(528,31,446,'2',NULL,'16:21:03','16:22:05','2019-01-18 16:22:05'),(529,31,447,'2',NULL,'16:21:03','16:22:05','2019-01-18 16:22:05'),(530,31,448,'3',NULL,'16:21:03','16:22:05','2019-01-18 16:22:05'),(531,31,444,'1',NULL,'16:21:03','16:22:05','2019-01-18 16:22:05'),(532,31,450,'N/A','N/A','16:21:03','16:22:05','2019-01-18 16:22:05'),(533,31,442,'OP2',NULL,'16:22:06','16:22:47','2019-01-18 16:22:47'),(534,31,438,'4',NULL,'16:22:06','16:22:47','2019-01-18 16:22:47'),(535,31,439,'4',NULL,'16:22:06','16:22:47','2019-01-18 16:22:47'),(536,31,440,'4',NULL,'16:22:06','16:22:47','2019-01-18 16:22:47'),(537,31,441,'3',NULL,'16:22:06','16:22:47','2019-01-18 16:22:48'),(538,31,437,'2',NULL,'16:22:06','16:22:47','2019-01-18 16:22:48'),(539,31,443,'N/A','N/A','16:22:06','16:22:47','2019-01-18 16:22:48'),(540,31,435,'OP2',NULL,'16:22:48','16:23:36','2019-01-18 16:23:36'),(541,31,431,'4',NULL,'16:22:48','16:23:36','2019-01-18 16:23:36'),(542,31,432,'4',NULL,'16:22:48','16:23:36','2019-01-18 16:23:36'),(543,31,433,'4',NULL,'16:22:48','16:23:36','2019-01-18 16:23:36'),(544,31,434,'4',NULL,'16:22:48','16:23:36','2019-01-18 16:23:36'),(545,31,430,'4',NULL,'16:22:48','16:23:36','2019-01-18 16:23:36'),(546,31,436,'N/A','N/A','16:22:48','16:23:36','2019-01-18 16:23:36'),(547,31,428,'OP1',NULL,'16:23:37','16:24:22','2019-01-18 16:24:22'),(548,31,424,'3',NULL,'16:23:37','16:24:22','2019-01-18 16:24:22'),(549,31,425,'4',NULL,'16:23:37','16:24:22','2019-01-18 16:24:22'),(550,31,426,'3',NULL,'16:23:37','16:24:22','2019-01-18 16:24:22'),(551,31,427,'3',NULL,'16:23:37','16:24:22','2019-01-18 16:24:22'),(552,31,423,'3',NULL,'16:23:37','16:24:22','2019-01-18 16:24:22'),(553,31,429,'N/A','N/A','16:23:37','16:24:22','2019-01-18 16:24:22'),(554,31,421,'OP2',NULL,'16:24:23','16:25:48','2019-01-18 16:25:48'),(555,31,417,'3',NULL,'16:24:23','16:25:48','2019-01-18 16:25:48'),(556,31,418,'4',NULL,'16:24:23','16:25:48','2019-01-18 16:25:48'),(557,31,419,'4',NULL,'16:24:23','16:25:48','2019-01-18 16:25:48'),(558,31,420,'4',NULL,'16:24:23','16:25:48','2019-01-18 16:25:48'),(559,31,416,'3',NULL,'16:24:23','16:25:48','2019-01-18 16:25:48'),(560,31,422,'N/A','N/A','16:24:23','16:25:48','2019-01-18 16:25:48'),(568,32,365,'OP2',NULL,'11:21:56','11:23:03','2019-01-21 11:23:03'),(569,32,361,'4',NULL,'11:21:56','11:23:03','2019-01-21 11:23:03'),(570,32,362,'4',NULL,'11:21:56','11:23:03','2019-01-21 11:23:03'),(571,32,363,'4',NULL,'11:21:56','11:23:03','2019-01-21 11:23:03'),(572,32,364,'3',NULL,'11:21:56','11:23:03','2019-01-21 11:23:03'),(573,32,360,'3',NULL,'11:21:56','11:23:03','2019-01-21 11:23:03'),(574,32,366,'N/A','N/A','11:21:56','11:23:03','2019-01-21 11:23:03'),(582,32,379,'OP2',NULL,'11:24:45','11:25:54','2019-01-21 11:25:54'),(583,32,375,'5',NULL,'11:24:45','11:25:54','2019-01-21 11:25:54'),(584,32,376,'5',NULL,'11:24:45','11:25:54','2019-01-21 11:25:54'),(585,32,377,'5',NULL,'11:24:45','11:25:54','2019-01-21 11:25:54'),(586,32,378,'3',NULL,'11:24:45','11:25:54','2019-01-21 11:25:54'),(587,32,374,'4',NULL,'11:24:45','11:25:54','2019-01-21 11:25:54'),(588,32,380,'N/A','N/A','11:24:45','11:25:54','2019-01-21 11:25:54'),(589,32,386,'OP2',NULL,'11:25:55','11:26:34','2019-01-21 11:26:34'),(590,32,382,'5',NULL,'11:25:55','11:26:34','2019-01-21 11:26:34'),(591,32,383,'5',NULL,'11:25:55','11:26:34','2019-01-21 11:26:34'),(592,32,384,'5',NULL,'11:25:55','11:26:34','2019-01-21 11:26:34'),(593,32,385,'4',NULL,'11:25:55','11:26:34','2019-01-21 11:26:34'),(594,32,381,'3',NULL,'11:25:55','11:26:34','2019-01-21 11:26:34'),(595,32,387,'N/A','N/A','11:25:55','11:26:34','2019-01-21 11:26:34'),(610,16,365,'OP2',NULL,'11:27:28','11:28:37','2019-01-21 11:28:37'),(611,16,361,'4',NULL,'11:27:28','11:28:37','2019-01-21 11:28:37'),(612,16,362,'5',NULL,'11:27:28','11:28:37','2019-01-21 11:28:37'),(613,16,363,'4',NULL,'11:27:28','11:28:37','2019-01-21 11:28:37'),(614,16,364,'4',NULL,'11:27:28','11:28:37','2019-01-21 11:28:37'),(615,16,360,'4',NULL,'11:27:28','11:28:37','2019-01-21 11:28:37'),(616,16,366,'N/A','N/A','11:27:28','11:28:37','2019-01-21 11:28:37'),(624,16,379,'OP2',NULL,'11:30:27','11:31:25','2019-01-21 11:31:25'),(625,16,375,'5',NULL,'11:30:27','11:31:25','2019-01-21 11:31:25'),(626,16,376,'5',NULL,'11:30:27','11:31:25','2019-01-21 11:31:25'),(627,16,377,'4',NULL,'11:30:27','11:31:25','2019-01-21 11:31:25'),(628,16,378,'4',NULL,'11:30:27','11:31:25','2019-01-21 11:31:25'),(629,16,374,'4',NULL,'11:30:27','11:31:25','2019-01-21 11:31:26'),(630,16,380,'N/A','N/A','11:30:27','11:31:25','2019-01-21 11:31:26'),(631,16,386,'OP2',NULL,'11:31:26','11:32:01','2019-01-21 11:32:02'),(632,16,382,'5',NULL,'11:31:26','11:32:01','2019-01-21 11:32:02'),(633,16,383,'5',NULL,'11:31:26','11:32:01','2019-01-21 11:32:02'),(634,16,384,'5',NULL,'11:31:26','11:32:01','2019-01-21 11:32:02'),(635,16,385,'4',NULL,'11:31:26','11:32:01','2019-01-21 11:32:02'),(636,16,381,'4',NULL,'11:31:26','11:32:01','2019-01-21 11:32:02'),(637,16,387,'N/A','N/A','11:31:26','11:32:01','2019-01-21 11:32:02'),(652,14,365,'OP2',NULL,'12:30:18','12:30:53','2019-01-21 12:30:53'),(653,14,361,'5',NULL,'12:30:18','12:30:53','2019-01-21 12:30:53'),(654,14,362,'5',NULL,'12:30:18','12:30:53','2019-01-21 12:30:53'),(655,14,363,'5',NULL,'12:30:18','12:30:53','2019-01-21 12:30:53'),(656,14,364,'5',NULL,'12:30:18','12:30:53','2019-01-21 12:30:53'),(657,14,360,'2',NULL,'12:30:18','12:30:53','2019-01-21 12:30:53'),(658,14,366,'N/A','N/A','12:30:18','12:30:53','2019-01-21 12:30:53'),(666,14,379,'OP2',NULL,'12:34:51','12:37:16','2019-01-21 12:37:16'),(667,14,375,'5',NULL,'12:34:51','12:37:16','2019-01-21 12:37:16'),(668,14,376,'5',NULL,'12:34:51','12:37:16','2019-01-21 12:37:17'),(669,14,377,'5',NULL,'12:34:51','12:37:16','2019-01-21 12:37:17'),(670,14,378,'2',NULL,'12:34:51','12:37:16','2019-01-21 12:37:17'),(671,14,374,'5',NULL,'12:34:51','12:37:16','2019-01-21 12:37:17'),(672,14,380,'N/A','As definições de funções usando expressões lambda (código 2) apresentam uma sintaxe consideravelmente mais agradável do que as presentes no código 1.','12:34:51','12:37:16','2019-01-21 12:37:17'),(673,14,386,'OP2',NULL,'12:37:17','12:37:37','2019-01-21 12:37:37'),(674,14,382,'5',NULL,'12:37:17','12:37:37','2019-01-21 12:37:37'),(675,14,383,'5',NULL,'12:37:17','12:37:37','2019-01-21 12:37:37'),(676,14,384,'5',NULL,'12:37:17','12:37:37','2019-01-21 12:37:37'),(677,14,385,'5',NULL,'12:37:17','12:37:37','2019-01-21 12:37:37'),(678,14,381,'4',NULL,'12:37:17','12:37:37','2019-01-21 12:37:37'),(679,14,387,'N/A','N/A','12:37:17','12:37:37','2019-01-21 12:37:37'),(687,33,456,'OP2',NULL,'19:18:01','19:21:18','2019-01-21 19:21:18'),(688,33,452,'4',NULL,'19:18:01','19:21:18','2019-01-21 19:21:18'),(689,33,453,'4',NULL,'19:18:01','19:21:18','2019-01-21 19:21:18'),(690,33,454,'4',NULL,'19:18:01','19:21:18','2019-01-21 19:21:18'),(691,33,455,'4',NULL,'19:18:01','19:21:18','2019-01-21 19:21:18'),(692,33,451,'4',NULL,'19:18:01','19:21:18','2019-01-21 19:21:18'),(693,33,457,'N/A',' ','19:18:01','19:21:18','2019-01-21 19:21:18'),(694,33,449,'OP2',NULL,'19:21:32','19:22:17','2019-01-21 19:22:17'),(695,33,445,'4',NULL,'19:21:32','19:22:17','2019-01-21 19:22:17'),(696,33,446,'4',NULL,'19:21:32','19:22:17','2019-01-21 19:22:17'),(697,33,447,'4',NULL,'19:21:32','19:22:17','2019-01-21 19:22:17'),(698,33,448,'4',NULL,'19:21:32','19:22:17','2019-01-21 19:22:17'),(699,33,444,'4',NULL,'19:21:32','19:22:17','2019-01-21 19:22:17'),(700,33,450,'N/A','N/A','19:21:32','19:22:17','2019-01-21 19:22:17'),(701,33,442,'OP2',NULL,'19:22:18','19:23:04','2019-01-21 19:23:04'),(702,33,438,'4',NULL,'19:22:18','19:23:04','2019-01-21 19:23:04'),(703,33,439,'4',NULL,'19:22:18','19:23:04','2019-01-21 19:23:04'),(704,33,440,'4',NULL,'19:22:18','19:23:04','2019-01-21 19:23:04'),(705,33,441,'4',NULL,'19:22:18','19:23:04','2019-01-21 19:23:04'),(706,33,437,'4',NULL,'19:22:18','19:23:04','2019-01-21 19:23:04'),(707,33,443,'N/A','N/A','19:22:18','19:23:04','2019-01-21 19:23:04'),(708,33,435,'OP2',NULL,'19:23:05','19:23:52','2019-01-21 19:23:52'),(709,33,431,'3',NULL,'19:23:05','19:23:52','2019-01-21 19:23:52'),(710,33,432,'4',NULL,'19:23:05','19:23:52','2019-01-21 19:23:52'),(711,33,433,'4',NULL,'19:23:05','19:23:52','2019-01-21 19:23:52'),(712,33,434,'4',NULL,'19:23:05','19:23:52','2019-01-21 19:23:52'),(713,33,430,'4',NULL,'19:23:05','19:23:52','2019-01-21 19:23:52'),(714,33,436,'N/A','N/A','19:23:05','19:23:52','2019-01-21 19:23:52'),(715,33,428,'OP1',NULL,'19:23:53','19:24:44','2019-01-21 19:24:44'),(716,33,424,'2',NULL,'19:23:53','19:24:44','2019-01-21 19:24:44'),(717,33,425,'2',NULL,'19:23:53','19:24:44','2019-01-21 19:24:44'),(718,33,426,'3',NULL,'19:23:53','19:24:44','2019-01-21 19:24:44'),(719,33,427,'4',NULL,'19:23:53','19:24:44','2019-01-21 19:24:44'),(720,33,423,'4',NULL,'19:23:53','19:24:44','2019-01-21 19:24:44'),(721,33,429,'N/A','N/A','19:23:53','19:24:44','2019-01-21 19:24:44'),(722,33,421,'OP2',NULL,'19:24:44','19:25:09','2019-01-21 19:25:10'),(723,33,417,'4',NULL,'19:24:44','19:25:09','2019-01-21 19:25:10'),(724,33,418,'4',NULL,'19:24:44','19:25:09','2019-01-21 19:25:10'),(725,33,419,'4',NULL,'19:24:44','19:25:09','2019-01-21 19:25:10'),(726,33,420,'4',NULL,'19:24:44','19:25:09','2019-01-21 19:25:10'),(727,33,416,'4',NULL,'19:24:44','19:25:09','2019-01-21 19:25:10'),(728,33,422,'N/A','N/A','19:24:44','19:25:09','2019-01-21 19:25:10'),(729,22,365,'OP2',NULL,'10:18:57','10:19:14','2019-01-22 10:19:14'),(730,22,361,'4',NULL,'10:18:57','10:19:14','2019-01-22 10:19:14'),(731,22,362,'4',NULL,'10:18:57','10:19:14','2019-01-22 10:19:14'),(732,22,363,'4',NULL,'10:18:57','10:19:14','2019-01-22 10:19:14'),(733,22,364,'4',NULL,'10:18:57','10:19:14','2019-01-22 10:19:14'),(734,22,360,'4',NULL,'10:18:57','10:19:14','2019-01-22 10:19:14'),(735,22,366,'N/A','N/A','10:18:57','10:19:14','2019-01-22 10:19:14'),(743,22,379,'OP2',NULL,'10:19:24','10:19:33','2019-01-22 10:19:33'),(744,22,375,'4',NULL,'10:19:24','10:19:33','2019-01-22 10:19:33'),(745,22,376,'4',NULL,'10:19:24','10:19:33','2019-01-22 10:19:33'),(746,22,377,'4',NULL,'10:19:24','10:19:33','2019-01-22 10:19:33'),(747,22,378,'4',NULL,'10:19:24','10:19:33','2019-01-22 10:19:33'),(748,22,374,'4',NULL,'10:19:24','10:19:33','2019-01-22 10:19:33'),(749,22,380,'N/A','N/A','10:19:24','10:19:33','2019-01-22 10:19:33'),(750,22,386,'OP2',NULL,'10:19:34','10:19:41','2019-01-22 10:19:41'),(751,22,382,'4',NULL,'10:19:34','10:19:41','2019-01-22 10:19:41'),(752,22,383,'4',NULL,'10:19:34','10:19:41','2019-01-22 10:19:41'),(753,22,384,'4',NULL,'10:19:34','10:19:41','2019-01-22 10:19:41'),(754,22,385,'4',NULL,'10:19:34','10:19:41','2019-01-22 10:19:41'),(755,22,381,'4',NULL,'10:19:34','10:19:41','2019-01-22 10:19:41'),(756,22,387,'N/A','N/A','10:19:34','10:19:41','2019-01-22 10:19:41'),(764,7,456,'OP2',NULL,'12:17:34','12:19:16','2019-01-22 12:19:16'),(765,7,452,'4',NULL,'12:17:34','12:19:16','2019-01-22 12:19:16'),(766,7,453,'4',NULL,'12:17:34','12:19:16','2019-01-22 12:19:16'),(767,7,454,'4',NULL,'12:17:34','12:19:16','2019-01-22 12:19:16'),(768,7,455,'4',NULL,'12:17:34','12:19:16','2019-01-22 12:19:16'),(769,7,451,'3',NULL,'12:17:34','12:19:16','2019-01-22 12:19:16'),(770,7,457,'N/A','N/A','12:17:34','12:19:16','2019-01-22 12:19:16'),(771,7,449,'OP2',NULL,'12:19:17','12:21:08','2019-01-22 12:21:08'),(772,7,445,'4',NULL,'12:19:17','12:21:08','2019-01-22 12:21:08'),(773,7,446,'4',NULL,'12:19:17','12:21:08','2019-01-22 12:21:08'),(774,7,447,'4',NULL,'12:19:17','12:21:08','2019-01-22 12:21:08'),(775,7,448,'4',NULL,'12:19:17','12:21:08','2019-01-22 12:21:08'),(776,7,444,'4',NULL,'12:19:17','12:21:08','2019-01-22 12:21:08'),(777,7,450,'N/A','N/A','12:19:17','12:21:08','2019-01-22 12:21:09'),(778,7,442,'OP1',NULL,'12:21:09','12:22:27','2019-01-22 12:22:27'),(779,7,438,'3',NULL,'12:21:09','12:22:27','2019-01-22 12:22:28'),(780,7,439,'3',NULL,'12:21:09','12:22:27','2019-01-22 12:22:28'),(781,7,440,'2',NULL,'12:21:09','12:22:27','2019-01-22 12:22:28'),(782,7,441,'2',NULL,'12:21:09','12:22:27','2019-01-22 12:22:28'),(783,7,437,'2',NULL,'12:21:09','12:22:27','2019-01-22 12:22:28'),(784,7,443,'N/A','N/A','12:21:09','12:22:27','2019-01-22 12:22:28'),(785,7,435,'OP2',NULL,'12:22:29','12:22:59','2019-01-22 12:22:59'),(786,7,431,'4',NULL,'12:22:29','12:22:59','2019-01-22 12:22:59'),(787,7,432,'4',NULL,'12:22:29','12:22:59','2019-01-22 12:22:59'),(788,7,433,'4',NULL,'12:22:29','12:22:59','2019-01-22 12:22:59'),(789,7,434,'4',NULL,'12:22:29','12:22:59','2019-01-22 12:22:59'),(790,7,430,'4',NULL,'12:22:29','12:22:59','2019-01-22 12:22:59'),(791,7,436,'N/A','N/A','12:22:29','12:22:59','2019-01-22 12:22:59'),(792,7,428,'OP1',NULL,'12:22:59','12:25:35','2019-01-22 12:25:35'),(793,7,424,'3',NULL,'12:22:59','12:25:35','2019-01-22 12:25:35'),(794,7,425,'3',NULL,'12:22:59','12:25:35','2019-01-22 12:25:35'),(795,7,426,'3',NULL,'12:22:59','12:25:35','2019-01-22 12:25:35'),(796,7,427,'3',NULL,'12:22:59','12:25:35','2019-01-22 12:25:35'),(797,7,423,'3',NULL,'12:22:59','12:25:35','2019-01-22 12:25:35'),(798,7,429,'N/A','A pergunta: \"Qual código você prefere\" \r\nnão atende a minha resposta, porque as duas formas poderiam ser utilizadas.','12:22:59','12:25:35','2019-01-22 12:25:35'),(799,7,421,'OP2',NULL,'12:25:36','12:25:55','2019-01-22 12:25:55'),(800,7,417,'4',NULL,'12:25:36','12:25:55','2019-01-22 12:25:55'),(801,7,418,'4',NULL,'12:25:36','12:25:55','2019-01-22 12:25:56'),(802,7,419,'4',NULL,'12:25:36','12:25:55','2019-01-22 12:25:56'),(803,7,420,'4',NULL,'12:25:36','12:25:55','2019-01-22 12:25:56'),(804,7,416,'4',NULL,'12:25:36','12:25:55','2019-01-22 12:25:56'),(805,7,422,'N/A','N/A','12:25:36','12:25:55','2019-01-22 12:25:56'),(813,38,365,'OP2',NULL,'12:31:28','12:40:02','2019-01-22 12:40:02'),(814,38,361,'4',NULL,'12:31:28','12:40:02','2019-01-22 12:40:02'),(815,38,362,'4',NULL,'12:31:28','12:40:02','2019-01-22 12:40:02'),(816,38,363,'4',NULL,'12:31:28','12:40:02','2019-01-22 12:40:02'),(817,38,364,'3',NULL,'12:31:28','12:40:02','2019-01-22 12:40:02'),(818,38,360,'4',NULL,'12:31:28','12:40:02','2019-01-22 12:40:03'),(819,38,366,'N/A','N/A','12:31:28','12:40:02','2019-01-22 12:40:03'),(820,39,456,'OP2',NULL,'12:26:29','12:41:04','2019-01-22 12:41:04'),(821,39,452,'4',NULL,'12:26:29','12:41:04','2019-01-22 12:41:04'),(822,39,453,'4',NULL,'12:26:29','12:41:04','2019-01-22 12:41:04'),(823,39,454,'4',NULL,'12:26:29','12:41:04','2019-01-22 12:41:04'),(824,39,455,'4',NULL,'12:26:29','12:41:04','2019-01-22 12:41:04'),(825,39,451,'4',NULL,'12:26:29','12:41:04','2019-01-22 12:41:04'),(826,39,457,'N/A','Acredito que daria para fazer dessa forma também,\r\n\r\nclosests  = elements.stream().map(closestElement -> closest(driver, element, selector)).filter(closestElement -> nonNull(closestElement )).collect(Collectors.toList());','12:26:29','12:41:04','2019-01-22 12:41:04'),(834,38,379,'OP2',NULL,'12:43:02','12:43:52','2019-01-22 12:43:52'),(835,38,375,'3',NULL,'12:43:02','12:43:52','2019-01-22 12:43:52'),(836,38,376,'3',NULL,'12:43:02','12:43:52','2019-01-22 12:43:52'),(837,38,377,'3',NULL,'12:43:02','12:43:52','2019-01-22 12:43:52'),(838,38,378,'3',NULL,'12:43:02','12:43:52','2019-01-22 12:43:52'),(839,38,374,'3',NULL,'12:43:02','12:43:52','2019-01-22 12:43:52'),(840,38,380,'N/A','N/A','12:43:02','12:43:52','2019-01-22 12:43:52'),(841,38,386,'OP2',NULL,'12:43:53','12:44:27','2019-01-22 12:44:27'),(842,38,382,'4',NULL,'12:43:53','12:44:27','2019-01-22 12:44:27'),(843,38,383,'4',NULL,'12:43:53','12:44:27','2019-01-22 12:44:27'),(844,38,384,'4',NULL,'12:43:53','12:44:27','2019-01-22 12:44:27'),(845,38,385,'3',NULL,'12:43:53','12:44:27','2019-01-22 12:44:27'),(846,38,381,'4',NULL,'12:43:53','12:44:27','2019-01-22 12:44:27'),(847,38,387,'N/A','N/A','12:43:53','12:44:27','2019-01-22 12:44:27'),(855,41,456,'OP2',NULL,'12:46:05','12:47:36','2019-01-22 12:47:36'),(856,41,452,'4',NULL,'12:46:05','12:47:36','2019-01-22 12:47:36'),(857,41,453,'3',NULL,'12:46:05','12:47:36','2019-01-22 12:47:36'),(858,41,454,'4',NULL,'12:46:05','12:47:36','2019-01-22 12:47:37'),(859,41,455,'4',NULL,'12:46:05','12:47:36','2019-01-22 12:47:37'),(860,41,451,'2',NULL,'12:46:05','12:47:36','2019-01-22 12:47:37'),(861,41,457,'N/A','N/A','12:46:05','12:47:36','2019-01-22 12:47:37'),(862,39,449,'OP2',NULL,'12:41:04','12:48:09','2019-01-22 12:48:09'),(863,39,445,'4',NULL,'12:41:04','12:48:09','2019-01-22 12:48:09'),(864,39,446,'4',NULL,'12:41:04','12:48:09','2019-01-22 12:48:09'),(865,39,447,'4',NULL,'12:41:04','12:48:09','2019-01-22 12:48:09'),(866,39,448,'4',NULL,'12:41:04','12:48:09','2019-01-22 12:48:09'),(867,39,444,'4',NULL,'12:41:04','12:48:09','2019-01-22 12:48:09'),(868,39,450,'N/A','Acredito que daria para fazer assim também.\r\nao invés de usar o foreach usar o map para criar o objeto novo \r\n.map(obj -> new Objeto(obj)).collect(Collectors.toList());\r\n','12:41:04','12:48:09','2019-01-22 12:48:09'),(869,39,442,'OP2',NULL,'12:48:10','12:48:28','2019-01-22 12:48:28'),(870,39,438,'4',NULL,'12:48:10','12:48:28','2019-01-22 12:48:28'),(871,39,439,'4',NULL,'12:48:10','12:48:28','2019-01-22 12:48:28'),(872,39,440,'4',NULL,'12:48:10','12:48:28','2019-01-22 12:48:28'),(873,39,441,'4',NULL,'12:48:10','12:48:28','2019-01-22 12:48:28'),(874,39,437,'4',NULL,'12:48:10','12:48:28','2019-01-22 12:48:28'),(875,39,443,'N/A','N/A','12:48:10','12:48:28','2019-01-22 12:48:28'),(876,39,435,'OP2',NULL,'12:48:29','12:48:49','2019-01-22 12:48:49'),(877,39,431,'4',NULL,'12:48:29','12:48:49','2019-01-22 12:48:49'),(878,39,432,'4',NULL,'12:48:29','12:48:49','2019-01-22 12:48:49'),(879,39,433,'4',NULL,'12:48:29','12:48:49','2019-01-22 12:48:49'),(880,39,434,'4',NULL,'12:48:29','12:48:49','2019-01-22 12:48:49'),(881,39,430,'4',NULL,'12:48:29','12:48:49','2019-01-22 12:48:49'),(882,39,436,'N/A','N/A','12:48:29','12:48:49','2019-01-22 12:48:49'),(883,39,428,'OP2',NULL,'12:48:50','12:49:01','2019-01-22 12:49:01'),(884,39,424,'4',NULL,'12:48:50','12:49:01','2019-01-22 12:49:01'),(885,39,425,'4',NULL,'12:48:50','12:49:01','2019-01-22 12:49:02'),(886,39,426,'4',NULL,'12:48:50','12:49:01','2019-01-22 12:49:02'),(887,39,427,'4',NULL,'12:48:50','12:49:01','2019-01-22 12:49:02'),(888,39,423,'4',NULL,'12:48:50','12:49:01','2019-01-22 12:49:02'),(889,39,429,'N/A','N/A','12:48:50','12:49:01','2019-01-22 12:49:02'),(890,39,421,'OP2',NULL,'12:49:03','12:49:21','2019-01-22 12:49:21'),(891,39,417,'4',NULL,'12:49:03','12:49:21','2019-01-22 12:49:21'),(892,39,418,'4',NULL,'12:49:03','12:49:21','2019-01-22 12:49:21'),(893,39,419,'4',NULL,'12:49:03','12:49:21','2019-01-22 12:49:21'),(894,39,420,'4',NULL,'12:49:03','12:49:21','2019-01-22 12:49:21'),(895,39,416,'4',NULL,'12:49:03','12:49:21','2019-01-22 12:49:21'),(896,39,422,'N/A','N/A','12:49:03','12:49:21','2019-01-22 12:49:21'),(897,43,456,'OP2',NULL,'13:00:42','13:04:41','2019-01-22 13:04:41'),(898,43,452,'2',NULL,'13:00:42','13:04:41','2019-01-22 13:04:41'),(899,43,453,'3',NULL,'13:00:42','13:04:41','2019-01-22 13:04:41'),(900,43,454,'5',NULL,'13:00:42','13:04:41','2019-01-22 13:04:41'),(901,43,455,'5',NULL,'13:00:42','13:04:41','2019-01-22 13:04:41'),(902,43,451,'3',NULL,'13:00:42','13:04:41','2019-01-22 13:04:41'),(903,43,457,'N/A','N/A','13:00:42','13:04:41','2019-01-22 13:04:41'),(904,43,449,'OP2',NULL,'13:04:42','13:05:48','2019-01-22 13:05:48'),(905,43,445,'2',NULL,'13:04:42','13:05:48','2019-01-22 13:05:49'),(906,43,446,'4',NULL,'13:04:42','13:05:48','2019-01-22 13:05:49'),(907,43,447,'5',NULL,'13:04:42','13:05:48','2019-01-22 13:05:49'),(908,43,448,'5',NULL,'13:04:42','13:05:48','2019-01-22 13:05:49'),(909,43,444,'5',NULL,'13:04:42','13:05:48','2019-01-22 13:05:49'),(910,43,450,'N/A','N/A','13:04:42','13:05:48','2019-01-22 13:05:49'),(911,43,442,'OP2',NULL,'13:05:49','13:06:17','2019-01-22 13:06:17'),(912,43,438,'2',NULL,'13:05:49','13:06:17','2019-01-22 13:06:17'),(913,43,439,'3',NULL,'13:05:49','13:06:17','2019-01-22 13:06:17'),(914,43,440,'4',NULL,'13:05:49','13:06:17','2019-01-22 13:06:17'),(915,43,441,'4',NULL,'13:05:49','13:06:17','2019-01-22 13:06:17'),(916,43,437,'3',NULL,'13:05:49','13:06:17','2019-01-22 13:06:17'),(917,43,443,'N/A','N/A','13:05:49','13:06:17','2019-01-22 13:06:17'),(918,43,435,'OP2',NULL,'13:06:17','13:07:01','2019-01-22 13:07:01'),(919,43,431,'5',NULL,'13:06:17','13:07:01','2019-01-22 13:07:01'),(920,43,432,'5',NULL,'13:06:17','13:07:01','2019-01-22 13:07:01'),(921,43,433,'5',NULL,'13:06:17','13:07:01','2019-01-22 13:07:01'),(922,43,434,'5',NULL,'13:06:17','13:07:01','2019-01-22 13:07:01'),(923,43,430,'5',NULL,'13:06:17','13:07:01','2019-01-22 13:07:01'),(924,43,436,'N/A','N/A','13:06:17','13:07:01','2019-01-22 13:07:01'),(925,43,428,'OP2',NULL,'13:07:02','13:07:18','2019-01-22 13:07:18'),(926,43,424,'4',NULL,'13:07:02','13:07:18','2019-01-22 13:07:18'),(927,43,425,'5',NULL,'13:07:02','13:07:18','2019-01-22 13:07:18'),(928,43,426,'5',NULL,'13:07:02','13:07:18','2019-01-22 13:07:18'),(929,43,427,'5',NULL,'13:07:02','13:07:18','2019-01-22 13:07:18'),(930,43,423,'4',NULL,'13:07:02','13:07:18','2019-01-22 13:07:18'),(931,43,429,'N/A','N/A','13:07:02','13:07:18','2019-01-22 13:07:18'),(932,43,421,'OP2',NULL,'13:07:19','13:07:34','2019-01-22 13:07:34'),(933,43,417,'4',NULL,'13:07:19','13:07:34','2019-01-22 13:07:34'),(934,43,418,'5',NULL,'13:07:19','13:07:34','2019-01-22 13:07:34'),(935,43,419,'4',NULL,'13:07:19','13:07:34','2019-01-22 13:07:34'),(936,43,420,'5',NULL,'13:07:19','13:07:34','2019-01-22 13:07:34'),(937,43,416,'4',NULL,'13:07:19','13:07:34','2019-01-22 13:07:34'),(938,43,422,'N/A','N/A','13:07:19','13:07:34','2019-01-22 13:07:34'),(946,45,456,'OP1',NULL,'15:26:04','15:29:28','2019-01-22 15:29:28'),(947,45,452,'3',NULL,'15:26:04','15:29:28','2019-01-22 15:29:28'),(948,45,453,'3',NULL,'15:26:04','15:29:28','2019-01-22 15:29:28'),(949,45,454,'4',NULL,'15:26:04','15:29:28','2019-01-22 15:29:28'),(950,45,455,'5',NULL,'15:26:04','15:29:28','2019-01-22 15:29:28'),(951,45,451,'1',NULL,'15:26:04','15:29:28','2019-01-22 15:29:28'),(952,45,457,'N/A','N/A','15:26:04','15:29:28','2019-01-22 15:29:28'),(953,45,449,'OP1',NULL,'15:29:29','15:32:43','2019-01-22 15:32:43'),(954,45,445,'2',NULL,'15:29:29','15:32:43','2019-01-22 15:32:43'),(955,45,446,'2',NULL,'15:29:29','15:32:43','2019-01-22 15:32:43'),(956,45,447,'3',NULL,'15:29:29','15:32:43','2019-01-22 15:32:43'),(957,45,448,'2',NULL,'15:29:29','15:32:43','2019-01-22 15:32:43'),(958,45,444,'2',NULL,'15:29:29','15:32:43','2019-01-22 15:32:44'),(959,45,450,'N/A','N/A','15:29:29','15:32:43','2019-01-22 15:32:44'),(960,45,442,'OP2',NULL,'15:32:44','15:34:21','2019-01-22 15:34:21'),(961,45,438,'3',NULL,'15:32:44','15:34:21','2019-01-22 15:34:21'),(962,45,439,'3',NULL,'15:32:44','15:34:21','2019-01-22 15:34:21'),(963,45,440,'3',NULL,'15:32:44','15:34:21','2019-01-22 15:34:21'),(964,45,441,'3',NULL,'15:32:44','15:34:21','2019-01-22 15:34:21'),(965,45,437,'2',NULL,'15:32:44','15:34:21','2019-01-22 15:34:21'),(966,45,443,'N/A','N/A','15:32:44','15:34:21','2019-01-22 15:34:21'),(967,45,435,'OP2',NULL,'15:34:22','15:35:39','2019-01-22 15:35:39'),(968,45,431,'5',NULL,'15:34:22','15:35:39','2019-01-22 15:35:39'),(969,45,432,'4',NULL,'15:34:22','15:35:39','2019-01-22 15:35:39'),(970,45,433,'5',NULL,'15:34:22','15:35:39','2019-01-22 15:35:39'),(971,45,434,'3',NULL,'15:34:22','15:35:39','2019-01-22 15:35:39'),(972,45,430,'4',NULL,'15:34:22','15:35:39','2019-01-22 15:35:39'),(973,45,436,'N/A','N/A','15:34:22','15:35:39','2019-01-22 15:35:39'),(974,45,428,'OP2',NULL,'15:35:40','15:36:02','2019-01-22 15:36:02'),(975,45,424,'3',NULL,'15:35:40','15:36:02','2019-01-22 15:36:03'),(976,45,425,'3',NULL,'15:35:40','15:36:02','2019-01-22 15:36:03'),(977,45,426,'3',NULL,'15:35:40','15:36:02','2019-01-22 15:36:03'),(978,45,427,'3',NULL,'15:35:40','15:36:02','2019-01-22 15:36:03'),(979,45,423,'3',NULL,'15:35:40','15:36:02','2019-01-22 15:36:03'),(980,45,429,'N/A','N/A','15:35:40','15:36:02','2019-01-22 15:36:03'),(981,45,421,'OP2',NULL,'15:36:04','15:38:45','2019-01-22 15:38:45'),(982,45,417,'3',NULL,'15:36:04','15:38:45','2019-01-22 15:38:45'),(983,45,418,'3',NULL,'15:36:04','15:38:45','2019-01-22 15:38:45'),(984,45,419,'3',NULL,'15:36:04','15:38:45','2019-01-22 15:38:45'),(985,45,420,'3',NULL,'15:36:04','15:38:45','2019-01-22 15:38:45'),(986,45,416,'3',NULL,'15:36:04','15:38:45','2019-01-22 15:38:45'),(987,45,422,'N/A','N/A','15:36:04','15:38:45','2019-01-22 15:38:45'),(988,41,449,'OP2',NULL,'23:22:36','23:23:26','2019-01-22 23:23:26'),(989,41,445,'4',NULL,'23:22:36','23:23:26','2019-01-22 23:23:26'),(990,41,446,'3',NULL,'23:22:36','23:23:26','2019-01-22 23:23:27'),(991,41,447,'4',NULL,'23:22:36','23:23:26','2019-01-22 23:23:27'),(992,41,448,'4',NULL,'23:22:36','23:23:26','2019-01-22 23:23:27'),(993,41,444,'3',NULL,'23:22:36','23:23:26','2019-01-22 23:23:27'),(994,41,450,'N/A','N/A','23:22:36','23:23:26','2019-01-22 23:23:27'),(995,41,442,'OP2',NULL,'23:23:27','23:25:48','2019-01-22 23:25:48'),(996,41,438,'4',NULL,'23:23:27','23:25:48','2019-01-22 23:25:48'),(997,41,439,'4',NULL,'23:23:27','23:25:48','2019-01-22 23:25:48'),(998,41,440,'3',NULL,'23:23:27','23:25:48','2019-01-22 23:25:48'),(999,41,441,'4',NULL,'23:23:27','23:25:48','2019-01-22 23:25:48'),(1000,41,437,'3',NULL,'23:23:27','23:25:48','2019-01-22 23:25:48'),(1001,41,443,'N/A','N/A','23:23:27','23:25:48','2019-01-22 23:25:48'),(1002,41,435,'OP1',NULL,'23:25:49','23:26:57','2019-01-22 23:26:57'),(1003,41,431,'4',NULL,'23:25:49','23:26:57','2019-01-22 23:26:58'),(1004,41,432,'3',NULL,'23:25:49','23:26:57','2019-01-22 23:26:58'),(1005,41,433,'4',NULL,'23:25:49','23:26:57','2019-01-22 23:26:58'),(1006,41,434,'4',NULL,'23:25:49','23:26:57','2019-01-22 23:26:58'),(1007,41,430,'2',NULL,'23:25:49','23:26:57','2019-01-22 23:26:58'),(1008,41,436,'N/A','N/A','23:25:49','23:26:57','2019-01-22 23:26:58'),(1009,41,428,'OP2',NULL,'23:26:58','23:27:15','2019-01-22 23:27:15'),(1010,41,424,'4',NULL,'23:26:58','23:27:15','2019-01-22 23:27:15'),(1011,41,425,'4',NULL,'23:26:58','23:27:15','2019-01-22 23:27:15'),(1012,41,426,'4',NULL,'23:26:58','23:27:15','2019-01-22 23:27:15'),(1013,41,427,'4',NULL,'23:26:58','23:27:15','2019-01-22 23:27:15'),(1014,41,423,'2',NULL,'23:26:58','23:27:15','2019-01-22 23:27:15'),(1015,41,429,'N/A','N/A','23:26:58','23:27:15','2019-01-22 23:27:15'),(1016,41,421,'OP1',NULL,'23:27:16','23:28:04','2019-01-22 23:28:04'),(1017,41,417,'2',NULL,'23:27:16','23:28:04','2019-01-22 23:28:04'),(1018,41,418,'2',NULL,'23:27:16','23:28:04','2019-01-22 23:28:04'),(1019,41,419,'3',NULL,'23:27:16','23:28:04','2019-01-22 23:28:04'),(1020,41,420,'4',NULL,'23:27:16','23:28:04','2019-01-22 23:28:04'),(1021,41,416,'2',NULL,'23:27:16','23:28:04','2019-01-22 23:28:04'),(1022,41,422,'N/A','N/A','23:27:16','23:28:04','2019-01-22 23:28:04'),(1030,34,365,'OP2',NULL,'07:53:57','07:54:34','2019-01-23 07:54:34'),(1031,34,361,'5',NULL,'07:53:57','07:54:34','2019-01-23 07:54:34'),(1032,34,362,'4',NULL,'07:53:57','07:54:34','2019-01-23 07:54:34'),(1033,34,363,'4',NULL,'07:53:57','07:54:34','2019-01-23 07:54:34'),(1034,34,364,'5',NULL,'07:53:57','07:54:34','2019-01-23 07:54:34'),(1035,34,360,'5',NULL,'07:53:57','07:54:34','2019-01-23 07:54:34'),(1036,34,366,'N/A','N/A','07:53:57','07:54:34','2019-01-23 07:54:34'),(1044,34,379,'OP2',NULL,'07:55:07','07:55:37','2019-01-23 07:55:37'),(1045,34,375,'5',NULL,'07:55:07','07:55:37','2019-01-23 07:55:37'),(1046,34,376,'4',NULL,'07:55:07','07:55:37','2019-01-23 07:55:37'),(1047,34,377,'5',NULL,'07:55:07','07:55:37','2019-01-23 07:55:37'),(1048,34,378,'5',NULL,'07:55:07','07:55:37','2019-01-23 07:55:37'),(1049,34,374,'5',NULL,'07:55:07','07:55:37','2019-01-23 07:55:37'),(1050,34,380,'N/A','N/A','07:55:07','07:55:37','2019-01-23 07:55:37'),(1051,34,386,'OP2',NULL,'07:55:37','07:55:55','2019-01-23 07:55:55'),(1052,34,382,'5',NULL,'07:55:37','07:55:55','2019-01-23 07:55:55'),(1053,34,383,'4',NULL,'07:55:37','07:55:55','2019-01-23 07:55:55'),(1054,34,384,'5',NULL,'07:55:37','07:55:55','2019-01-23 07:55:55'),(1055,34,385,'5',NULL,'07:55:37','07:55:55','2019-01-23 07:55:55'),(1056,34,381,'5',NULL,'07:55:37','07:55:55','2019-01-23 07:55:55'),(1057,34,387,'N/A','N/A','07:55:37','07:55:55','2019-01-23 07:55:55'),(1072,36,365,'OP2',NULL,'01:05:13','01:09:14','2019-01-24 01:09:14'),(1073,36,361,'5',NULL,'01:05:13','01:09:14','2019-01-24 01:09:14'),(1074,36,362,'5',NULL,'01:05:13','01:09:14','2019-01-24 01:09:14'),(1075,36,363,'5',NULL,'01:05:13','01:09:14','2019-01-24 01:09:14'),(1076,36,364,'3',NULL,'01:05:13','01:09:14','2019-01-24 01:09:14'),(1077,36,360,'5',NULL,'01:05:13','01:09:14','2019-01-24 01:09:14'),(1078,36,366,'N/A','O código transformado é muito mais claro pela mera remoção de código \"boilerplate\" proporcionada pelas expressões lambda.','01:05:13','01:09:14','2019-01-24 01:09:14'),(1086,36,379,'OP2',NULL,'01:12:45','01:13:41','2019-01-24 01:13:41'),(1087,36,375,'5',NULL,'01:12:45','01:13:41','2019-01-24 01:13:42'),(1088,36,376,'5',NULL,'01:12:45','01:13:41','2019-01-24 01:13:42'),(1089,36,377,'5',NULL,'01:12:45','01:13:41','2019-01-24 01:13:42'),(1090,36,378,'3',NULL,'01:12:45','01:13:41','2019-01-24 01:13:42'),(1091,36,374,'5',NULL,'01:12:45','01:13:41','2019-01-24 01:13:42'),(1092,36,380,'N/A','Exemplo claro de como a sintaxe de expressões lambda é superior.','01:12:45','01:13:41','2019-01-24 01:13:42'),(1093,36,386,'OP2',NULL,'01:13:42','01:15:40','2019-01-24 01:15:40'),(1094,36,382,'5',NULL,'01:13:42','01:15:40','2019-01-24 01:15:40'),(1095,36,383,'5',NULL,'01:13:42','01:15:40','2019-01-24 01:15:40'),(1096,36,384,'5',NULL,'01:13:42','01:15:40','2019-01-24 01:15:40'),(1097,36,385,'5',NULL,'01:13:42','01:15:40','2019-01-24 01:15:40'),(1098,36,381,'5',NULL,'01:13:42','01:15:40','2019-01-24 01:15:40'),(1099,36,387,'N/A','O código sai de uma característica iterativa pra uma funcional. Muito mais clara a intenção do código.','01:13:42','01:15:40','2019-01-24 01:15:40'),(1114,46,365,'OP2',NULL,'17:07:43','17:09:27','2019-01-24 17:09:27'),(1115,46,361,'4',NULL,'17:07:43','17:09:27','2019-01-24 17:09:27'),(1116,46,362,'3',NULL,'17:07:43','17:09:27','2019-01-24 17:09:27'),(1117,46,363,'4',NULL,'17:07:43','17:09:27','2019-01-24 17:09:27'),(1118,46,364,'4',NULL,'17:07:43','17:09:27','2019-01-24 17:09:28'),(1119,46,360,'2',NULL,'17:07:43','17:09:27','2019-01-24 17:09:28'),(1120,46,366,'N/A','N/A','17:07:43','17:09:27','2019-01-24 17:09:28'),(1128,46,379,'OP2',NULL,'17:09:49','17:10:18','2019-01-24 17:10:18'),(1129,46,375,'4',NULL,'17:09:49','17:10:18','2019-01-24 17:10:18'),(1130,46,376,'3',NULL,'17:09:49','17:10:18','2019-01-24 17:10:18'),(1131,46,377,'4',NULL,'17:09:49','17:10:18','2019-01-24 17:10:18'),(1132,46,378,'2',NULL,'17:09:49','17:10:18','2019-01-24 17:10:18'),(1133,46,374,'2',NULL,'17:09:49','17:10:18','2019-01-24 17:10:18'),(1134,46,380,'N/A','N/A','17:09:49','17:10:18','2019-01-24 17:10:18'),(1135,46,386,'OP2',NULL,'17:10:19','17:10:44','2019-01-24 17:10:44'),(1136,46,382,'5',NULL,'17:10:19','17:10:44','2019-01-24 17:10:44'),(1137,46,383,'3',NULL,'17:10:19','17:10:44','2019-01-24 17:10:45'),(1138,46,384,'4',NULL,'17:10:19','17:10:44','2019-01-24 17:10:45'),(1139,46,385,'4',NULL,'17:10:19','17:10:44','2019-01-24 17:10:45'),(1140,46,381,'2',NULL,'17:10:19','17:10:44','2019-01-24 17:10:45'),(1141,46,387,'N/A','N/A','17:10:19','17:10:44','2019-01-24 17:10:45'),(1149,47,456,'OP2',NULL,'21:38:29','21:43:47','2019-01-27 21:43:47'),(1150,47,452,'4',NULL,'21:38:29','21:43:47','2019-01-27 21:43:47'),(1151,47,453,'4',NULL,'21:38:29','21:43:47','2019-01-27 21:43:47'),(1152,47,454,'4',NULL,'21:38:29','21:43:47','2019-01-27 21:43:47'),(1153,47,455,'4',NULL,'21:38:29','21:43:47','2019-01-27 21:43:47'),(1154,47,451,'4',NULL,'21:38:29','21:43:47','2019-01-27 21:43:47'),(1155,47,457,'N/A','N/A','21:38:29','21:43:47','2019-01-27 21:43:47'),(1156,47,449,'OP1',NULL,'21:43:47','21:47:55','2019-01-27 21:47:55'),(1157,47,445,'3',NULL,'21:43:47','21:47:55','2019-01-27 21:47:55'),(1158,47,446,'3',NULL,'21:43:47','21:47:55','2019-01-27 21:47:55'),(1159,47,447,'3',NULL,'21:43:47','21:47:55','2019-01-27 21:47:55'),(1160,47,448,'4',NULL,'21:43:47','21:47:55','2019-01-27 21:47:55'),(1161,47,444,'4',NULL,'21:43:47','21:47:55','2019-01-27 21:47:55'),(1162,47,450,'N/A','N/A','21:43:47','21:47:55','2019-01-27 21:47:55'),(1163,47,442,'OP1',NULL,'21:47:56','21:51:18','2019-01-27 21:51:18'),(1164,47,438,'3',NULL,'21:47:56','21:51:18','2019-01-27 21:51:18'),(1165,47,439,'4',NULL,'21:47:56','21:51:18','2019-01-27 21:51:18'),(1166,47,440,'3',NULL,'21:47:56','21:51:18','2019-01-27 21:51:18'),(1167,47,441,'4',NULL,'21:47:56','21:51:18','2019-01-27 21:51:18'),(1168,47,437,'4',NULL,'21:47:56','21:51:18','2019-01-27 21:51:18'),(1169,47,443,'N/A','N/A','21:47:56','21:51:18','2019-01-27 21:51:18'),(1170,47,435,'OP2',NULL,'21:51:19','21:52:19','2019-01-27 21:52:19'),(1171,47,431,'4',NULL,'21:51:19','21:52:19','2019-01-27 21:52:19'),(1172,47,432,'4',NULL,'21:51:19','21:52:19','2019-01-27 21:52:19'),(1173,47,433,'4',NULL,'21:51:19','21:52:19','2019-01-27 21:52:19'),(1174,47,434,'4',NULL,'21:51:19','21:52:19','2019-01-27 21:52:19'),(1175,47,430,'4',NULL,'21:51:19','21:52:19','2019-01-27 21:52:19'),(1176,47,436,'N/A','N/A','21:51:19','21:52:19','2019-01-27 21:52:19'),(1177,47,428,'OP1',NULL,'21:52:20','21:53:31','2019-01-27 21:53:31'),(1178,47,424,'2',NULL,'21:52:20','21:53:31','2019-01-27 21:53:31'),(1179,47,425,'4',NULL,'21:52:20','21:53:31','2019-01-27 21:53:31'),(1180,47,426,'2',NULL,'21:52:20','21:53:31','2019-01-27 21:53:31'),(1181,47,427,'4',NULL,'21:52:20','21:53:31','2019-01-27 21:53:31'),(1182,47,423,'4',NULL,'21:52:20','21:53:31','2019-01-27 21:53:31'),(1183,47,429,'N/A','N/A','21:52:20','21:53:31','2019-01-27 21:53:31'),(1184,47,421,'OP2',NULL,'21:53:31','21:56:45','2019-01-27 21:56:45'),(1185,47,417,'3',NULL,'21:53:31','21:56:45','2019-01-27 21:56:45'),(1186,47,418,'3',NULL,'21:53:31','21:56:45','2019-01-27 21:56:45'),(1187,47,419,'3',NULL,'21:53:31','21:56:45','2019-01-27 21:56:45'),(1188,47,420,'4',NULL,'21:53:31','21:56:45','2019-01-27 21:56:45'),(1189,47,416,'4',NULL,'21:53:31','21:56:45','2019-01-27 21:56:45'),(1190,47,422,'N/A','N/A','21:53:31','21:56:45','2019-01-27 21:56:45');
/*!40000 ALTER TABLE `answers` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `language_search_events`
--

DROP TABLE IF EXISTS `language_search_events`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `language_search_events` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `language_id` tinyint(4) NOT NULL,
  `search_event_id` int(11) NOT NULL,
  `created` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `fk_languages_has_search_events_search_events1_idx` (`search_event_id`),
  KEY `fk_languages_has_search_events_languages1_idx` (`language_id`),
  CONSTRAINT `fk_languages_has_search_events_languages1` FOREIGN KEY (`language_id`) REFERENCES `languages` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_languages_has_search_events_search_events1` FOREIGN KEY (`search_event_id`) REFERENCES `search_events` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `language_search_events`
--

LOCK TABLES `language_search_events` WRITE;
/*!40000 ALTER TABLE `language_search_events` DISABLE KEYS */;
INSERT INTO `language_search_events` VALUES (5,1,5,'2018-09-02 16:33:20');
/*!40000 ALTER TABLE `language_search_events` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `languages`
--

DROP TABLE IF EXISTS `languages`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `languages` (
  `id` tinyint(4) NOT NULL AUTO_INCREMENT,
  `description` varchar(25) NOT NULL,
  `brush` varchar(25) NOT NULL,
  `created` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `languages`
--

LOCK TABLES `languages` WRITE;
/*!40000 ALTER TABLE `languages` DISABLE KEYS */;
INSERT INTO `languages` VALUES (1,'Java','java','2018-02-14 11:10:20');
/*!40000 ALTER TABLE `languages` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `metric_types`
--

DROP TABLE IF EXISTS `metric_types`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `metric_types` (
  `id` tinyint(4) NOT NULL AUTO_INCREMENT,
  `description` varchar(20) DEFAULT NULL,
  `created` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `metric_types`
--

LOCK TABLES `metric_types` WRITE;
/*!40000 ALTER TABLE `metric_types` DISABLE KEYS */;
INSERT INTO `metric_types` VALUES (2,'Qualitativa','2018-02-14 11:10:22'),(3,'Quantitativa','2018-02-14 11:10:25');
/*!40000 ALTER TABLE `metric_types` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `metrics`
--

DROP TABLE IF EXISTS `metrics`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `metrics` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `metric_type_id` tinyint(4) NOT NULL,
  `acronym` varchar(100) NOT NULL,
  `description` text NOT NULL,
  `created` datetime DEFAULT NULL,
  `modified` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FK` (`metric_type_id`),
  CONSTRAINT `fk_metrics_metric_types1` FOREIGN KEY (`metric_type_id`) REFERENCES `metric_types` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=27 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `metrics`
--

LOCK TABLES `metrics` WRITE;
/*!40000 ALTER TABLE `metrics` DISABLE KEYS */;
INSERT INTO `metrics` VALUES (1,3,'LOC','Linhas de código (linhas de código pertencentes aos métodos)','2018-02-14 11:10:25','2018-02-14 11:10:25'),(2,3,'ACCM','Complexidade ciclomática do método (quantidade de caminhos diferentes no método);','2018-02-14 11:10:25','2018-02-14 11:10:25'),(4,2,'LIKERT','Mede atitudes e comportamentos utilizando opções de resposta que variam de um extremo a outro.','2018-02-14 11:10:25','2018-02-14 11:10:25'),(5,3,'LINELENGHT','Comprimento de linha','2018-02-14 11:10:25','2018-02-14 11:10:25'),(7,3,'QTDIDENT','Quantidade de identificadores','2018-02-14 11:10:25','2018-02-14 11:10:25'),(8,3,'QTDIDENTUNIQUE','Quantidade de identificadores únicos','2018-02-14 11:10:25','2018-02-14 11:10:25'),(9,3,'QTDKEYWORDS','Quantidade de Palavras chave','2018-02-14 11:10:25','2018-02-14 11:10:25'),(10,3,'QTDNUMBERS','Quantidade de Números','2018-02-14 11:10:25','2018-02-14 11:10:25'),(11,3,'QTDCOMMENTS','Quantidade de Comentários','2018-02-14 11:10:25','2018-02-14 11:10:25'),(12,3,'QTDPERIODS','Quantidade de Períodos','2018-02-14 11:10:25','2018-02-14 11:10:25'),(13,3,'QTDVIRGULAS','Quantidade de Vírgulas','2018-02-14 11:10:25','2018-02-14 11:10:25'),(14,3,'QTDSPACES','Quantidade de Espaços','2018-02-14 11:10:25','2018-02-14 11:10:25'),(15,3,'QTDPARENTHESES','Quantidade de Parêntese','2018-02-14 11:10:25','2018-02-14 11:10:25'),(16,3,'QTDARITHMETICS','Quantidade de Operadores Aritméticos','2018-02-14 11:10:25','2018-02-14 11:10:25'),(17,3,'QTDCOMPARATIONS','Quantidade de Operadores de Comparação','2018-02-14 11:10:25','2018-02-14 11:10:25'),(18,3,'QTDATRIBUTIONS','Quantidade de Atribuições (=)','2018-02-14 11:10:25','2018-02-14 11:10:25'),(19,3,'QTDBLANKLINES','Quantidade de Linhas em branco','2018-02-14 11:10:25','2018-02-14 11:10:25'),(20,3,'HLn1','Halstead n1',NULL,NULL),(21,3,'HLn2','Halstead n2',NULL,NULL),(22,3,'HL_N1','Halstead N1',NULL,NULL),(23,3,'HL_N2','Halstead N2',NULL,NULL),(24,3,'SHEntropy','Entropia de shanom',NULL,NULL),(25,3,'HalsteadV','Volume de Halstead',NULL,NULL),(26,3,'PostnetReadability','Metrica de Legibilidade de Posnet',NULL,NULL);
/*!40000 ALTER TABLE `metrics` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `participant_types`
--

DROP TABLE IF EXISTS `participant_types`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `participant_types` (
  `id` tinyint(4) NOT NULL AUTO_INCREMENT,
  `description` varchar(45) NOT NULL,
  `created` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `participant_types`
--

LOCK TABLES `participant_types` WRITE;
/*!40000 ALTER TABLE `participant_types` DISABLE KEYS */;
INSERT INTO `participant_types` VALUES (1,'Responsavel',NULL),(2,'Coordenador',NULL),(3,'Intrevistado',NULL),(4,'Cooperador',NULL);
/*!40000 ALTER TABLE `participant_types` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `participants`
--

DROP TABLE IF EXISTS `participants`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `participants` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `search_event_id` int(11) NOT NULL,
  `participant_type_id` tinyint(4) NOT NULL,
  `created` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `fk_participants_search_events1_idx` (`search_event_id`),
  KEY `fk_participants_users1_idx` (`user_id`),
  KEY `fk_participants_participant_types1_idx` (`participant_type_id`),
  CONSTRAINT `fk_participants_participant_types1` FOREIGN KEY (`participant_type_id`) REFERENCES `participant_types` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_participants_search_events1` FOREIGN KEY (`search_event_id`) REFERENCES `search_events` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_participants_users1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=19 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `participants`
--

LOCK TABLES `participants` WRITE;
/*!40000 ALTER TABLE `participants` DISABLE KEYS */;
INSERT INTO `participants` VALUES (5,2,5,1,'2018-09-02 16:33:21'),(7,2,5,4,'2018-09-02 18:30:20'),(8,2,5,4,'2018-09-02 18:34:15'),(9,2,5,4,'2018-09-02 18:34:38'),(10,2,5,4,'2018-09-02 18:35:18'),(11,2,5,4,'2018-11-26 15:59:49'),(12,2,5,4,'2018-11-26 15:59:58'),(13,2,5,4,'2018-11-26 16:00:07'),(14,2,5,4,'2018-11-26 16:00:14'),(15,2,5,4,'2018-11-26 16:00:21'),(16,2,5,4,'2018-11-26 16:00:28'),(17,2,5,4,'2019-01-10 06:39:51'),(18,2,5,4,'2019-01-10 06:40:56');
/*!40000 ALTER TABLE `participants` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `question_types`
--

DROP TABLE IF EXISTS `question_types`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `question_types` (
  `id` tinyint(4) NOT NULL AUTO_INCREMENT,
  `description` varchar(25) NOT NULL,
  `created` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `question_types`
--

LOCK TABLES `question_types` WRITE;
/*!40000 ALTER TABLE `question_types` DISABLE KEYS */;
INSERT INTO `question_types` VALUES (1,'Multipla Escolha','2018-02-14 11:10:25'),(2,'Descritiva','2018-02-14 11:10:25'),(3,'Numerica','2018-02-14 11:10:25'),(4,'Likert','2019-01-06 11:10:25'),(5,'Sim/Não','2019-01-06 11:10:25'),(6,'Resposta única','2019-01-06 11:10:25');
/*!40000 ALTER TABLE `question_types` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `questions`
--

DROP TABLE IF EXISTS `questions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `questions` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `participant_id` int(11) NOT NULL,
  `question_type_id` tinyint(4) NOT NULL,
  `description` text COLLATE utf8_czech_ci NOT NULL,
  `jumps` int(11) DEFAULT NULL,
  `created` datetime DEFAULT NULL,
  `modified` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `fk_questions_question_types1_idx` (`question_type_id`),
  KEY `fk_questions_participants1_idx` (`participant_id`),
  CONSTRAINT `fk_questions_participants1` FOREIGN KEY (`participant_id`) REFERENCES `participants` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_questions_question_types1` FOREIGN KEY (`question_type_id`) REFERENCES `question_types` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8 COLLATE=utf8_czech_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `questions`
--

LOCK TABLES `questions` WRITE;
/*!40000 ALTER TABLE `questions` DISABLE KEYS */;
INSERT INTO `questions` VALUES (2,7,4,'A adoção de expressões lambda no código 2 melhorou a legibilidade?',NULL,'2018-09-02 18:30:20','2018-09-02 18:30:20'),(3,8,4,'É fácil compreender o propósito da transformação?',NULL,'2018-09-02 18:34:15','2018-09-02 18:34:15'),(4,9,4,'Considerando essa transformação específica, você concorda que ela deveria ser aplicada?',NULL,'2018-09-02 18:34:39','2018-09-02 18:34:39'),(5,10,4,'A redução da quantidade de branches (laços de repetição como for ou while e sentenças condicionais como if-then-else ou switch cases) é relevante para avaliar a qualidade da transformação?',NULL,'2018-09-02 18:35:18','2018-09-02 18:35:18'),(6,11,4,'A redução da quantidade de linhas de código é relevante para avaliar a qualidade da transformação?',NULL,'2018-11-26 15:59:49','2018-11-26 15:59:49'),(11,17,6,'Qual código você prefere?',NULL,'2019-01-10 06:39:52','2019-01-10 06:39:52'),(12,18,2,'Você gostaria de complementar as suas respostas?',NULL,'2019-01-10 06:40:56','2019-01-10 06:40:56');
/*!40000 ALTER TABLE `questions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `result_questions`
--

DROP TABLE IF EXISTS `result_questions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `result_questions` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `result_id` int(11) NOT NULL,
  `question_id` int(11) NOT NULL,
  `created` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `fk_result_questions_questions1_idx` (`question_id`),
  KEY `fk_result_questions_results1_idx` (`result_id`),
  CONSTRAINT `fk_result_questions_questions1` FOREIGN KEY (`question_id`) REFERENCES `questions` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_result_questions_results1` FOREIGN KEY (`result_id`) REFERENCES `results` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=458 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `result_questions`
--

LOCK TABLES `result_questions` WRITE;
/*!40000 ALTER TABLE `result_questions` DISABLE KEYS */;
INSERT INTO `result_questions` VALUES (360,3861,2,'2019-01-10 10:24:18'),(361,3861,3,'2019-01-10 10:24:18'),(362,3861,4,'2019-01-10 10:24:18'),(363,3861,5,'2019-01-10 10:24:18'),(364,3861,6,'2019-01-10 10:24:18'),(365,3861,11,'2019-01-10 10:24:18'),(366,3861,12,'2019-01-10 10:24:18'),(374,3997,2,'2019-01-10 10:24:19'),(375,3997,3,'2019-01-10 10:24:19'),(376,3997,4,'2019-01-10 10:24:19'),(377,3997,5,'2019-01-10 10:24:19'),(378,3997,6,'2019-01-10 10:24:20'),(379,3997,11,'2019-01-10 10:24:20'),(380,3997,12,'2019-01-10 10:24:20'),(381,4286,2,'2019-01-10 10:24:20'),(382,4286,3,'2019-01-10 10:24:20'),(383,4286,4,'2019-01-10 10:24:20'),(384,4286,5,'2019-01-10 10:24:20'),(385,4286,6,'2019-01-10 10:24:20'),(386,4286,11,'2019-01-10 10:24:20'),(387,4286,12,'2019-01-10 10:24:20'),(416,4456,2,'2019-01-10 10:24:22'),(417,4456,3,'2019-01-10 10:24:22'),(418,4456,4,'2019-01-10 10:24:22'),(419,4456,5,'2019-01-10 10:24:22'),(420,4456,6,'2019-01-10 10:24:22'),(421,4456,11,'2019-01-10 10:24:22'),(422,4456,12,'2019-01-10 10:24:22'),(423,6224,2,'2019-01-10 10:24:23'),(424,6224,3,'2019-01-10 10:24:23'),(425,6224,4,'2019-01-10 10:24:23'),(426,6224,5,'2019-01-10 10:24:23'),(427,6224,6,'2019-01-10 10:24:23'),(428,6224,11,'2019-01-10 10:24:23'),(429,6224,12,'2019-01-10 10:24:23'),(430,6462,2,'2019-01-10 10:24:23'),(431,6462,3,'2019-01-10 10:24:23'),(432,6462,4,'2019-01-10 10:24:23'),(433,6462,5,'2019-01-10 10:24:23'),(434,6462,6,'2019-01-10 10:24:23'),(435,6462,11,'2019-01-10 10:24:23'),(436,6462,12,'2019-01-10 10:24:23'),(437,6496,2,'2019-01-10 10:24:23'),(438,6496,3,'2019-01-10 10:24:23'),(439,6496,4,'2019-01-10 10:24:24'),(440,6496,5,'2019-01-10 10:24:24'),(441,6496,6,'2019-01-10 10:24:24'),(442,6496,11,'2019-01-10 10:24:24'),(443,6496,12,'2019-01-10 10:24:24'),(444,6513,2,'2019-01-10 10:24:24'),(445,6513,3,'2019-01-10 10:24:24'),(446,6513,4,'2019-01-10 10:24:24'),(447,6513,5,'2019-01-10 10:24:24'),(448,6513,6,'2019-01-10 10:24:24'),(449,6513,11,'2019-01-10 10:24:24'),(450,6513,12,'2019-01-10 10:24:24'),(451,6666,2,'2019-01-10 10:24:24'),(452,6666,3,'2019-01-10 10:24:24'),(453,6666,4,'2019-01-10 10:24:24'),(454,6666,5,'2019-01-10 10:24:24'),(455,6666,6,'2019-01-10 10:24:24'),(456,6666,11,'2019-01-10 10:24:25'),(457,6666,12,'2019-01-10 10:24:25');
/*!40000 ALTER TABLE `result_questions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `results`
--

DROP TABLE IF EXISTS `results`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `results` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `transformation_id` int(11) NOT NULL,
  `metric_id` int(11) NOT NULL,
  `before` varchar(45) DEFAULT NULL,
  `after` varchar(45) DEFAULT NULL,
  `avg_before` varchar(45) DEFAULT NULL,
  `avg_after` varchar(45) DEFAULT NULL,
  `created` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FK` (`transformation_id`,`metric_id`),
  KEY `fk_results_metrics1_idx` (`metric_id`),
  CONSTRAINT `fk_results_metrics1` FOREIGN KEY (`metric_id`) REFERENCES `metrics` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_results_transformations1` FOREIGN KEY (`transformation_id`) REFERENCES `transformations` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=7331 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `results`
--

LOCK TABLES `results` WRITE;
/*!40000 ALTER TABLE `results` DISABLE KEYS */;
INSERT INTO `results` VALUES (3655,1015,1,'6','6',NULL,NULL,'2019-01-09 00:27:13'),(3656,1015,2,'2','2',NULL,NULL,'2019-01-09 00:27:13'),(3657,1015,4,NULL,NULL,NULL,NULL,'2019-01-09 00:27:13'),(3658,1015,5,'79','110','39','43','2019-01-09 00:27:13'),(3659,1015,7,'6','7','3','3.8','2019-01-09 00:27:13'),(3660,1015,8,'6','6','2.8','3.4','2019-01-09 00:27:13'),(3661,1015,9,'3','3','3','3','2019-01-09 00:27:13'),(3662,1015,10,'0','0','0','0','2019-01-09 00:27:13'),(3663,1015,11,'0','0','0','0','2019-01-09 00:27:13'),(3664,1015,12,'2','2','2','1.5','2019-01-09 00:27:13'),(3665,1015,13,'0','0','0','0','2019-01-09 00:27:13'),(3666,1015,14,'16','18','11.666666666667','12','2019-01-09 00:27:13'),(3667,1015,15,'1','2','1','1.3333333333333','2019-01-09 00:27:13'),(3668,1015,16,'1','2','1','1.5','2019-01-09 00:27:13'),(3669,1015,17,'0','0','0','0','2019-01-09 00:27:13'),(3670,1015,18,'1','1','1','1','2019-01-09 00:27:13'),(3671,1015,19,'1','1',NULL,NULL,'2019-01-09 00:27:13'),(3672,1016,1,'4','8',NULL,NULL,'2019-01-09 00:27:16'),(3673,1016,2,'1','1',NULL,NULL,'2019-01-09 00:27:16'),(3674,1016,4,NULL,NULL,NULL,NULL,'2019-01-09 00:27:16'),(3675,1016,5,'69','50','20','25','2019-01-09 00:27:16'),(3676,1016,7,'5','4','3','2.8','2019-01-09 00:27:16'),(3677,1016,8,'5','4','3','2.8','2019-01-09 00:27:16'),(3678,1016,9,'2','4','2','4','2019-01-09 00:27:16'),(3679,1016,10,'0','0','0','0','2019-01-09 00:27:16'),(3680,1016,11,'0','0','0','0','2019-01-09 00:27:16'),(3681,1016,12,'2','3','2','1.75','2019-01-09 00:27:16'),(3682,1016,13,'0','1','0','1','2019-01-09 00:27:16'),(3683,1016,14,'14','26','9.25','14.5','2019-01-09 00:27:16'),(3684,1016,15,'2','3','1.5','1.4','2019-01-09 00:27:16'),(3685,1016,16,'2','2','1.5','1.3333333333333','2019-01-09 00:27:17'),(3686,1016,17,'0','0','0','0','2019-01-09 00:27:17'),(3687,1016,18,'0','0','0','0','2019-01-09 00:27:17'),(3688,1016,19,'1','1',NULL,NULL,'2019-01-09 00:27:17'),(3689,1017,1,'7','5',NULL,NULL,'2019-01-09 00:27:20'),(3690,1017,2,'1','1',NULL,NULL,'2019-01-09 00:27:20'),(3691,1017,4,NULL,NULL,NULL,NULL,'2019-01-09 00:27:20'),(3692,1017,5,'57','118','21','39','2019-01-09 00:27:21'),(3693,1017,7,'8','11','4.6','7.6666666666667','2019-01-09 00:27:21'),(3694,1017,8,'8','10','4.6','7','2019-01-09 00:27:21'),(3695,1017,9,'3','3','3','3','2019-01-09 00:27:21'),(3696,1017,10,'0','0','0','0','2019-01-09 00:27:21'),(3697,1017,11,'0','0','0','0','2019-01-09 00:27:21'),(3698,1017,12,'2','3','2','3','2019-01-09 00:27:21'),(3699,1017,13,'2','3','1.3333333333333','3','2019-01-09 00:27:21'),(3700,1017,14,'16','18','10.571428571429','10.6','2019-01-09 00:27:21'),(3701,1017,15,'2','3','1.3333333333333','2','2019-01-09 00:27:21'),(3702,1017,16,'2','2','1.2','1.3333333333333','2019-01-09 00:27:21'),(3703,1017,17,'0','0','0','0','2019-01-09 00:27:21'),(3704,1017,18,'1','0','1','0','2019-01-09 00:27:21'),(3705,1017,19,'1','1',NULL,NULL,'2019-01-09 00:27:21'),(3706,1018,1,'5','5',NULL,NULL,'2019-01-09 00:27:25'),(3707,1018,2,'1','1',NULL,NULL,'2019-01-09 00:27:26'),(3708,1018,4,NULL,NULL,NULL,NULL,'2019-01-09 00:27:26'),(3709,1018,5,'101','84','28','30','2019-01-09 00:27:26'),(3710,1018,7,'10','10','5.6666666666667','6.6666666666667','2019-01-09 00:27:26'),(3711,1018,8,'10','9','5.6666666666667','6','2019-01-09 00:27:26'),(3712,1018,9,'3','2','3','2','2019-01-09 00:27:26'),(3713,1018,10,'0','0','0','0','2019-01-09 00:27:26'),(3714,1018,11,'0','0','0','0','2019-01-09 00:27:26'),(3715,1018,12,'1','3','1','3','2019-01-09 00:27:26'),(3716,1018,13,'3','2','2.5','2','2019-01-09 00:27:26'),(3717,1018,14,'18','16','10','10','2019-01-09 00:27:27'),(3718,1018,15,'2','3','1.5','2','2019-01-09 00:27:27'),(3719,1018,16,'1','2','1','1.3333333333333','2019-01-09 00:27:27'),(3720,1018,17,'0','0','0','0','2019-01-09 00:27:27'),(3721,1018,18,'0','0','0','0','2019-01-09 00:27:27'),(3722,1018,19,'1','1',NULL,NULL,'2019-01-09 00:27:27'),(3723,1019,1,'12','29',NULL,NULL,'2019-01-09 00:27:30'),(3724,1019,2,'2','7',NULL,NULL,'2019-01-09 00:27:30'),(3725,1019,4,NULL,NULL,NULL,NULL,'2019-01-09 00:27:30'),(3726,1019,5,'122','120','51','39','2019-01-09 00:27:30'),(3727,1019,7,'21','20','8.3333333333333','5.1','2019-01-09 00:27:30'),(3728,1019,8,'19','19','7.6666666666667','4.95','2019-01-09 00:27:30'),(3729,1019,9,'9','12','9','12','2019-01-09 00:27:30'),(3730,1019,10,'0','2','0','2','2019-01-09 00:27:30'),(3731,1019,11,'1','1','1','1','2019-01-09 00:27:30'),(3732,1019,12,'6','6','1.8333333333333','2.75','2019-01-09 00:27:30'),(3733,1019,13,'3','3','2.3333333333333','1.75','2019-01-09 00:27:30'),(3734,1019,14,'30','38','17','19.551724137931','2019-01-09 00:27:30'),(3735,1019,15,'6','6','1.6666666666667','2.2666666666667','2019-01-09 00:27:30'),(3736,1019,16,'6','6','1.875','1.36','2019-01-09 00:27:30'),(3737,1019,17,'0','2','0','1.3333333333333','2019-01-09 00:27:30'),(3738,1019,18,'1','1','1','1','2019-01-09 00:27:30'),(3739,1019,19,'1','1',NULL,NULL,'2019-01-09 00:27:30'),(3740,1020,1,'22','23',NULL,NULL,'2019-01-09 00:27:34'),(3741,1020,2,'3','3',NULL,NULL,'2019-01-09 00:27:34'),(3742,1020,4,NULL,NULL,NULL,NULL,'2019-01-09 00:27:35'),(3743,1020,5,'111','111','33','35','2019-01-09 00:27:35'),(3744,1020,7,'14','14','5.4615384615385','5.8571428571429','2019-01-09 00:27:35'),(3745,1020,8,'14','14','5.3076923076923','5.7142857142857','2019-01-09 00:27:35'),(3746,1020,9,'8','8','8','8','2019-01-09 00:27:35'),(3747,1020,10,'6','6','4','4','2019-01-09 00:27:35'),(3748,1020,11,'0','0','0','0','2019-01-09 00:27:35'),(3749,1020,12,'5','5','1.8333333333333','1.7142857142857','2019-01-09 00:27:35'),(3750,1020,13,'2','2','2','2','2019-01-09 00:27:35'),(3751,1020,14,'51','55','21.5','22.95652173913','2019-01-09 00:27:35'),(3752,1020,15,'5','5','2.1818181818182','2.1818181818182','2019-01-09 00:27:35'),(3753,1020,16,'1','1','1','1','2019-01-09 00:27:35'),(3754,1020,17,'1','1','1','1','2019-01-09 00:27:35'),(3755,1020,18,'1','1','1','1','2019-01-09 00:27:36'),(3756,1020,19,'3','3',NULL,NULL,'2019-01-09 00:27:36'),(3757,1021,1,'9','5',NULL,NULL,'2019-01-09 00:27:38'),(3758,1021,2,'1','1',NULL,NULL,'2019-01-09 00:27:38'),(3759,1021,4,NULL,NULL,NULL,NULL,'2019-01-09 00:27:38'),(3760,1021,5,'64','101','22','30','2019-01-09 00:27:38'),(3761,1021,7,'6','9','3.8','5','2019-01-09 00:27:38'),(3762,1021,8,'6','7','3.4','4','2019-01-09 00:27:38'),(3763,1021,9,'6','3','6','3','2019-01-09 00:27:39'),(3764,1021,10,'0','0','0','0','2019-01-09 00:27:39'),(3765,1021,11,'0','0','0','0','2019-01-09 00:27:39'),(3766,1021,12,'1','4','1','4','2019-01-09 00:27:39'),(3767,1021,13,'2','0','2','0','2019-01-09 00:27:39'),(3768,1021,14,'21','15','13.222222222222','9.6','2019-01-09 00:27:39'),(3769,1021,15,'2','5','1.25','3','2019-01-09 00:27:39'),(3770,1021,16,'1','2','1','1.5','2019-01-09 00:27:39'),(3771,1021,17,'0','0','0','0','2019-01-09 00:27:39'),(3772,1021,18,'0','0','0','0','2019-01-09 00:27:39'),(3773,1021,19,'1','1',NULL,NULL,'2019-01-09 00:27:39'),(3774,1022,1,'13','9',NULL,NULL,'2019-01-09 00:27:42'),(3775,1022,2,'3','1',NULL,NULL,'2019-01-09 00:27:42'),(3776,1022,4,NULL,NULL,NULL,NULL,'2019-01-09 00:27:42'),(3777,1022,5,'182','182','35','45','2019-01-09 00:27:43'),(3778,1022,7,'18','18','5.125','6','2019-01-09 00:27:43'),(3779,1022,8,'13','13','4.25','4.7142857142857','2019-01-09 00:27:43'),(3780,1022,9,'8','4','8','4','2019-01-09 00:27:43'),(3781,1022,10,'0','0','0','0','2019-01-09 00:27:43'),(3782,1022,11,'0','0','0','0','2019-01-09 00:27:43'),(3783,1022,12,'5','4','2.2','2.1666666666667','2019-01-09 00:27:43'),(3784,1022,13,'7','7','5.5','5.5','2019-01-09 00:27:43'),(3785,1022,14,'24','24','14.153846153846','15.111111111111','2019-01-09 00:27:43'),(3786,1022,15,'3','3','1.3333333333333','1.6','2019-01-09 00:27:43'),(3787,1022,16,'1','2','1','1.25','2019-01-09 00:27:43'),(3788,1022,17,'2','0','2','0','2019-01-09 00:27:43'),(3789,1022,18,'1','1','1','1','2019-01-09 00:27:43'),(3790,1022,19,'1','1',NULL,NULL,'2019-01-09 00:27:43'),(3791,1023,1,'12','5',NULL,NULL,'2019-01-09 00:27:47'),(3792,1023,2,'1','1',NULL,NULL,'2019-01-09 00:27:47'),(3793,1023,4,NULL,NULL,NULL,NULL,'2019-01-09 00:27:47'),(3794,1023,5,'63','88','16','26','2019-01-09 00:27:47'),(3795,1023,7,'3','6','2','4.5','2019-01-09 00:27:47'),(3796,1023,8,'3','6','2','4.5','2019-01-09 00:27:47'),(3797,1023,9,'5','4','5','4','2019-01-09 00:27:47'),(3798,1023,10,'4','4','4','4','2019-01-09 00:27:47'),(3799,1023,11,'0','0','0','0','2019-01-09 00:27:47'),(3800,1023,12,'1','2','1','2','2019-01-09 00:27:47'),(3801,1023,13,'1','1','1','1','2019-01-09 00:27:48'),(3802,1023,14,'20','16','13.083333333333','9.6','2019-01-09 00:27:48'),(3803,1023,15,'3','4','1.5','2.5','2019-01-09 00:27:48'),(3804,1023,16,'1','2','1','1.5','2019-01-09 00:27:48'),(3805,1023,17,'0','0','0','0','2019-01-09 00:27:48'),(3806,1023,18,'0','0','0','0','2019-01-09 00:27:48'),(3807,1023,19,'1','1',NULL,NULL,'2019-01-09 00:27:48'),(3808,1024,1,'19','13',NULL,NULL,'2019-01-09 00:27:51'),(3809,1024,2,'1','1',NULL,NULL,'2019-01-09 00:27:51'),(3810,1024,4,NULL,NULL,NULL,NULL,'2019-01-09 00:27:51'),(3811,1024,5,'49','55','19','20','2019-01-09 00:27:51'),(3812,1024,7,'5','5','2.75','3','2019-01-09 00:27:51'),(3813,1024,8,'5','5','2.5833333333333','2.7777777777778','2019-01-09 00:27:51'),(3814,1024,9,'7','7','7','7','2019-01-09 00:27:51'),(3815,1024,10,'0','0','0','0','2019-01-09 00:27:51'),(3816,1024,11,'0','0','0','0','2019-01-09 00:27:51'),(3817,1024,12,'2','1','1.25','1','2019-01-09 00:27:51'),(3818,1024,13,'1','1','1','1','2019-01-09 00:27:51'),(3819,1024,14,'24','20','14.157894736842','12.538461538462','2019-01-09 00:27:51'),(3820,1024,15,'4','4','1.6','1.625','2019-01-09 00:27:51'),(3821,1024,16,'1','2','1','1.1428571428571','2019-01-09 00:27:51'),(3822,1024,17,'0','0','0','0','2019-01-09 00:27:52'),(3823,1024,18,'1','1','1','1','2019-01-09 00:27:52'),(3824,1024,19,'1','1',NULL,NULL,'2019-01-09 00:27:52'),(3825,1025,1,'13','8',NULL,NULL,'2019-01-09 00:27:55'),(3826,1025,2,'1','1',NULL,NULL,'2019-01-09 00:27:55'),(3827,1025,4,NULL,NULL,NULL,NULL,'2019-01-09 00:27:55'),(3828,1025,5,'123','112','31','42','2019-01-09 00:27:55'),(3829,1025,7,'8','7','3.5','5','2019-01-09 00:27:55'),(3830,1025,8,'7','7','3.375','4.8','2019-01-09 00:27:55'),(3831,1025,9,'7','5','7','5','2019-01-09 00:27:55'),(3832,1025,10,'0','0','0','0','2019-01-09 00:27:56'),(3833,1025,11,'0','0','0','0','2019-01-09 00:27:56'),(3834,1025,12,'3','3','3','2.5','2019-01-09 00:27:56'),(3835,1025,13,'3','3','2.3333333333333','2','2019-01-09 00:27:57'),(3836,1025,14,'48','30','18.923076923077','14.75','2019-01-09 00:27:57'),(3837,1025,15,'3','3','1.4','2','2019-01-09 00:27:57'),(3838,1025,16,'1','2','1','1.1666666666667','2019-01-09 00:27:57'),(3839,1025,17,'0','0','0','0','2019-01-09 00:27:57'),(3840,1025,18,'1','1','1','1','2019-01-09 00:27:57'),(3841,1025,19,'1','1',NULL,NULL,'2019-01-09 00:27:57'),(3842,1026,1,'7','12',NULL,NULL,'2019-01-09 00:28:00'),(3843,1026,2,'2','3',NULL,NULL,'2019-01-09 00:28:00'),(3844,1026,4,NULL,NULL,NULL,NULL,'2019-01-09 00:28:01'),(3845,1026,5,'107','92','42','36','2019-01-09 00:28:01'),(3846,1026,7,'10','8','5.4','4.375','2019-01-09 00:28:01'),(3847,1026,8,'9','8','5.2','4.375','2019-01-09 00:28:01'),(3848,1026,9,'4','8','4','8','2019-01-09 00:28:01'),(3849,1026,10,'0','0','0','0','2019-01-09 00:28:01'),(3850,1026,11,'1','1','1','1','2019-01-09 00:28:01'),(3851,1026,12,'4','3','2.25','2.1666666666667','2019-01-09 00:28:01'),(3852,1026,13,'2','2','2','1.3333333333333','2019-01-09 00:28:01'),(3853,1026,14,'24','29','15.714285714286','18.416666666667','2019-01-09 00:28:01'),(3854,1026,15,'4','3','2','1.75','2019-01-09 00:28:01'),(3855,1026,16,'2','2','1.1428571428571','1.25','2019-01-09 00:28:01'),(3856,1026,17,'0','0','0','0','2019-01-09 00:28:01'),(3857,1026,18,'1','1','1','1','2019-01-09 00:28:01'),(3858,1026,19,'1','1',NULL,NULL,'2019-01-09 00:28:01'),(3859,1027,1,'10','7',NULL,NULL,'2019-01-09 00:28:04'),(3860,1027,2,'2','2',NULL,NULL,'2019-01-09 00:28:04'),(3861,1027,4,NULL,NULL,NULL,NULL,'2019-01-09 00:28:05'),(3862,1027,5,'97','97','31','34','2019-01-09 00:28:05'),(3863,1027,7,'9','9','5.1666666666667','5.2','2019-01-09 00:28:05'),(3864,1027,8,'8','8','4.6666666666667','4.4','2019-01-09 00:28:05'),(3865,1027,9,'7','6','7','6','2019-01-09 00:28:05'),(3866,1027,10,'0','3','0','3','2019-01-09 00:28:05'),(3867,1027,11,'0','0','0','0','2019-01-09 00:28:05'),(3868,1027,12,'1','2','1','1.3333333333333','2019-01-09 00:28:05'),(3869,1027,13,'2','1','1.3333333333333','1','2019-01-09 00:28:05'),(3870,1027,14,'29','33','13.545454545455','13.5','2019-01-09 00:28:05'),(3871,1027,15,'2','3','1.5','1.75','2019-01-09 00:28:05'),(3872,1027,16,'4','4','1.4444444444444','1.8333333333333','2019-01-09 00:28:06'),(3873,1027,17,'1','1','1','1','2019-01-09 00:28:06'),(3874,1027,18,'0','0','0','0','2019-01-09 00:28:06'),(3875,1027,19,'1','1',NULL,NULL,'2019-01-09 00:28:06'),(3876,1028,1,'15','9',NULL,NULL,'2019-01-09 00:28:09'),(3877,1028,2,'1','1',NULL,NULL,'2019-01-09 00:28:09'),(3878,1028,4,NULL,NULL,NULL,NULL,'2019-01-09 00:28:09'),(3879,1028,5,'136','136','37','51','2019-01-09 00:28:09'),(3880,1028,7,'11','11','5','6.2857142857143','2019-01-09 00:28:09'),(3881,1028,8,'9','9','4.6','5.5714285714286','2019-01-09 00:28:09'),(3882,1028,9,'7','5','7','5','2019-01-09 00:28:09'),(3883,1028,10,'0','0','0','0','2019-01-09 00:28:09'),(3884,1028,11,'0','0','0','0','2019-01-09 00:28:09'),(3885,1028,12,'3','3','2','2.6666666666667','2019-01-09 00:28:09'),(3886,1028,13,'3','3','2.2','2.25','2019-01-09 00:28:09'),(3887,1028,14,'48','48','23.4375','22.2','2019-01-09 00:28:09'),(3888,1028,15,'3','3','1.5','2.25','2019-01-09 00:28:09'),(3889,1028,16,'4','4','1.2727272727273','1.8','2019-01-09 00:28:10'),(3890,1028,17,'0','0','0','0','2019-01-09 00:28:10'),(3891,1028,18,'0','0','0','0','2019-01-09 00:28:10'),(3892,1028,19,'1','1',NULL,NULL,'2019-01-09 00:28:10'),(3893,1029,1,'6','11',NULL,NULL,'2019-01-09 00:28:13'),(3894,1029,2,'2','3',NULL,NULL,'2019-01-09 00:28:13'),(3895,1029,4,NULL,NULL,NULL,NULL,'2019-01-09 00:28:13'),(3896,1029,5,'107','92','49','40','2019-01-09 00:28:13'),(3897,1029,7,'10','8','5.4','4.375','2019-01-09 00:28:13'),(3898,1029,8,'9','8','5.2','4.375','2019-01-09 00:28:13'),(3899,1029,9,'4','8','4','8','2019-01-09 00:28:14'),(3900,1029,10,'0','0','0','0','2019-01-09 00:28:14'),(3901,1029,11,'1','1','1','1','2019-01-09 00:28:14'),(3902,1029,12,'4','3','2.25','2.1666666666667','2019-01-09 00:28:14'),(3903,1029,13,'2','2','2','1.3333333333333','2019-01-09 00:28:14'),(3904,1029,14,'24','29','15.571428571429','18.333333333333','2019-01-09 00:28:14'),(3905,1029,15,'4','3','2','1.75','2019-01-09 00:28:14'),(3906,1029,16,'2','2','1.1428571428571','1.25','2019-01-09 00:28:14'),(3907,1029,17,'0','0','0','0','2019-01-09 00:28:14'),(3908,1029,18,'1','1','1','1','2019-01-09 00:28:14'),(3909,1029,19,'1','1',NULL,NULL,'2019-01-09 00:28:14'),(3910,1030,1,'12','43',NULL,NULL,'2019-01-09 00:28:18'),(3911,1030,2,'2','4',NULL,NULL,'2019-01-09 00:28:18'),(3912,1030,4,NULL,NULL,NULL,NULL,'2019-01-09 00:28:18'),(3913,1030,5,'102','168','41','43','2019-01-09 00:28:18'),(3914,1030,7,'9','21','3.5555555555556','5.1','2019-01-09 00:28:18'),(3915,1030,8,'8','19','3.2222222222222','4.9333333333333','2019-01-09 00:28:18'),(3916,1030,9,'7','11','7','11','2019-01-09 00:28:18'),(3917,1030,10,'10','10','10','5.5','2019-01-09 00:28:19'),(3918,1030,11,'0','1','0','1','2019-01-09 00:28:19'),(3919,1030,12,'2','4','1.5','1.4666666666667','2019-01-09 00:28:19'),(3920,1030,13,'3','3','2','1.875','2019-01-09 00:28:19'),(3921,1030,14,'18','40','12.75','16.488372093023','2019-01-09 00:28:19'),(3922,1030,15,'3','3','1.4285714285714','1.36','2019-01-09 00:28:19'),(3923,1030,16,'2','3','1.2','1.3055555555556','2019-01-09 00:28:19'),(3924,1030,17,'0','1','0','1','2019-01-09 00:28:19'),(3925,1030,18,'0','1','0','1','2019-01-09 00:28:19'),(3926,1030,19,'1','1',NULL,NULL,'2019-01-09 00:28:19'),(3927,1031,1,'17','15',NULL,NULL,'2019-01-09 00:28:23'),(3928,1031,2,'3','2',NULL,NULL,'2019-01-09 00:28:23'),(3929,1031,4,NULL,NULL,NULL,NULL,'2019-01-09 00:28:23'),(3930,1031,5,'113','113','31','32','2019-01-09 00:28:23'),(3931,1031,7,'13','13','4.2727272727273','4.2','2019-01-09 00:28:23'),(3932,1031,8,'13','13','4.2727272727273','4','2019-01-09 00:28:23'),(3933,1031,9,'4','5','4','5','2019-01-09 00:28:23'),(3934,1031,10,'0','0','0','0','2019-01-09 00:28:23'),(3935,1031,11,'0','0','0','0','2019-01-09 00:28:23'),(3936,1031,12,'3','3','1.5','1.8','2019-01-09 00:28:23'),(3937,1031,13,'3','3','3','2.5','2019-01-09 00:28:23'),(3938,1031,14,'26','26','13.117647058824','14.533333333333','2019-01-09 00:28:23'),(3939,1031,15,'3','3','1.6666666666667','2','2019-01-09 00:28:23'),(3940,1031,16,'2','2','1.1111111111111','1.2857142857143','2019-01-09 00:28:23'),(3941,1031,17,'0','0','0','0','2019-01-09 00:28:23'),(3942,1031,18,'1','1','1','1','2019-01-09 00:28:23'),(3943,1031,19,'1','1',NULL,NULL,'2019-01-09 00:28:23'),(3944,1032,1,'14','12',NULL,NULL,'2019-01-09 00:28:27'),(3945,1032,2,'3','3',NULL,NULL,'2019-01-09 00:28:27'),(3946,1032,4,NULL,NULL,NULL,NULL,'2019-01-09 00:28:28'),(3947,1032,5,'92','128','29','29','2019-01-09 00:28:28'),(3948,1032,7,'10','13','4.2','4.5714285714286','2019-01-09 00:28:28'),(3949,1032,8,'8','12','3.4','3.8571428571429','2019-01-09 00:28:28'),(3950,1032,9,'8','7','8','7','2019-01-09 00:28:28'),(3951,1032,10,'1','1','1','1','2019-01-09 00:28:28'),(3952,1032,11,'0','0','0','0','2019-01-09 00:28:28'),(3953,1032,12,'6','6','3','3.25','2019-01-09 00:28:28'),(3954,1032,13,'3','4','2','2','2019-01-09 00:28:28'),(3955,1032,14,'23','23','15.285714285714','11.583333333333','2019-01-09 00:28:28'),(3956,1032,15,'4','4','2','2.1666666666667','2019-01-09 00:28:28'),(3957,1032,16,'3','2','1.3','1.125','2019-01-09 00:28:28'),(3958,1032,17,'2','1','1.5','1','2019-01-09 00:28:28'),(3959,1032,18,'1','1','1','1','2019-01-09 00:28:28'),(3960,1032,19,'1','1',NULL,NULL,'2019-01-09 00:28:28'),(3961,1033,1,'10','7',NULL,NULL,'2019-01-09 00:28:32'),(3962,1033,2,'2','2',NULL,NULL,'2019-01-09 00:28:32'),(3963,1033,4,NULL,NULL,NULL,NULL,'2019-01-09 00:28:32'),(3964,1033,5,'62','52','18','17','2019-01-09 00:28:32'),(3965,1033,7,'5','4','2.3333333333333','2.25','2019-01-09 00:28:32'),(3966,1033,8,'5','4','2.3333333333333','2.25','2019-01-09 00:28:32'),(3967,1033,9,'5','2','5','2','2019-01-09 00:28:32'),(3968,1033,10,'1','0','1','0','2019-01-09 00:28:32'),(3969,1033,11,'1','1','1','1','2019-01-09 00:28:32'),(3970,1033,12,'2','2','1.5','1.5','2019-01-09 00:28:32'),(3971,1033,13,'0','0','0','0','2019-01-09 00:28:32'),(3972,1033,14,'30','26','21','18.285714285714','2019-01-09 00:28:32'),(3973,1033,15,'3','2','1.5','1.3333333333333','2019-01-09 00:28:32'),(3974,1033,16,'2','2','1.125','1.4','2019-01-09 00:28:33'),(3975,1033,17,'0','0','0','0','2019-01-09 00:28:33'),(3976,1033,18,'0','0','0','0','2019-01-09 00:28:33'),(3977,1033,19,'1','1',NULL,NULL,'2019-01-09 00:28:33'),(3978,1034,1,'13','9',NULL,NULL,'2019-01-09 00:28:35'),(3979,1034,2,'1','1',NULL,NULL,'2019-01-09 00:28:35'),(3980,1034,4,NULL,NULL,NULL,NULL,'2019-01-09 00:28:36'),(3981,1034,5,'89','89','22','27','2019-01-09 00:28:36'),(3982,1034,7,'9','9','3.875','4.6666666666667','2019-01-09 00:28:36'),(3983,1034,8,'9','9','3.875','4.6666666666667','2019-01-09 00:28:36'),(3984,1034,9,'6','5','6','5','2019-01-09 00:28:36'),(3985,1034,10,'1','1','1','1','2019-01-09 00:28:36'),(3986,1034,11,'1','1','1','1','2019-01-09 00:28:36'),(3987,1034,12,'2','2','1.2','1.2','2019-01-09 00:28:36'),(3988,1034,13,'2','2','2','2','2019-01-09 00:28:36'),(3989,1034,14,'21','21','14.384615384615','13.777777777778','2019-01-09 00:28:36'),(3990,1034,15,'4','4','2','2.2','2019-01-09 00:28:36'),(3991,1034,16,'2','2','1.2','1.5','2019-01-09 00:28:36'),(3992,1034,17,'1','1','1','1','2019-01-09 00:28:36'),(3993,1034,18,'0','0','0','0','2019-01-09 00:28:36'),(3994,1034,19,'1','1',NULL,NULL,'2019-01-09 00:28:36'),(3995,1035,1,'23','12',NULL,NULL,'2019-01-09 00:28:39'),(3996,1035,2,'1','1',NULL,NULL,'2019-01-09 00:28:39'),(3997,1035,4,NULL,NULL,NULL,NULL,'2019-01-09 00:28:39'),(3998,1035,5,'82','82','25','30','2019-01-09 00:28:39'),(3999,1035,7,'13','13','3.5625','4.4444444444444','2019-01-09 00:28:39'),(4000,1035,8,'13','13','3.5625','4.4444444444444','2019-01-09 00:28:39'),(4001,1035,9,'7','4','7','4','2019-01-09 00:28:39'),(4002,1035,10,'2','2','1.25','2','2019-01-09 00:28:39'),(4003,1035,11,'1','1','1','1','2019-01-09 00:28:39'),(4004,1035,12,'2','2','1.25','1.25','2019-01-09 00:28:39'),(4005,1035,13,'2','2','1.4','1.5','2019-01-09 00:28:40'),(4006,1035,14,'40','36','26.565217391304','23.083333333333','2019-01-09 00:28:40'),(4007,1035,15,'2','2','1.3846153846154','1.3333333333333','2019-01-09 00:28:40'),(4008,1035,16,'3','3','1.25','2','2019-01-09 00:28:40'),(4009,1035,17,'0','0','0','0','2019-01-09 00:28:40'),(4010,1035,18,'0','0','0','0','2019-01-09 00:28:40'),(4011,1035,19,'1','1',NULL,NULL,'2019-01-09 00:28:40'),(4012,1036,1,'7','11',NULL,NULL,'2019-01-09 00:28:43'),(4013,1036,2,'1','1',NULL,NULL,'2019-01-09 00:28:43'),(4014,1036,4,NULL,NULL,NULL,NULL,'2019-01-09 00:28:43'),(4015,1036,5,'53','103','17','30','2019-01-09 00:28:43'),(4016,1036,7,'2','9','1.2','2.625','2019-01-09 00:28:43'),(4017,1036,8,'2','8','1.2','2.375','2019-01-09 00:28:43'),(4018,1036,9,'3','5','3','5','2019-01-09 00:28:43'),(4019,1036,10,'0','0','0','0','2019-01-09 00:28:43'),(4020,1036,11,'0','0','0','0','2019-01-09 00:28:43'),(4021,1036,12,'1','4','1','3','2019-01-09 00:28:43'),(4022,1036,13,'0','0','0','0','2019-01-09 00:28:43'),(4023,1036,14,'13','18','8.5714285714286','10.909090909091','2019-01-09 00:28:43'),(4024,1036,15,'1','5','1','2','2019-01-09 00:28:43'),(4025,1036,16,'1','2','1','1.1666666666667','2019-01-09 00:28:43'),(4026,1036,17,'0','0','0','0','2019-01-09 00:28:43'),(4027,1036,18,'0','1','0','1','2019-01-09 00:28:44'),(4028,1036,19,'1','1',NULL,NULL,'2019-01-09 00:28:44'),(4029,1037,1,'5','6',NULL,NULL,'2019-01-09 00:28:47'),(4030,1037,2,'1','2',NULL,NULL,'2019-01-09 00:28:47'),(4031,1037,4,NULL,NULL,NULL,NULL,'2019-01-09 00:28:47'),(4032,1037,5,'31','56','11','22','2019-01-09 00:28:47'),(4033,1037,7,'2','7','1.3333333333333','4.25','2019-01-09 00:28:47'),(4034,1037,8,'2','7','1.3333333333333','4','2019-01-09 00:28:47'),(4035,1037,9,'2','5','2','5','2019-01-09 00:28:47'),(4036,1037,10,'0','0','0','0','2019-01-09 00:28:47'),(4037,1037,11,'0','1','0','1','2019-01-09 00:28:47'),(4038,1037,12,'0','2','0','2','2019-01-09 00:28:47'),(4039,1037,13,'0','1','0','1','2019-01-09 00:28:47'),(4040,1037,14,'13','21','8.8','11.166666666667','2019-01-09 00:28:47'),(4041,1037,15,'1','2','1','1.6666666666667','2019-01-09 00:28:48'),(4042,1037,16,'1','5','1','2.25','2019-01-09 00:28:48'),(4043,1037,17,'0','0','0','0','2019-01-09 00:28:48'),(4044,1037,18,'0','0','0','0','2019-01-09 00:28:48'),(4045,1037,19,'1','1',NULL,NULL,'2019-01-09 00:28:48'),(4046,1038,1,'10','3',NULL,NULL,'2019-01-09 00:28:51'),(4047,1038,2,'1','1',NULL,NULL,'2019-01-09 00:28:51'),(4048,1038,4,NULL,NULL,NULL,NULL,'2019-01-09 00:28:51'),(4049,1038,5,'128','96','37','48','2019-01-09 00:28:51'),(4050,1038,7,'7','10','5.6','8','2019-01-09 00:28:51'),(4051,1038,8,'6','7','4.6','6.5','2019-01-09 00:28:52'),(4052,1038,9,'5','0','5','0','2019-01-09 00:28:52'),(4053,1038,10,'0','0','0','0','2019-01-09 00:28:52'),(4054,1038,11,'0','0','0','0','2019-01-09 00:28:52'),(4055,1038,12,'3','4','2','4','2019-01-09 00:28:52'),(4056,1038,13,'2','2','1.25','2','2019-01-09 00:28:52'),(4057,1038,14,'30','25','19.9','15.333333333333','2019-01-09 00:28:52'),(4058,1038,15,'3','5','1.6','3','2019-01-09 00:28:52'),(4059,1038,16,'1','3','1','1.6666666666667','2019-01-09 00:28:52'),(4060,1038,17,'0','0','0','0','2019-01-09 00:28:52'),(4061,1038,18,'1','1','1','1','2019-01-09 00:28:52'),(4062,1038,19,'1','1',NULL,NULL,'2019-01-09 00:28:52'),(4063,1039,1,'16','16',NULL,NULL,'2019-01-09 00:28:55'),(4064,1039,2,'5','5',NULL,NULL,'2019-01-09 00:28:55'),(4065,1039,4,NULL,NULL,NULL,NULL,'2019-01-09 00:28:55'),(4066,1039,5,'138','95','30','19','2019-01-09 00:28:55'),(4067,1039,7,'6','4','3.1818181818182','1.6666666666667','2019-01-09 00:28:56'),(4068,1039,8,'6','4','2.9090909090909','1.5833333333333','2019-01-09 00:28:56'),(4069,1039,9,'8','6','8','6','2019-01-09 00:28:56'),(4070,1039,10,'5','5','2.25','2.25','2019-01-09 00:28:56'),(4071,1039,11,'0','0','0','0','2019-01-09 00:28:56'),(4072,1039,12,'2','1','1.4444444444444','1','2019-01-09 00:28:56'),(4073,1039,13,'1','1','1','1','2019-01-09 00:28:56'),(4074,1039,14,'32','32','21.1875','20.25','2019-01-09 00:28:56'),(4075,1039,15,'3','2','2.2857142857143','1.6666666666667','2019-01-09 00:28:56'),(4076,1039,16,'2','2','1.1','1.2','2019-01-09 00:28:56'),(4077,1039,17,'0','0','0','0','2019-01-09 00:28:56'),(4078,1039,18,'1','1','1','1','2019-01-09 00:28:56'),(4079,1039,19,'1','1',NULL,NULL,'2019-01-09 00:28:56'),(4080,1040,1,'14','19',NULL,NULL,'2019-01-09 00:29:00'),(4081,1040,2,'1','1',NULL,NULL,'2019-01-09 00:29:00'),(4082,1040,4,NULL,NULL,NULL,NULL,'2019-01-09 00:29:01'),(4083,1040,5,'72','96','33','35','2019-01-09 00:29:01'),(4084,1040,7,'6','9','3.4','4','2019-01-09 00:29:01'),(4085,1040,8,'6','8','3.2','3.8571428571429','2019-01-09 00:29:01'),(4086,1040,9,'4','4','4','4','2019-01-09 00:29:01'),(4087,1040,10,'8','9','5.3333333333333','4.375','2019-01-09 00:29:01'),(4088,1040,11,'0','0','0','0','2019-01-09 00:29:01'),(4089,1040,12,'2','3','1.5','1.8','2019-01-09 00:29:01'),(4090,1040,13,'1','3','1','1.375','2019-01-09 00:29:01'),(4091,1040,14,'30','26','18.785714285714','18.736842105263','2019-01-09 00:29:01'),(4092,1040,15,'3','3','1.625','2.2727272727273','2019-01-09 00:29:01'),(4093,1040,16,'2','3','1.2','1.5333333333333','2019-01-09 00:29:01'),(4094,1040,17,'0','0','0','0','2019-01-09 00:29:01'),(4095,1040,18,'1','0','1','0','2019-01-09 00:29:01'),(4096,1040,19,'1','1',NULL,NULL,'2019-01-09 00:29:01'),(4097,1041,1,'20','18',NULL,NULL,'2019-01-09 00:29:05'),(4098,1041,2,'3','3',NULL,NULL,'2019-01-09 00:29:05'),(4099,1041,4,NULL,NULL,NULL,NULL,'2019-01-09 00:29:05'),(4100,1041,5,'100','100','34','34','2019-01-09 00:29:05'),(4101,1041,7,'8','8','4.2307692307692','4.25','2019-01-09 00:29:06'),(4102,1041,8,'7','7','3.8461538461538','4','2019-01-09 00:29:06'),(4103,1041,9,'8','7','8','7','2019-01-09 00:29:06'),(4104,1041,10,'0','0','0','0','2019-01-09 00:29:06'),(4105,1041,11,'1','1','1','1','2019-01-09 00:29:06'),(4106,1041,12,'3','3','1.3333333333333','1.3333333333333','2019-01-09 00:29:06'),(4107,1041,13,'1','1','1','1','2019-01-09 00:29:06'),(4108,1041,14,'32','28','20.7','18.277777777778','2019-01-09 00:29:06'),(4109,1041,15,'4','4','1.5833333333333','1.4545454545455','2019-01-09 00:29:06'),(4110,1041,16,'3','3','1.2857142857143','1.4166666666667','2019-01-09 00:29:06'),(4111,1041,17,'0','0','0','0','2019-01-09 00:29:06'),(4112,1041,18,'1','1','1','1','2019-01-09 00:29:06'),(4113,1041,19,'1','1',NULL,NULL,'2019-01-09 00:29:06'),(4114,1042,1,'15','12',NULL,NULL,'2019-01-09 00:29:10'),(4115,1042,2,'3','3',NULL,NULL,'2019-01-09 00:29:10'),(4116,1042,4,NULL,NULL,NULL,NULL,'2019-01-09 00:29:10'),(4117,1042,5,'80','80','24','23','2019-01-09 00:29:10'),(4118,1042,7,'4','4','2.25','2.1666666666667','2019-01-09 00:29:10'),(4119,1042,8,'4','4','2.125','2.1666666666667','2019-01-09 00:29:10'),(4120,1042,9,'8','7','8','7','2019-01-09 00:29:10'),(4121,1042,10,'0','0','0','0','2019-01-09 00:29:10'),(4122,1042,11,'0','0','0','0','2019-01-09 00:29:10'),(4123,1042,12,'2','2','2','2','2019-01-09 00:29:10'),(4124,1042,13,'0','0','0','0','2019-01-09 00:29:10'),(4125,1042,14,'29','25','17.733333333333','15.833333333333','2019-01-09 00:29:10'),(4126,1042,15,'3','3','1.4','1.6666666666667','2019-01-09 00:29:10'),(4127,1042,16,'1','2','1','1.1666666666667','2019-01-09 00:29:10'),(4128,1042,17,'0','0','0','0','2019-01-09 00:29:10'),(4129,1042,18,'0','0','0','0','2019-01-09 00:29:11'),(4130,1042,19,'1','1',NULL,NULL,'2019-01-09 00:29:11'),(4131,1043,1,'8','3',NULL,NULL,'2019-01-09 00:29:14'),(4132,1043,2,'1','1',NULL,NULL,'2019-01-09 00:29:14'),(4133,1043,4,NULL,NULL,NULL,NULL,'2019-01-09 00:29:14'),(4134,1043,5,'93','88','34','42','2019-01-09 00:29:14'),(4135,1043,7,'8','8','5','7.5','2019-01-09 00:29:14'),(4136,1043,8,'8','7','4.8','6.5','2019-01-09 00:29:14'),(4137,1043,9,'6','1','6','1','2019-01-09 00:29:14'),(4138,1043,10,'0','0','0','0','2019-01-09 00:29:14'),(4139,1043,11,'0','0','0','0','2019-01-09 00:29:14'),(4140,1043,12,'2','3','1.3333333333333','2','2019-01-09 00:29:14'),(4141,1043,13,'0','0','0','0','2019-01-09 00:29:14'),(4142,1043,14,'22','16','15.125','11.333333333333','2019-01-09 00:29:14'),(4143,1043,15,'5','5','2','3','2019-01-09 00:29:14'),(4144,1043,16,'1','2','1','1.5','2019-01-09 00:29:14'),(4145,1043,17,'0','0','0','0','2019-01-09 00:29:15'),(4146,1043,18,'1','1','1','1','2019-01-09 00:29:15'),(4147,1043,19,'1','1',NULL,NULL,'2019-01-09 00:29:15'),(4148,1044,1,'9','5',NULL,NULL,'2019-01-09 00:29:18'),(4149,1044,2,'1','1',NULL,NULL,'2019-01-09 00:29:18'),(4150,1044,4,NULL,NULL,NULL,NULL,'2019-01-09 00:29:18'),(4151,1044,5,'91','77','39','38','2019-01-09 00:29:18'),(4152,1044,7,'7','7','4.5','5.6666666666667','2019-01-09 00:29:18'),(4153,1044,8,'6','6','3.6666666666667','5','2019-01-09 00:29:18'),(4154,1044,9,'4','2','4','2','2019-01-09 00:29:18'),(4155,1044,10,'0','2','0','2','2019-01-09 00:29:18'),(4156,1044,11,'1','1','1','1','2019-01-09 00:29:18'),(4157,1044,12,'3','3','3','3','2019-01-09 00:29:18'),(4158,1044,13,'1','1','1','1','2019-01-09 00:29:18'),(4159,1044,14,'24','20','15.888888888889','14.2','2019-01-09 00:29:18'),(4160,1044,15,'3','3','1.4','2','2019-01-09 00:29:18'),(4161,1044,16,'3','3','1.25','1.75','2019-01-09 00:29:18'),(4162,1044,17,'0','0','0','0','2019-01-09 00:29:19'),(4163,1044,18,'1','1','1','1','2019-01-09 00:29:19'),(4164,1044,19,'1','1',NULL,NULL,'2019-01-09 00:29:19'),(4165,1045,1,'8','5',NULL,NULL,'2019-01-09 00:29:22'),(4166,1045,2,'1','1',NULL,NULL,'2019-01-09 00:29:22'),(4167,1045,4,NULL,NULL,NULL,NULL,'2019-01-09 00:29:22'),(4168,1045,5,'110','78','33','31','2019-01-09 00:29:22'),(4169,1045,7,'7','7','4.2','5','2019-01-09 00:29:22'),(4170,1045,8,'6','6','3.4','4.6666666666667','2019-01-09 00:29:22'),(4171,1045,9,'4','1','4','1','2019-01-09 00:29:22'),(4172,1045,10,'0','2','0','2','2019-01-09 00:29:22'),(4173,1045,11,'1','1','1','1','2019-01-09 00:29:22'),(4174,1045,12,'3','3','2','2','2019-01-09 00:29:22'),(4175,1045,13,'1','1','1','1','2019-01-09 00:29:22'),(4176,1045,14,'24','20','15.375','13.2','2019-01-09 00:29:22'),(4177,1045,15,'3','3','1.5','1.6666666666667','2019-01-09 00:29:22'),(4178,1045,16,'3','3','1.3333333333333','2','2019-01-09 00:29:22'),(4179,1045,17,'0','0','0','0','2019-01-09 00:29:22'),(4180,1045,18,'1','1','1','1','2019-01-09 00:29:22'),(4181,1045,19,'1','1',NULL,NULL,'2019-01-09 00:29:22'),(4182,1046,1,'8','12',NULL,NULL,'2019-01-09 00:29:25'),(4183,1046,2,'3','3',NULL,NULL,'2019-01-09 00:29:25'),(4184,1046,4,NULL,NULL,NULL,NULL,'2019-01-09 00:29:26'),(4185,1046,5,'132','132','62','49','2019-01-09 00:29:26'),(4186,1046,7,'9','9','5','5','2019-01-09 00:29:26'),(4187,1046,8,'7','7','4.6666666666667','4.7142857142857','2019-01-09 00:29:26'),(4188,1046,9,'7','10','7','10','2019-01-09 00:29:26'),(4189,1046,10,'0','0','0','0','2019-01-09 00:29:26'),(4190,1046,11,'0','0','0','0','2019-01-09 00:29:26'),(4191,1046,12,'1','1','1','1','2019-01-09 00:29:26'),(4192,1046,13,'1','1','1','1','2019-01-09 00:29:26'),(4193,1046,14,'26','27','14','13.5','2019-01-09 00:29:26'),(4194,1046,15,'2','3','1.2','1.6666666666667','2019-01-09 00:29:26'),(4195,1046,16,'1','2','1','1.1111111111111','2019-01-09 00:29:26'),(4196,1046,17,'0','0','0','0','2019-01-09 00:29:26'),(4197,1046,18,'1','1','1','1','2019-01-09 00:29:26'),(4198,1046,19,'1','1',NULL,NULL,'2019-01-09 00:29:26'),(4199,1047,1,'8','7',NULL,NULL,'2019-01-09 00:29:29'),(4200,1047,2,'1','1',NULL,NULL,'2019-01-09 00:29:29'),(4201,1047,4,NULL,NULL,NULL,NULL,'2019-01-09 00:29:29'),(4202,1047,5,'126','126','44','51','2019-01-09 00:29:29'),(4203,1047,7,'9','10','4.5','5.6','2019-01-09 00:29:29'),(4204,1047,8,'7','8','3.8333333333333','4.6','2019-01-09 00:29:29'),(4205,1047,9,'4','4','4','4','2019-01-09 00:29:30'),(4206,1047,10,'0','0','0','0','2019-01-09 00:29:30'),(4207,1047,11,'0','0','0','0','2019-01-09 00:29:30'),(4208,1047,12,'3','4','2','3','2019-01-09 00:29:30'),(4209,1047,13,'3','3','2.5','2.5','2019-01-09 00:29:30'),(4210,1047,14,'24','24','13.625','14.142857142857','2019-01-09 00:29:30'),(4211,1047,15,'3','4','1.6','2','2019-01-09 00:29:30'),(4212,1047,16,'2','3','1.2','1.5','2019-01-09 00:29:30'),(4213,1047,17,'0','0','0','0','2019-01-09 00:29:30'),(4214,1047,18,'0','0','0','0','2019-01-09 00:29:30'),(4215,1047,19,'1','1',NULL,NULL,'2019-01-09 00:29:30'),(4216,1048,1,'10','11',NULL,NULL,'2019-01-09 00:29:33'),(4217,1048,2,'1','1',NULL,NULL,'2019-01-09 00:29:33'),(4218,1048,4,NULL,NULL,NULL,NULL,'2019-01-09 00:29:33'),(4219,1048,5,'110','110','38','40','2019-01-09 00:29:33'),(4220,1048,7,'6','6','3.7142857142857','3.875','2019-01-09 00:29:33'),(4221,1048,8,'6','6','3.1428571428571','3.25','2019-01-09 00:29:33'),(4222,1048,9,'2','2','2','2','2019-01-09 00:29:33'),(4223,1048,10,'0','0','0','0','2019-01-09 00:29:33'),(4224,1048,11,'0','0','0','0','2019-01-09 00:29:34'),(4225,1048,12,'2','3','1.5','1.6','2019-01-09 00:29:34'),(4226,1048,13,'2','2','2','1.5','2019-01-09 00:29:34'),(4227,1048,14,'28','55','16.5','20','2019-01-09 00:29:34'),(4228,1048,15,'4','4','1.8333333333333','1.8571428571429','2019-01-09 00:29:34'),(4229,1048,16,'2','2','1.3333333333333','1.5','2019-01-09 00:29:34'),(4230,1048,17,'0','0','0','0','2019-01-09 00:29:34'),(4231,1048,18,'1','1','1','1','2019-01-09 00:29:34'),(4232,1048,19,'1','1',NULL,NULL,'2019-01-09 00:29:35'),(4233,1049,1,'6','5',NULL,NULL,'2019-01-09 00:29:37'),(4234,1049,2,'1','1',NULL,NULL,'2019-01-09 00:29:37'),(4235,1049,4,NULL,NULL,NULL,NULL,'2019-01-09 00:29:37'),(4236,1049,5,'108','148','35','42','2019-01-09 00:29:37'),(4237,1049,7,'8','12','4.25','6','2019-01-09 00:29:37'),(4238,1049,8,'7','10','4','5.3333333333333','2019-01-09 00:29:38'),(4239,1049,9,'4','4','4','4','2019-01-09 00:29:38'),(4240,1049,10,'0','0','0','0','2019-01-09 00:29:38'),(4241,1049,11,'0','0','0','0','2019-01-09 00:29:38'),(4242,1049,12,'3','4','2','4','2019-01-09 00:29:38'),(4243,1049,13,'1','1','1','1','2019-01-09 00:29:38'),(4244,1049,14,'14','17','10.166666666667','10.2','2019-01-09 00:29:38'),(4245,1049,15,'4','5','2','3','2019-01-09 00:29:38'),(4246,1049,16,'2','3','1.3333333333333','2','2019-01-09 00:29:38'),(4247,1049,17,'0','0','0','0','2019-01-09 00:29:39'),(4248,1049,18,'0','0','0','0','2019-01-09 00:29:39'),(4249,1049,19,'1','1',NULL,NULL,'2019-01-09 00:29:39'),(4250,1050,1,'8','7',NULL,NULL,'2019-01-09 00:29:42'),(4251,1050,2,'1','1',NULL,NULL,'2019-01-09 00:29:42'),(4252,1050,4,NULL,NULL,NULL,NULL,'2019-01-09 00:29:42'),(4253,1050,5,'126','126','44','51','2019-01-09 00:29:42'),(4254,1050,7,'9','10','4.5','5.6','2019-01-09 00:29:43'),(4255,1050,8,'7','8','3.8333333333333','4.6','2019-01-09 00:29:43'),(4256,1050,9,'4','4','4','4','2019-01-09 00:29:43'),(4257,1050,10,'0','0','0','0','2019-01-09 00:29:43'),(4258,1050,11,'0','0','0','0','2019-01-09 00:29:43'),(4259,1050,12,'3','4','2','3','2019-01-09 00:29:43'),(4260,1050,13,'3','3','2.5','2.5','2019-01-09 00:29:43'),(4261,1050,14,'24','24','13.625','14.142857142857','2019-01-09 00:29:43'),(4262,1050,15,'3','4','1.6','2','2019-01-09 00:29:43'),(4263,1050,16,'2','3','1.2','1.5','2019-01-09 00:29:43'),(4264,1050,17,'0','0','0','0','2019-01-09 00:29:43'),(4265,1050,18,'0','0','0','0','2019-01-09 00:29:43'),(4266,1050,19,'1','1',NULL,NULL,'2019-01-09 00:29:43'),(4267,1051,1,'15','16',NULL,NULL,'2019-01-09 00:29:46'),(4268,1051,2,'1','1',NULL,NULL,'2019-01-09 00:29:46'),(4269,1051,4,NULL,NULL,NULL,NULL,'2019-01-09 00:29:46'),(4270,1051,5,'130','129','35','39','2019-01-09 00:29:46'),(4271,1051,7,'9','9','3.8888888888889','3.5','2019-01-09 00:29:46'),(4272,1051,8,'9','9','3.3333333333333','3.0833333333333','2019-01-09 00:29:46'),(4273,1051,9,'8','9','8','9','2019-01-09 00:29:47'),(4274,1051,10,'8','8','8','4.5','2019-01-09 00:29:47'),(4275,1051,11,'0','0','0','0','2019-01-09 00:29:47'),(4276,1051,12,'1','1','1','1','2019-01-09 00:29:47'),(4277,1051,13,'3','3','2','2','2019-01-09 00:29:47'),(4278,1051,14,'21','26','12.8','16.125','2019-01-09 00:29:47'),(4279,1051,15,'1','3','1','1.2857142857143','2019-01-09 00:29:47'),(4280,1051,16,'2','2','1.2','1.3333333333333','2019-01-09 00:29:47'),(4281,1051,17,'0','0','0','0','2019-01-09 00:29:47'),(4282,1051,18,'1','1','1','1','2019-01-09 00:29:47'),(4283,1051,19,'1','1',NULL,NULL,'2019-01-09 00:29:48'),(4284,1052,1,'11','7',NULL,NULL,'2019-01-09 00:29:51'),(4285,1052,2,'2','1',NULL,NULL,'2019-01-09 00:29:52'),(4286,1052,4,NULL,NULL,NULL,NULL,'2019-01-09 00:29:52'),(4287,1052,5,'111','111','34','31','2019-01-09 00:29:52'),(4288,1052,7,'8','9','5.8','5','2019-01-09 00:29:52'),(4289,1052,8,'7','7','5.4','4.5','2019-01-09 00:29:52'),(4290,1052,9,'7','6','7','6','2019-01-09 00:29:52'),(4291,1052,10,'0','0','0','0','2019-01-09 00:29:52'),(4292,1052,11,'0','0','0','0','2019-01-09 00:29:52'),(4293,1052,12,'3','4','2','2','2019-01-09 00:29:52'),(4294,1052,13,'1','1','1','1','2019-01-09 00:29:52'),(4295,1052,14,'18','20','11.636363636364','11.857142857143','2019-01-09 00:29:52'),(4296,1052,15,'4','7','2.25','2.5','2019-01-09 00:29:52'),(4297,1052,16,'1','2','1','1.25','2019-01-09 00:29:52'),(4298,1052,17,'0','0','0','0','2019-01-09 00:29:52'),(4299,1052,18,'1','0','1','0','2019-01-09 00:29:52'),(4300,1052,19,'1','1',NULL,NULL,'2019-01-09 00:29:52'),(4301,1053,1,'15','9',NULL,NULL,'2019-01-09 00:29:55'),(4302,1053,2,'1','1',NULL,NULL,'2019-01-09 00:29:55'),(4303,1053,4,NULL,NULL,NULL,NULL,'2019-01-09 00:29:55'),(4304,1053,5,'102','101','40','50','2019-01-09 00:29:55'),(4305,1053,7,'9','14','6.1818181818182','7.625','2019-01-09 00:29:55'),(4306,1053,8,'9','9','5.7272727272727','6.625','2019-01-09 00:29:55'),(4307,1053,9,'5','2','5','2','2019-01-09 00:29:55'),(4308,1053,10,'2','2','1.3333333333333','2','2019-01-09 00:29:55'),(4309,1053,11,'0','1','0','1','2019-01-09 00:29:56'),(4310,1053,12,'3','6','2.25','2.6666666666667','2019-01-09 00:29:56'),(4311,1053,13,'4','4','1.75','1.5','2019-01-09 00:29:56'),(4312,1053,14,'25','22','17','15.111111111111','2019-01-09 00:29:56'),(4313,1053,15,'4','8','2.1','2.5714285714286','2019-01-09 00:29:56'),(4314,1053,16,'1','3','1','2','2019-01-09 00:29:56'),(4315,1053,17,'0','0','0','0','2019-01-09 00:29:56'),(4316,1053,18,'1','1','1','1','2019-01-09 00:29:56'),(4317,1053,19,'1','1',NULL,NULL,'2019-01-09 00:29:56'),(4318,1054,1,'12','6',NULL,NULL,'2019-01-09 00:29:59'),(4319,1054,2,'5','2',NULL,NULL,'2019-01-09 00:29:59'),(4320,1054,4,NULL,NULL,NULL,NULL,'2019-01-09 00:29:59'),(4321,1054,5,'91','91','31','30','2019-01-09 00:29:59'),(4322,1054,7,'11','7','5.5','5.3333333333333','2019-01-09 00:29:59'),(4323,1054,8,'11','7','5.1666666666667','4.6666666666667','2019-01-09 00:29:59'),(4324,1054,9,'7','6','7','6','2019-01-09 00:29:59'),(4325,1054,10,'0','0','0','0','2019-01-09 00:29:59'),(4326,1054,11,'1','0','1','0','2019-01-09 00:29:59'),(4327,1054,12,'1','2','1','2','2019-01-09 00:29:59'),(4328,1054,13,'1','1','1','1','2019-01-09 00:29:59'),(4329,1054,14,'27','16','15.333333333333','11','2019-01-09 00:29:59'),(4330,1054,15,'1','2','1','1.3333333333333','2019-01-09 00:30:00'),(4331,1054,16,'3','2','1.3333333333333','1.6666666666667','2019-01-09 00:30:00'),(4332,1054,17,'1','0','1','0','2019-01-09 00:30:00'),(4333,1054,18,'1','1','1','1','2019-01-09 00:30:00'),(4334,1054,19,'1','1',NULL,NULL,'2019-01-09 00:30:00'),(4335,1055,1,'8','10',NULL,NULL,'2019-01-09 00:30:03'),(4336,1055,2,'4','3',NULL,NULL,'2019-01-09 00:30:03'),(4337,1055,4,NULL,NULL,NULL,NULL,'2019-01-09 00:30:03'),(4338,1055,5,'97','109','37','33','2019-01-09 00:30:03'),(4339,1055,7,'11','11','5.1666666666667','4.25','2019-01-09 00:30:03'),(4340,1055,8,'10','10','4.5','4','2019-01-09 00:30:03'),(4341,1055,9,'4','4','4','4','2019-01-09 00:30:03'),(4342,1055,10,'1','1','1','1','2019-01-09 00:30:03'),(4343,1055,11,'0','0','0','0','2019-01-09 00:30:03'),(4344,1055,12,'4','4','1.8','2.1666666666667','2019-01-09 00:30:03'),(4345,1055,13,'1','1','1','1','2019-01-09 00:30:04'),(4346,1055,14,'24','23','18.25','18','2019-01-09 00:30:04'),(4347,1055,15,'3','3','2.1666666666667','1.5','2019-01-09 00:30:04'),(4348,1055,16,'2','2','1.2','1.1428571428571','2019-01-09 00:30:04'),(4349,1055,17,'2','2','2','1.5','2019-01-09 00:30:04'),(4350,1055,18,'1','1','1','1','2019-01-09 00:30:04'),(4351,1055,19,'1','1',NULL,NULL,'2019-01-09 00:30:04'),(4352,1056,1,'12','21',NULL,NULL,'2019-01-09 00:30:08'),(4353,1056,2,'2','4',NULL,NULL,'2019-01-09 00:30:08'),(4354,1056,4,NULL,NULL,NULL,NULL,'2019-01-09 00:30:08'),(4355,1056,5,'81','91','29','35','2019-01-09 00:30:08'),(4356,1056,7,'8','9','4.625','4.6666666666667','2019-01-09 00:30:09'),(4357,1056,8,'8','9','4.5','4.4666666666667','2019-01-09 00:30:09'),(4358,1056,9,'5','6','5','6','2019-01-09 00:30:09'),(4359,1056,10,'0','0','0','0','2019-01-09 00:30:09'),(4360,1056,11,'1','1','1','1','2019-01-09 00:30:09'),(4361,1056,12,'1','4','1','1.7272727272727','2019-01-09 00:30:09'),(4362,1056,13,'1','1','1','1','2019-01-09 00:30:09'),(4363,1056,14,'20','20','13.583333333333','12.666666666667','2019-01-09 00:30:09'),(4364,1056,15,'2','4','1.3333333333333','2.1111111111111','2019-01-09 00:30:09'),(4365,1056,16,'3','2','1.4285714285714','1.1875','2019-01-09 00:30:09'),(4366,1056,17,'2','1','2','1','2019-01-09 00:30:09'),(4367,1056,18,'1','1','1','1','2019-01-09 00:30:09'),(4368,1056,19,'1','1',NULL,NULL,'2019-01-09 00:30:09'),(4369,1057,1,'14','13',NULL,NULL,'2019-01-09 00:30:13'),(4370,1057,2,'3','4',NULL,NULL,'2019-01-09 00:30:13'),(4371,1057,4,NULL,NULL,NULL,NULL,'2019-01-09 00:30:13'),(4372,1057,5,'93','104','30','47','2019-01-09 00:30:13'),(4373,1057,7,'9','13','5.8888888888889','6.5','2019-01-09 00:30:13'),(4374,1057,8,'8','9','5.6666666666667','5.8','2019-01-09 00:30:13'),(4375,1057,9,'6','5','6','5','2019-01-09 00:30:13'),(4376,1057,10,'0','0','0','0','2019-01-09 00:30:13'),(4377,1057,11,'1','1','1','1','2019-01-09 00:30:13'),(4378,1057,12,'3','6','2','2.875','2019-01-09 00:30:13'),(4379,1057,13,'1','1','1','1','2019-01-09 00:30:13'),(4380,1057,14,'22','20','13','14.230769230769','2019-01-09 00:30:13'),(4381,1057,15,'4','6','2.2','3.5714285714286','2019-01-09 00:30:13'),(4382,1057,16,'3','2','1.5454545454545','1.3','2019-01-09 00:30:13'),(4383,1057,17,'0','1','0','1','2019-01-09 00:30:13'),(4384,1057,18,'0','1','0','1','2019-01-09 00:30:13'),(4385,1057,19,'1','1',NULL,NULL,'2019-01-09 00:30:14'),(4386,1058,1,'4','6',NULL,NULL,'2019-01-09 00:30:17'),(4387,1058,2,'1','1',NULL,NULL,'2019-01-09 00:30:17'),(4388,1058,4,NULL,NULL,NULL,NULL,'2019-01-09 00:30:17'),(4389,1058,5,'98','70','33','34','2019-01-09 00:30:17'),(4390,1058,7,'10','7','6.5','4.75','2019-01-09 00:30:17'),(4391,1058,8,'9','6','6','4.25','2019-01-09 00:30:17'),(4392,1058,9,'3','3','3','3','2019-01-09 00:30:17'),(4393,1058,10,'0','0','0','0','2019-01-09 00:30:17'),(4394,1058,11,'0','0','0','0','2019-01-09 00:30:17'),(4395,1058,12,'6','4','6','3','2019-01-09 00:30:17'),(4396,1058,13,'0','0','0','0','2019-01-09 00:30:17'),(4397,1058,14,'15','18','9.75','12.166666666667','2019-01-09 00:30:18'),(4398,1058,15,'6','4','3.5','2.5','2019-01-09 00:30:18'),(4399,1058,16,'2','2','1.5','1.5','2019-01-09 00:30:18'),(4400,1058,17,'0','0','0','0','2019-01-09 00:30:18'),(4401,1058,18,'0','0','0','0','2019-01-09 00:30:18'),(4402,1058,19,'1','1',NULL,NULL,'2019-01-09 00:30:18'),(4403,1059,1,'11','9',NULL,NULL,'2019-01-09 00:30:22'),(4404,1059,2,'2','2',NULL,NULL,'2019-01-09 00:30:22'),(4405,1059,4,NULL,NULL,NULL,NULL,'2019-01-09 00:30:22'),(4406,1059,5,'114','69','28','27','2019-01-09 00:30:22'),(4407,1059,7,'10','7','4.2857142857143','3.8333333333333','2019-01-09 00:30:22'),(4408,1059,8,'10','6','4.1428571428571','3.6666666666667','2019-01-09 00:30:22'),(4409,1059,9,'8','5','8','5','2019-01-09 00:30:23'),(4410,1059,10,'0','0','0','0','2019-01-09 00:30:23'),(4411,1059,11,'1','1','1','1','2019-01-09 00:30:23'),(4412,1059,12,'5','5','3','2.25','2019-01-09 00:30:23'),(4413,1059,13,'2','0','2','0','2019-01-09 00:30:23'),(4414,1059,14,'36','32','18.363636363636','17.222222222222','2019-01-09 00:30:23'),(4415,1059,15,'4','3','1.75','1.6','2019-01-09 00:30:23'),(4416,1059,16,'3','3','1.25','1.5','2019-01-09 00:30:23'),(4417,1059,17,'1','1','1','1','2019-01-09 00:30:23'),(4418,1059,18,'0','0','0','0','2019-01-09 00:30:23'),(4419,1059,19,'1','1',NULL,NULL,'2019-01-09 00:30:23'),(4420,1060,1,'9','12',NULL,NULL,'2019-01-09 00:30:26'),(4421,1060,2,'2','2',NULL,NULL,'2019-01-09 00:30:26'),(4422,1060,4,NULL,NULL,NULL,NULL,'2019-01-09 00:30:26'),(4423,1060,5,'58','58','20','18','2019-01-09 00:30:26'),(4424,1060,7,'6','4','2.8333333333333','2.375','2019-01-09 00:30:26'),(4425,1060,8,'4','4','2.5','2.375','2019-01-09 00:30:26'),(4426,1060,9,'5','7','5','7','2019-01-09 00:30:26'),(4427,1060,10,'0','0','0','0','2019-01-09 00:30:26'),(4428,1060,11,'0','0','0','0','2019-01-09 00:30:26'),(4429,1060,12,'2','1','2','1','2019-01-09 00:30:26'),(4430,1060,13,'1','1','1','1','2019-01-09 00:30:27'),(4431,1060,14,'17','37','11.888888888889','16.666666666667','2019-01-09 00:30:27'),(4432,1060,15,'3','2','1.75','1.3333333333333','2019-01-09 00:30:27'),(4433,1060,16,'1','2','1','1.2857142857143','2019-01-09 00:30:27'),(4434,1060,17,'0','0','0','0','2019-01-09 00:30:27'),(4435,1060,18,'1','1','1','1','2019-01-09 00:30:27'),(4436,1060,19,'1','1',NULL,NULL,'2019-01-09 00:30:27'),(4437,1061,1,'11','5',NULL,NULL,'2019-01-09 00:30:29'),(4438,1061,2,'3','1',NULL,NULL,'2019-01-09 00:30:29'),(4439,1061,4,NULL,NULL,NULL,NULL,'2019-01-09 00:30:29'),(4440,1061,5,'57','91','21','27','2019-01-09 00:30:29'),(4441,1061,7,'5','10','3.2857142857143','5.3333333333333','2019-01-09 00:30:29'),(4442,1061,8,'5','6','3.2857142857143','4','2019-01-09 00:30:29'),(4443,1061,9,'4','3','4','3','2019-01-09 00:30:30'),(4444,1061,10,'0','0','0','0','2019-01-09 00:30:30'),(4445,1061,11,'0','0','0','0','2019-01-09 00:30:30'),(4446,1061,12,'2','2','1.25','2','2019-01-09 00:30:30'),(4447,1061,13,'0','0','0','0','2019-01-09 00:30:30'),(4448,1061,14,'22','20','13.090909090909','10.4','2019-01-09 00:30:30'),(4449,1061,15,'3','4','1.6666666666667','2.5','2019-01-09 00:30:30'),(4450,1061,16,'1','3','1','2','2019-01-09 00:30:30'),(4451,1061,17,'0','0','0','0','2019-01-09 00:30:30'),(4452,1061,18,'1','0','1','0','2019-01-09 00:30:30'),(4453,1061,19,'1','1',NULL,NULL,'2019-01-09 00:30:30'),(4454,1062,1,'10','4',NULL,NULL,'2019-01-09 00:30:32'),(4455,1062,2,'3','1',NULL,NULL,'2019-01-09 00:30:32'),(4456,1062,4,NULL,NULL,NULL,NULL,'2019-01-09 00:30:32'),(4457,1062,5,'64','91','22','32','2019-01-09 00:30:33'),(4458,1062,7,'5','10','3.6666666666667','7.5','2019-01-09 00:30:33'),(4459,1062,8,'5','6','3.6666666666667','5.5','2019-01-09 00:30:33'),(4460,1062,9,'4','3','4','3','2019-01-09 00:30:33'),(4461,1062,10,'0','0','0','0','2019-01-09 00:30:33'),(4462,1062,11,'0','0','0','0','2019-01-09 00:30:33'),(4463,1062,12,'2','2','1.25','2','2019-01-09 00:30:33'),(4464,1062,13,'0','0','0','0','2019-01-09 00:30:33'),(4465,1062,14,'22','20','13.6','11','2019-01-09 00:30:33'),(4466,1062,15,'3','4','1.6666666666667','2.5','2019-01-09 00:30:33'),(4467,1062,16,'1','3','1','2','2019-01-09 00:30:33'),(4468,1062,17,'0','0','0','0','2019-01-09 00:30:33'),(4469,1062,18,'1','0','1','0','2019-01-09 00:30:33'),(4470,1062,19,'1','1',NULL,NULL,'2019-01-09 00:30:33'),(4471,1063,1,'5','5',NULL,NULL,'2019-01-09 00:30:37'),(4472,1063,2,'1','1',NULL,NULL,'2019-01-09 00:30:37'),(4473,1063,4,NULL,NULL,NULL,NULL,'2019-01-09 00:30:37'),(4474,1063,5,'63','92','22','28','2019-01-09 00:30:37'),(4475,1063,7,'3','6','2.3333333333333','3.3333333333333','2019-01-09 00:30:37'),(4476,1063,8,'3','6','2.3333333333333','3.3333333333333','2019-01-09 00:30:37'),(4477,1063,9,'4','4','4','4','2019-01-09 00:30:37'),(4478,1063,10,'0','0','0','0','2019-01-09 00:30:37'),(4479,1063,11,'0','0','0','0','2019-01-09 00:30:37'),(4480,1063,12,'2','1','2','1','2019-01-09 00:30:37'),(4481,1063,13,'0','3','0','3','2019-01-09 00:30:37'),(4482,1063,14,'8','10','5','6','2019-01-09 00:30:37'),(4483,1063,15,'1','2','1','1.5','2019-01-09 00:30:37'),(4484,1063,16,'1','2','1','1.3333333333333','2019-01-09 00:30:37'),(4485,1063,17,'0','0','0','0','2019-01-09 00:30:38'),(4486,1063,18,'0','0','0','0','2019-01-09 00:30:38'),(4487,1063,19,'1','1',NULL,NULL,'2019-01-09 00:30:38'),(4488,1064,1,'15','10',NULL,NULL,'2019-01-09 00:30:41'),(4489,1064,2,'2','2',NULL,NULL,'2019-01-09 00:30:41'),(4490,1064,4,NULL,NULL,NULL,NULL,'2019-01-09 00:30:41'),(4491,1064,5,'93','93','20','23','2019-01-09 00:30:41'),(4492,1064,7,'9','9','3.125','4.75','2019-01-09 00:30:41'),(4493,1064,8,'9','9','3.125','4.75','2019-01-09 00:30:41'),(4494,1064,9,'9','7','9','7','2019-01-09 00:30:42'),(4495,1064,10,'1','1','1','1','2019-01-09 00:30:42'),(4496,1064,11,'0','0','0','0','2019-01-09 00:30:42'),(4497,1064,12,'1','1','1','1','2019-01-09 00:30:42'),(4498,1064,13,'3','3','2.5','2.5','2019-01-09 00:30:42'),(4499,1064,14,'15','15','5.8','6.4','2019-01-09 00:30:42'),(4500,1064,15,'3','3','1.3333333333333','1.5','2019-01-09 00:30:42'),(4501,1064,16,'1','2','1','1.1428571428571','2019-01-09 00:30:42'),(4502,1064,17,'0','0','0','0','2019-01-09 00:30:42'),(4503,1064,18,'1','1','1','1','2019-01-09 00:30:42'),(4504,1064,19,'1','1',NULL,NULL,'2019-01-09 00:30:42'),(4505,1065,1,'20','15',NULL,NULL,'2019-01-09 00:30:46'),(4506,1065,2,'2','2',NULL,NULL,'2019-01-09 00:30:46'),(4507,1065,4,NULL,NULL,NULL,NULL,'2019-01-09 00:30:46'),(4508,1065,5,'74','74','24','28','2019-01-09 00:30:46'),(4509,1065,7,'9','9','3.9166666666667','4.5555555555556','2019-01-09 00:30:46'),(4510,1065,8,'8','8','3.75','4.3333333333333','2019-01-09 00:30:46'),(4511,1065,9,'10','9','10','9','2019-01-09 00:30:46'),(4512,1065,10,'10','10','4','4','2019-01-09 00:30:46'),(4513,1065,11,'0','0','0','0','2019-01-09 00:30:46'),(4514,1065,12,'4','4','2','2.2','2019-01-09 00:30:46'),(4515,1065,13,'3','3','2','2','2019-01-09 00:30:46'),(4516,1065,14,'11','11','5.5','5.8','2019-01-09 00:30:46'),(4517,1065,15,'3','3','1.7','1.875','2019-01-09 00:30:46'),(4518,1065,16,'2','2','1.0769230769231','1.25','2019-01-09 00:30:46'),(4519,1065,17,'0','0','0','0','2019-01-09 00:30:46'),(4520,1065,18,'1','1','1','1','2019-01-09 00:30:46'),(4521,1065,19,'1','1',NULL,NULL,'2019-01-09 00:30:46'),(4522,1066,1,'18','11',NULL,NULL,'2019-01-09 00:30:50'),(4523,1066,2,'1','1',NULL,NULL,'2019-01-09 00:30:50'),(4524,1066,4,NULL,NULL,NULL,NULL,'2019-01-09 00:30:50'),(4525,1066,5,'127','91','32','39','2019-01-09 00:30:50'),(4526,1066,7,'8','6','3.4166666666667','3.6666666666667','2019-01-09 00:30:50'),(4527,1066,8,'8','6','3.3333333333333','3.6666666666667','2019-01-09 00:30:50'),(4528,1066,9,'8','6','8','6','2019-01-09 00:30:50'),(4529,1066,10,'3','3','2','2','2019-01-09 00:30:50'),(4530,1066,11,'0','0','0','0','2019-01-09 00:30:50'),(4531,1066,12,'4','3','2','1.875','2019-01-09 00:30:51'),(4532,1066,13,'2','2','2','2','2019-01-09 00:30:51'),(4533,1066,14,'12','9','5.0555555555556','5.1818181818182','2019-01-09 00:30:51'),(4534,1066,15,'3','3','1.6','1.7777777777778','2019-01-09 00:30:51'),(4535,1066,16,'1','2','1','1.2','2019-01-09 00:30:51'),(4536,1066,17,'0','0','0','0','2019-01-09 00:30:51'),(4537,1066,18,'0','0','0','0','2019-01-09 00:30:51'),(4538,1066,19,'1','1',NULL,NULL,'2019-01-09 00:30:51'),(4539,1067,1,'9','7',NULL,NULL,'2019-01-09 00:30:55'),(4540,1067,2,'3','3',NULL,NULL,'2019-01-09 00:30:55'),(4541,1067,4,NULL,NULL,NULL,NULL,'2019-01-09 00:30:55'),(4542,1067,5,'53','85','22','27','2019-01-09 00:30:55'),(4543,1067,7,'4','6','2.8333333333333','3.2','2019-01-09 00:30:55'),(4544,1067,8,'4','5','2.8333333333333','3','2019-01-09 00:30:55'),(4545,1067,9,'4','5','4','5','2019-01-09 00:30:55'),(4546,1067,10,'0','0','0','0','2019-01-09 00:30:55'),(4547,1067,11,'0','0','0','0','2019-01-09 00:30:55'),(4548,1067,12,'1','2','1','1.25','2019-01-09 00:30:55'),(4549,1067,13,'1','1','1','1','2019-01-09 00:30:55'),(4550,1067,14,'21','18','15.111111111111','13.857142857143','2019-01-09 00:30:56'),(4551,1067,15,'2','3','1.3333333333333','1.6','2019-01-09 00:30:56'),(4552,1067,16,'1','2','1','1.5','2019-01-09 00:30:56'),(4553,1067,17,'0','0','0','0','2019-01-09 00:30:56'),(4554,1067,18,'0','0','0','0','2019-01-09 00:30:56'),(4555,1067,19,'1','1',NULL,NULL,'2019-01-09 00:30:56'),(4556,1068,1,'8','8',NULL,NULL,'2019-01-09 00:30:59'),(4557,1068,2,'1','1',NULL,NULL,'2019-01-09 00:30:59'),(4558,1068,4,NULL,NULL,NULL,NULL,'2019-01-09 00:30:59'),(4559,1068,5,'84','91','29','40','2019-01-09 00:30:59'),(4560,1068,7,'7','8','3.3333333333333','4.8333333333333','2019-01-09 00:30:59'),(4561,1068,8,'7','8','3.3333333333333','4.5','2019-01-09 00:30:59'),(4562,1068,9,'3','2','3','2','2019-01-09 00:30:59'),(4563,1068,10,'0','0','0','0','2019-01-09 00:30:59'),(4564,1068,11,'0','0','0','0','2019-01-09 00:30:59'),(4565,1068,12,'3','4','2.6666666666667','3.3333333333333','2019-01-09 00:31:00'),(4566,1068,13,'1','1','1','1','2019-01-09 00:31:00'),(4567,1068,14,'20','23','11.125','11.75','2019-01-09 00:31:00'),(4568,1068,15,'3','4','2','2.25','2019-01-09 00:31:00'),(4569,1068,16,'1','2','1','1.2','2019-01-09 00:31:00'),(4570,1068,17,'0','0','0','0','2019-01-09 00:31:00'),(4571,1068,18,'0','0','0','0','2019-01-09 00:31:00'),(4572,1068,19,'1','1',NULL,NULL,'2019-01-09 00:31:00'),(4573,1069,1,'17','8',NULL,NULL,'2019-01-09 00:31:03'),(4574,1069,2,'6','6',NULL,NULL,'2019-01-09 00:31:04'),(4575,1069,4,NULL,NULL,NULL,NULL,'2019-01-09 00:31:04'),(4576,1069,5,'101','116','39','68','2019-01-09 00:31:04'),(4577,1069,7,'4','6','3.4545454545455','5.5','2019-01-09 00:31:04'),(4578,1069,8,'4','5','3.4545454545455','4.6666666666667','2019-01-09 00:31:04'),(4579,1069,9,'4','5','4','5','2019-01-09 00:31:04'),(4580,1069,10,'0','0','0','0','2019-01-09 00:31:04'),(4581,1069,11,'0','0','0','0','2019-01-09 00:31:04'),(4582,1069,12,'1','3','1','3','2019-01-09 00:31:04'),(4583,1069,13,'0','0','0','0','2019-01-09 00:31:04'),(4584,1069,14,'20','18','14.588235294118','15.25','2019-01-09 00:31:05'),(4585,1069,15,'2','3','1.4545454545455','2.6666666666667','2019-01-09 00:31:05'),(4586,1069,16,'1','2','1','1.8333333333333','2019-01-09 00:31:05'),(4587,1069,17,'0','0','0','0','2019-01-09 00:31:05'),(4588,1069,18,'0','0','0','0','2019-01-09 00:31:05'),(4589,1069,19,'1','1',NULL,NULL,'2019-01-09 00:31:05'),(4590,1070,1,'7','8',NULL,NULL,'2019-01-09 00:31:07'),(4591,1070,2,'1','1',NULL,NULL,'2019-01-09 00:31:08'),(4592,1070,4,NULL,NULL,NULL,NULL,'2019-01-09 00:31:08'),(4593,1070,5,'59','74','24','28','2019-01-09 00:31:08'),(4594,1070,7,'10','11','4.6','6','2019-01-09 00:31:08'),(4595,1070,8,'9','11','4.4','5.8','2019-01-09 00:31:08'),(4596,1070,9,'2','2','2','2','2019-01-09 00:31:08'),(4597,1070,10,'4','4','4','4','2019-01-09 00:31:08'),(4598,1070,11,'1','1','1','1','2019-01-09 00:31:08'),(4599,1070,12,'2','4','1.25','1.75','2019-01-09 00:31:08'),(4600,1070,13,'1','1','1','1','2019-01-09 00:31:08'),(4601,1070,14,'17','19','9.8571428571429','11.875','2019-01-09 00:31:08'),(4602,1070,15,'2','3','1.25','1.75','2019-01-09 00:31:08'),(4603,1070,16,'3','3','1.5','1.8','2019-01-09 00:31:08'),(4604,1070,17,'0','0','0','0','2019-01-09 00:31:08'),(4605,1070,18,'0','0','0','0','2019-01-09 00:31:08'),(4606,1070,19,'1','1',NULL,NULL,'2019-01-09 00:31:08'),(4607,1071,1,'7','8',NULL,NULL,'2019-01-09 00:31:12'),(4608,1071,2,'1','1',NULL,NULL,'2019-01-09 00:31:12'),(4609,1071,4,NULL,NULL,NULL,NULL,'2019-01-09 00:31:12'),(4610,1071,5,'62','79','24','29','2019-01-09 00:31:12'),(4611,1071,7,'6','6','3.5','3.7142857142857','2019-01-09 00:31:12'),(4612,1071,8,'6','6','3.5','3.7142857142857','2019-01-09 00:31:12'),(4613,1071,9,'2','4','2','4','2019-01-09 00:31:12'),(4614,1071,10,'4','4','4','4','2019-01-09 00:31:12'),(4615,1071,11,'0','0','0','0','2019-01-09 00:31:12'),(4616,1071,12,'2','2','1.5','1.2','2019-01-09 00:31:12'),(4617,1071,13,'0','0','0','0','2019-01-09 00:31:12'),(4618,1071,14,'13','13','9','9.5','2019-01-09 00:31:12'),(4619,1071,15,'3','3','1.6','1.6666666666667','2019-01-09 00:31:12'),(4620,1071,16,'2','2','1.3333333333333','1.5','2019-01-09 00:31:12'),(4621,1071,17,'0','0','0','0','2019-01-09 00:31:12'),(4622,1071,18,'1','1','1','1','2019-01-09 00:31:12'),(4623,1071,19,'1','1',NULL,NULL,'2019-01-09 00:31:13'),(4624,1072,1,'8','16',NULL,NULL,'2019-01-09 00:31:15'),(4625,1072,2,'1','2',NULL,NULL,'2019-01-09 00:31:15'),(4626,1072,4,NULL,NULL,NULL,NULL,'2019-01-09 00:31:15'),(4627,1072,5,'47','68','26','26','2019-01-09 00:31:15'),(4628,1072,7,'6','9','4.1666666666667','4.4','2019-01-09 00:31:15'),(4629,1072,8,'6','9','4','4.3','2019-01-09 00:31:16'),(4630,1072,9,'2','4','2','4','2019-01-09 00:31:16'),(4631,1072,10,'8','8','8','8','2019-01-09 00:31:16'),(4632,1072,11,'1','1','1','1','2019-01-09 00:31:16'),(4633,1072,12,'1','3','1','1.4285714285714','2019-01-09 00:31:16'),(4634,1072,13,'2','2','2','1.5','2019-01-09 00:31:16'),(4635,1072,14,'14','20','9.125','11.3125','2019-01-09 00:31:16'),(4636,1072,15,'1','2','1','1.4444444444444','2019-01-09 00:31:16'),(4637,1072,16,'2','2','1.4','1.3846153846154','2019-01-09 00:31:16'),(4638,1072,17,'0','0','0','0','2019-01-09 00:31:16'),(4639,1072,18,'1','1','1','1','2019-01-09 00:31:16'),(4640,1072,19,'1','1',NULL,NULL,'2019-01-09 00:31:16'),(4641,1073,1,'34','16',NULL,NULL,'2019-01-09 00:31:20'),(4642,1073,2,'1','1',NULL,NULL,'2019-01-09 00:31:20'),(4643,1073,4,NULL,NULL,NULL,NULL,'2019-01-09 00:31:20'),(4644,1073,5,'99','110','27','32','2019-01-09 00:31:20'),(4645,1073,7,'8','11','3.0869565217391','3.9090909090909','2019-01-09 00:31:20'),(4646,1073,8,'8','9','3','3.7272727272727','2019-01-09 00:31:20'),(4647,1073,9,'6','5','6','5','2019-01-09 00:31:20'),(4648,1073,10,'1','0','1','0','2019-01-09 00:31:21'),(4649,1073,11,'1','0','1','0','2019-01-09 00:31:21'),(4650,1073,12,'5','5','1.6923076923077','2','2019-01-09 00:31:21'),(4651,1073,13,'1','3','1','3','2019-01-09 00:31:21'),(4652,1073,14,'25','25','14.823529411765','14.75','2019-01-09 00:31:21'),(4653,1073,15,'5','5','1.3333333333333','1.9','2019-01-09 00:31:21'),(4654,1073,16,'4','4','1.4444444444444','1.5555555555556','2019-01-09 00:31:21'),(4655,1073,17,'0','0','0','0','2019-01-09 00:31:21'),(4656,1073,18,'1','1','1','1','2019-01-09 00:31:21'),(4657,1073,19,'1','1',NULL,NULL,'2019-01-09 00:31:21'),(6222,1166,1,'4','5',NULL,NULL,'2019-01-10 10:10:29'),(6223,1166,2,'2','2',NULL,NULL,'2019-01-10 10:10:29'),(6224,1166,4,NULL,NULL,NULL,NULL,'2019-01-10 10:10:29'),(6225,1166,5,'36','18','12','10','2019-01-10 10:10:29'),(6226,1166,7,'3','2','2.5','1.3333333333333','2019-01-10 10:10:29'),(6227,1166,8,'3','2','2.5','1.3333333333333','2019-01-10 10:10:29'),(6228,1166,9,'1','2','1','2','2019-01-10 10:10:29'),(6229,1166,10,'0','0','0','0','2019-01-10 10:10:29'),(6230,1166,11,'0','0','0','0','2019-01-10 10:10:29'),(6231,1166,12,'1','1','1','1','2019-01-10 10:10:29'),(6232,1166,13,'0','0','0','0','2019-01-10 10:10:29'),(6233,1166,14,'21','22','14.75','16.8','2019-01-10 10:10:29'),(6234,1166,15,'1','1','1','1','2019-01-10 10:10:29'),(6235,1166,16,'1','2','1','1.2','2019-01-10 10:10:29'),(6236,1166,17,'0','0','0','0','2019-01-10 10:10:30'),(6237,1166,18,'0','0','0','0','2019-01-10 10:10:30'),(6238,1166,19,'2','2',NULL,NULL,'2019-01-10 10:10:30'),(6239,1167,1,'7','13',NULL,NULL,'2019-01-10 10:10:35'),(6240,1167,2,'2','2',NULL,NULL,'2019-01-10 10:10:35'),(6241,1167,4,NULL,NULL,NULL,NULL,'2019-01-10 10:10:35'),(6242,1167,5,'35','34','19','14','2019-01-10 10:10:35'),(6243,1167,7,'5','5','4','2.5555555555556','2019-01-10 10:10:35'),(6244,1167,8,'5','5','3.8','2.4444444444444','2019-01-10 10:10:35'),(6245,1167,9,'2','4','2','4','2019-01-10 10:10:35'),(6246,1167,10,'0','0','0','0','2019-01-10 10:10:35'),(6247,1167,11,'1','1','1','1','2019-01-10 10:10:35'),(6248,1167,12,'2','2','1.6666666666667','1.3333333333333','2019-01-10 10:10:35'),(6249,1167,13,'0','0','0','0','2019-01-10 10:10:35'),(6250,1167,14,'18','25','13.142857142857','18.692307692308','2019-01-10 10:10:35'),(6251,1167,15,'2','2','1.5','1.3333333333333','2019-01-10 10:10:35'),(6252,1167,16,'2','2','1.1666666666667','1.25','2019-01-10 10:10:35'),(6253,1167,17,'0','0','0','0','2019-01-10 10:10:35'),(6254,1167,18,'1','1','1','1','2019-01-10 10:10:36'),(6255,1167,19,'2','2',NULL,NULL,'2019-01-10 10:10:36'),(6256,1168,1,'8','10',NULL,NULL,'2019-01-10 10:12:15'),(6257,1168,2,'4','3',NULL,NULL,'2019-01-10 10:12:15'),(6258,1168,4,NULL,NULL,NULL,NULL,'2019-01-10 10:12:15'),(6259,1168,5,'42','42','24','22','2019-01-10 10:12:15'),(6260,1168,7,'5','5','3','2.8571428571429','2019-01-10 10:12:15'),(6261,1168,8,'5','5','3','2.7142857142857','2019-01-10 10:12:15'),(6262,1168,9,'4','4','4','4','2019-01-10 10:12:15'),(6263,1168,10,'0','0','0','0','2019-01-10 10:12:15'),(6264,1168,11,'0','0','0','0','2019-01-10 10:12:16'),(6265,1168,12,'1','2','1','1.2','2019-01-10 10:12:16'),(6266,1168,13,'1','1','1','1','2019-01-10 10:12:16'),(6267,1168,14,'21','27','14.5','17.4','2019-01-10 10:12:16'),(6268,1168,15,'2','2','1.3333333333333','1.2857142857143','2019-01-10 10:12:16'),(6269,1168,16,'1','2','1','1.2857142857143','2019-01-10 10:12:16'),(6270,1168,17,'0','0','0','0','2019-01-10 10:12:16'),(6271,1168,18,'1','1','1','1','2019-01-10 10:12:16'),(6272,1168,19,'2','2',NULL,NULL,'2019-01-10 10:12:16'),(6273,1169,1,'11','17',NULL,NULL,'2019-01-10 10:12:21'),(6274,1169,2,'2','2',NULL,NULL,'2019-01-10 10:12:21'),(6275,1169,4,NULL,NULL,NULL,NULL,'2019-01-10 10:12:21'),(6276,1169,5,'119','55','35','17','2019-01-10 10:12:21'),(6277,1169,7,'20','5','6.4285714285714','2.1818181818182','2019-01-10 10:12:21'),(6278,1169,8,'19','5','6','2','2019-01-10 10:12:21'),(6279,1169,9,'5','6','5','6','2019-01-10 10:12:21'),(6280,1169,10,'1','0','1','0','2019-01-10 10:12:21'),(6281,1169,11,'1','0','1','0','2019-01-10 10:12:21'),(6282,1169,12,'2','2','1.6666666666667','1.3333333333333','2019-01-10 10:12:21'),(6283,1169,13,'3','1','2','1','2019-01-10 10:12:21'),(6284,1169,14,'37','27','15.2','17.375','2019-01-10 10:12:21'),(6285,1169,15,'2','2','1.4','1.2857142857143','2019-01-10 10:12:21'),(6286,1169,16,'4','2','2.1666666666667','1.3333333333333','2019-01-10 10:12:22'),(6287,1169,17,'0','0','0','0','2019-01-10 10:12:22'),(6288,1169,18,'1','1','1','1','2019-01-10 10:12:22'),(6289,1169,19,'3','3',NULL,NULL,'2019-01-10 10:12:22'),(6290,1170,1,'15','26',NULL,NULL,'2019-01-10 10:12:26'),(6291,1170,2,'4','4',NULL,NULL,'2019-01-10 10:12:26'),(6292,1170,4,NULL,NULL,NULL,NULL,'2019-01-10 10:12:26'),(6293,1170,5,'100','100','23','17','2019-01-10 10:12:26'),(6294,1170,7,'7','7','3','1.875','2019-01-10 10:12:26'),(6295,1170,8,'6','6','2.625','1.6875','2019-01-10 10:12:26'),(6296,1170,9,'7','9','7','9','2019-01-10 10:12:26'),(6297,1170,10,'0','0','0','0','2019-01-10 10:12:27'),(6298,1170,11,'0','0','0','0','2019-01-10 10:12:27'),(6299,1170,12,'1','1','1','1','2019-01-10 10:12:27'),(6300,1170,13,'2','2','2','2','2019-01-10 10:12:27'),(6301,1170,14,'22','30','14.285714285714','19.88','2019-01-10 10:12:27'),(6302,1170,15,'2','2','1.1666666666667','1.1111111111111','2019-01-10 10:12:27'),(6303,1170,16,'2','2','1.1','1.1904761904762','2019-01-10 10:12:27'),(6304,1170,17,'2','2','2','2','2019-01-10 10:12:27'),(6305,1170,18,'1','1','1','1','2019-01-10 10:12:27'),(6306,1170,19,'4','4',NULL,NULL,'2019-01-10 10:12:27'),(6307,1171,1,'9','10',NULL,NULL,'2019-01-10 10:12:32'),(6308,1171,2,'2','2',NULL,NULL,'2019-01-10 10:12:32'),(6309,1171,4,NULL,NULL,NULL,NULL,'2019-01-10 10:12:32'),(6310,1171,5,'52','52','22','20','2019-01-10 10:12:32'),(6311,1171,7,'4','4','3.6666666666667','3','2019-01-10 10:12:32'),(6312,1171,8,'4','4','3.5','2.8571428571429','2019-01-10 10:12:32'),(6313,1171,9,'4','5','4','5','2019-01-10 10:12:32'),(6314,1171,10,'0','0','0','0','2019-01-10 10:12:32'),(6315,1171,11,'0','0','0','0','2019-01-10 10:12:32'),(6316,1171,12,'1','1','1','1','2019-01-10 10:12:33'),(6317,1171,13,'1','1','1','1','2019-01-10 10:12:33'),(6318,1171,14,'19','23','13.888888888889','16.2','2019-01-10 10:12:33'),(6319,1171,15,'1','1','1','1','2019-01-10 10:12:33'),(6320,1171,16,'1','2','1','1.125','2019-01-10 10:12:33'),(6321,1171,17,'0','0','0','0','2019-01-10 10:12:33'),(6322,1171,18,'1','1','1','1','2019-01-10 10:12:33'),(6323,1171,19,'2','2',NULL,NULL,'2019-01-10 10:12:33'),(6324,1172,1,'17','15',NULL,NULL,'2019-01-10 10:12:38'),(6325,1172,2,'2','3',NULL,NULL,'2019-01-10 10:12:38'),(6326,1172,4,NULL,NULL,NULL,NULL,'2019-01-10 10:12:38'),(6327,1172,5,'41','49','16','19','2019-01-10 10:12:38'),(6328,1172,7,'5','7','3.4444444444444','3.3333333333333','2019-01-10 10:12:38'),(6329,1172,8,'5','5','3.4444444444444','3.1111111111111','2019-01-10 10:12:38'),(6330,1172,9,'7','8','7','8','2019-01-10 10:12:38'),(6331,1172,10,'2','2','2','2','2019-01-10 10:12:38'),(6332,1172,11,'0','0','0','0','2019-01-10 10:12:38'),(6333,1172,12,'1','2','1','1.2','2019-01-10 10:12:38'),(6334,1172,13,'1','1','1','1','2019-01-10 10:12:38'),(6335,1172,14,'21','27','13.266666666667','14.615384615385','2019-01-10 10:12:38'),(6336,1172,15,'1','2','1','1.1666666666667','2019-01-10 10:12:38'),(6337,1172,16,'1','2','1','1.1666666666667','2019-01-10 10:12:38'),(6338,1172,17,'2','2','2','2','2019-01-10 10:12:38'),(6339,1172,18,'1','1','1','1','2019-01-10 10:12:38'),(6340,1172,19,'4','4',NULL,NULL,'2019-01-10 10:12:39'),(6341,1173,1,'11','12',NULL,NULL,'2019-01-10 10:12:43'),(6342,1173,2,'3','3',NULL,NULL,'2019-01-10 10:12:43'),(6343,1173,4,NULL,NULL,NULL,NULL,'2019-01-10 10:12:43'),(6344,1173,5,'54','54','21','20','2019-01-10 10:12:43'),(6345,1173,7,'5','5','2.6666666666667','2.2857142857143','2019-01-10 10:12:44'),(6346,1173,8,'5','5','2.6666666666667','2.2857142857143','2019-01-10 10:12:44'),(6347,1173,9,'7','7','7','7','2019-01-10 10:12:44'),(6348,1173,10,'1','1','1','1','2019-01-10 10:12:44'),(6349,1173,11,'0','0','0','0','2019-01-10 10:12:44'),(6350,1173,12,'1','1','1','1','2019-01-10 10:12:44'),(6351,1173,13,'0','0','0','0','2019-01-10 10:12:44'),(6352,1173,14,'24','28','16.9','18.909090909091','2019-01-10 10:12:44'),(6353,1173,15,'1','1','1','1','2019-01-10 10:12:44'),(6354,1173,16,'1','2','1','1.125','2019-01-10 10:12:44'),(6355,1173,17,'2','2','2','2','2019-01-10 10:12:44'),(6356,1173,18,'1','1','1','1','2019-01-10 10:12:44'),(6357,1173,19,'4','4',NULL,NULL,'2019-01-10 10:12:44'),(6358,1174,1,'10','6',NULL,NULL,'2019-01-10 10:12:49'),(6359,1174,2,'1','1',NULL,NULL,'2019-01-10 10:12:49'),(6360,1174,4,NULL,NULL,NULL,NULL,'2019-01-10 10:12:49'),(6361,1174,5,'70','137','25','37','2019-01-10 10:12:49'),(6362,1174,7,'7','12','4.75','8','2019-01-10 10:12:49'),(6363,1174,8,'7','11','4.75','7.5','2019-01-10 10:12:49'),(6364,1174,9,'7','5','7','5','2019-01-10 10:12:49'),(6365,1174,10,'0','0','0','0','2019-01-10 10:12:49'),(6366,1174,11,'0','0','0','0','2019-01-10 10:12:49'),(6367,1174,12,'3','5','2.5','5','2019-01-10 10:12:49'),(6368,1174,13,'1','1','1','1','2019-01-10 10:12:49'),(6369,1174,14,'20','19','12.444444444444','8.8','2019-01-10 10:12:49'),(6370,1174,15,'3','4','1.5','2.5','2019-01-10 10:12:50'),(6371,1174,16,'1','2','1','1.5','2019-01-10 10:12:50'),(6372,1174,17,'0','0','0','0','2019-01-10 10:12:50'),(6373,1174,18,'0','0','0','0','2019-01-10 10:12:50'),(6374,1174,19,'4','4',NULL,NULL,'2019-01-10 10:12:50'),(6375,1175,1,'17','14',NULL,NULL,'2019-01-10 10:12:54'),(6376,1175,2,'3','3',NULL,NULL,'2019-01-10 10:12:55'),(6377,1175,4,NULL,NULL,NULL,NULL,'2019-01-10 10:12:55'),(6378,1175,5,'95','95','24','29','2019-01-10 10:12:55'),(6379,1175,7,'9','9','4.2','4.4444444444444','2019-01-10 10:12:55'),(6380,1175,8,'9','9','4.1','4.3333333333333','2019-01-10 10:12:55'),(6381,1175,9,'8','8','8','8','2019-01-10 10:12:55'),(6382,1175,10,'8','8','6.5','6.5','2019-01-10 10:12:55'),(6383,1175,11,'0','0','0','0','2019-01-10 10:12:55'),(6384,1175,12,'2','2','1.25','1.25','2019-01-10 10:12:55'),(6385,1175,13,'4','4','2','2','2019-01-10 10:12:55'),(6386,1175,14,'25','25','17.875','15.923076923077','2019-01-10 10:12:55'),(6387,1175,15,'3','3','1.4','1.4444444444444','2019-01-10 10:12:55'),(6388,1175,16,'2','2','1.2222222222222','1.6','2019-01-10 10:12:55'),(6389,1175,17,'0','0','0','0','2019-01-10 10:12:55'),(6390,1175,18,'1','1','1','1','2019-01-10 10:12:55'),(6391,1175,19,'3','4',NULL,NULL,'2019-01-10 10:12:55'),(6392,1176,1,'20','16',NULL,NULL,'2019-01-10 10:13:00'),(6393,1176,2,'1','1',NULL,NULL,'2019-01-10 10:13:00'),(6394,1176,4,NULL,NULL,NULL,NULL,'2019-01-10 10:13:00'),(6395,1176,5,'51','51','18','21','2019-01-10 10:13:00'),(6396,1176,7,'6','6','2.5','2.75','2019-01-10 10:13:00'),(6397,1176,8,'6','6','2.5','2.75','2019-01-10 10:13:00'),(6398,1176,9,'8','8','8','8','2019-01-10 10:13:00'),(6399,1176,10,'6','6','6','6','2019-01-10 10:13:00'),(6400,1176,11,'0','0','0','0','2019-01-10 10:13:00'),(6401,1176,12,'1','1','1','1','2019-01-10 10:13:01'),(6402,1176,13,'2','2','1.5','1.5','2019-01-10 10:13:01'),(6403,1176,14,'21','20','13.388888888889','12.428571428571','2019-01-10 10:13:01'),(6404,1176,15,'1','2','1','1.1428571428571','2019-01-10 10:13:01'),(6405,1176,16,'2','2','1.125','1.5','2019-01-10 10:13:01'),(6406,1176,17,'0','0','0','0','2019-01-10 10:13:01'),(6407,1176,18,'1','1','1','1','2019-01-10 10:13:01'),(6408,1176,19,'6','6',NULL,NULL,'2019-01-10 10:13:01'),(6409,1177,1,'11','7',NULL,NULL,'2019-01-10 10:13:05'),(6410,1177,2,'1','1',NULL,NULL,'2019-01-10 10:13:05'),(6411,1177,4,NULL,NULL,NULL,NULL,'2019-01-10 10:13:05'),(6412,1177,5,'49','68','20','25','2019-01-10 10:13:05'),(6413,1177,7,'5','5','2.8','3.6666666666667','2019-01-10 10:13:05'),(6414,1177,8,'4','4','2.4','3','2019-01-10 10:13:05'),(6415,1177,9,'5','4','5','4','2019-01-10 10:13:05'),(6416,1177,10,'2','2','2','2','2019-01-10 10:13:06'),(6417,1177,11,'0','0','0','0','2019-01-10 10:13:06'),(6418,1177,12,'2','2','2','2','2019-01-10 10:13:06'),(6419,1177,13,'1','1','1','1','2019-01-10 10:13:06'),(6420,1177,14,'20','19','12.6','9.8333333333333','2019-01-10 10:13:06'),(6421,1177,15,'3','4','1.5','2.5','2019-01-10 10:13:06'),(6422,1177,16,'1','2','1','1.5','2019-01-10 10:13:06'),(6423,1177,17,'0','0','0','0','2019-01-10 10:13:06'),(6424,1177,18,'0','0','0','0','2019-01-10 10:13:06'),(6425,1177,19,'4','4',NULL,NULL,'2019-01-10 10:13:06'),(6426,1178,1,'16','7',NULL,NULL,'2019-01-10 10:13:11'),(6427,1178,2,'3','3',NULL,NULL,'2019-01-10 10:13:11'),(6428,1178,4,NULL,NULL,NULL,NULL,'2019-01-10 10:13:11'),(6429,1178,5,'91','102','36','40','2019-01-10 10:13:11'),(6430,1178,7,'12','12','5.8333333333333','5.8','2019-01-10 10:13:11'),(6431,1178,8,'12','7','4.6666666666667','4.2','2019-01-10 10:13:11'),(6432,1178,9,'10','7','10','7','2019-01-10 10:13:11'),(6433,1178,10,'12','13','5.4285714285714','9.6666666666667','2019-01-10 10:13:11'),(6434,1178,11,'1','0','1','0','2019-01-10 10:13:12'),(6435,1178,12,'6','6','2.5','3.6666666666667','2019-01-10 10:13:12'),(6436,1178,13,'4','4','3','3','2019-01-10 10:13:12'),(6437,1178,14,'37','38','20.375','14','2019-01-10 10:13:12'),(6438,1178,15,'3','4','1.4444444444444','2','2019-01-10 10:13:12'),(6439,1178,16,'9','5','3.25','2.3333333333333','2019-01-10 10:13:12'),(6440,1178,17,'2','2','2','2','2019-01-10 10:13:12'),(6441,1178,18,'1','1','1','1','2019-01-10 10:13:12'),(6442,1178,19,'2','2',NULL,NULL,'2019-01-10 10:13:12'),(6443,1179,1,'8','8',NULL,NULL,'2019-01-10 10:13:16'),(6444,1179,2,'1','1',NULL,NULL,'2019-01-10 10:13:16'),(6445,1179,4,NULL,NULL,NULL,NULL,'2019-01-10 10:13:16'),(6446,1179,5,'237','237','89','84','2019-01-10 10:13:17'),(6447,1179,7,'28','28','12','11.4','2019-01-10 10:13:17'),(6448,1179,8,'15','15','8.6','8','2019-01-10 10:13:17'),(6449,1179,9,'6','5','6','5','2019-01-10 10:13:17'),(6450,1179,10,'1','1','1','1','2019-01-10 10:13:17'),(6451,1179,11,'0','0','0','0','2019-01-10 10:13:17'),(6452,1179,12,'3','3','2','2','2019-01-10 10:13:17'),(6453,1179,13,'12','12','4.5','4.5','2019-01-10 10:13:17'),(6454,1179,14,'27','27','14','12.857142857143','2019-01-10 10:13:17'),(6455,1179,15,'6','6','3.75','3.5','2019-01-10 10:13:17'),(6456,1179,16,'1','2','1','1.3333333333333','2019-01-10 10:13:17'),(6457,1179,17,'0','0','0','0','2019-01-10 10:13:17'),(6458,1179,18,'1','1','1','1','2019-01-10 10:13:17'),(6459,1179,19,'4','4',NULL,NULL,'2019-01-10 10:13:17'),(6460,1180,1,'10','6',NULL,NULL,'2019-01-10 10:13:22'),(6461,1180,2,'1','1',NULL,NULL,'2019-01-10 10:13:22'),(6462,1180,4,NULL,NULL,NULL,NULL,'2019-01-10 10:13:22'),(6463,1180,5,'47','66','19','26','2019-01-10 10:13:22'),(6464,1180,7,'8','8','3.8','5.3333333333333','2019-01-10 10:13:22'),(6465,1180,8,'3','4','2.2','3','2019-01-10 10:13:22'),(6466,1180,9,'4','2','4','2','2019-01-10 10:13:22'),(6467,1180,10,'1','1','1','1','2019-01-10 10:13:22'),(6468,1180,11,'0','0','0','0','2019-01-10 10:13:22'),(6469,1180,12,'0','0','0','0','2019-01-10 10:13:22'),(6470,1180,13,'0','0','0','0','2019-01-10 10:13:23'),(6471,1180,14,'20','21','13.111111111111','11.6','2019-01-10 10:13:23'),(6472,1180,15,'1','1','1','1','2019-01-10 10:13:23'),(6473,1180,16,'2','3','1.1666666666667','2','2019-01-10 10:13:23'),(6474,1180,17,'0','0','0','0','2019-01-10 10:13:23'),(6475,1180,18,'1','1','1','1','2019-01-10 10:13:23'),(6476,1180,19,'4','4',NULL,NULL,'2019-01-10 10:13:23'),(6477,1181,1,'10','18',NULL,NULL,'2019-01-10 10:13:31'),(6478,1181,2,'2','2',NULL,NULL,'2019-01-10 10:13:31'),(6479,1181,4,NULL,NULL,NULL,NULL,'2019-01-10 10:13:31'),(6480,1181,5,'87','49','29','18','2019-01-10 10:13:31'),(6481,1181,7,'10','6','5.5','2.75','2019-01-10 10:13:32'),(6482,1181,8,'9','5','5.3333333333333','2.6666666666667','2019-01-10 10:13:32'),(6483,1181,9,'3','4','3','4','2019-01-10 10:13:32'),(6484,1181,10,'2','2','1.2','1.2','2019-01-10 10:13:32'),(6485,1181,11,'0','0','0','0','2019-01-10 10:13:32'),(6486,1181,12,'3','2','1.8333333333333','1.2222222222222','2019-01-10 10:13:32'),(6487,1181,13,'1','1','1','1','2019-01-10 10:13:32'),(6488,1181,14,'27','50','17.8','30.055555555556','2019-01-10 10:13:32'),(6489,1181,15,'7','4','3','2','2019-01-10 10:13:32'),(6490,1181,16,'1','2','1','1.1538461538462','2019-01-10 10:13:32'),(6491,1181,17,'0','0','0','0','2019-01-10 10:13:32'),(6492,1181,18,'0','0','0','0','2019-01-10 10:13:32'),(6493,1181,19,'2','2',NULL,NULL,'2019-01-10 10:13:32'),(6494,1182,1,'12','16',NULL,NULL,'2019-01-10 10:13:37'),(6495,1182,2,'3','3',NULL,NULL,'2019-01-10 10:13:37'),(6496,1182,4,NULL,NULL,NULL,NULL,'2019-01-10 10:13:37'),(6497,1182,5,'94','82','40','29','2019-01-10 10:13:37'),(6498,1182,7,'6','6','4.5714285714286','3.1','2019-01-10 10:13:37'),(6499,1182,8,'6','6','4.4285714285714','3','2019-01-10 10:13:37'),(6500,1182,9,'2','3','2','3','2019-01-10 10:13:37'),(6501,1182,10,'1','1','1','1','2019-01-10 10:13:37'),(6502,1182,11,'0','0','0','0','2019-01-10 10:13:37'),(6503,1182,12,'3','3','2','1.625','2019-01-10 10:13:37'),(6504,1182,13,'1','1','1','1','2019-01-10 10:13:38'),(6505,1182,14,'32','47','18.454545454545','26.8','2019-01-10 10:13:38'),(6506,1182,15,'3','3','2.1428571428571','1.875','2019-01-10 10:13:38'),(6507,1182,16,'4','3','1.375','1.3333333333333','2019-01-10 10:13:38'),(6508,1182,17,'1','1','1','1','2019-01-10 10:13:38'),(6509,1182,18,'1','1','1','1','2019-01-10 10:13:38'),(6510,1182,19,'4','4',NULL,NULL,'2019-01-10 10:13:38'),(6511,1183,1,'12','15',NULL,NULL,'2019-01-10 10:13:42'),(6512,1183,2,'3','2',NULL,NULL,'2019-01-10 10:13:42'),(6513,1183,4,NULL,NULL,NULL,NULL,'2019-01-10 10:13:42'),(6514,1183,5,'60','73','30','26','2019-01-10 10:13:42'),(6515,1183,7,'4','6','3.1428571428571','2.4','2019-01-10 10:13:42'),(6516,1183,8,'4','5','3.1428571428571','2.3','2019-01-10 10:13:42'),(6517,1183,9,'5','5','5','5','2019-01-10 10:13:42'),(6518,1183,10,'0','0','0','0','2019-01-10 10:13:42'),(6519,1183,11,'0','0','0','0','2019-01-10 10:13:42'),(6520,1183,12,'2','3','2','1.75','2019-01-10 10:13:43'),(6521,1183,13,'1','1','1','1','2019-01-10 10:13:43'),(6522,1183,14,'69','38','26.545454545455','22.785714285714','2019-01-10 10:13:43'),(6523,1183,15,'3','3','1.6','1.5','2019-01-10 10:13:43'),(6524,1183,16,'1','2','1','1.1666666666667','2019-01-10 10:13:43'),(6525,1183,17,'0','0','0','0','2019-01-10 10:13:43'),(6526,1183,18,'1','1','1','1','2019-01-10 10:13:43'),(6527,1183,19,'4','4',NULL,NULL,'2019-01-10 10:13:43'),(6528,1184,1,'19','26',NULL,NULL,'2019-01-10 10:13:47'),(6529,1184,2,'4','4',NULL,NULL,'2019-01-10 10:13:47'),(6530,1184,4,NULL,NULL,NULL,NULL,'2019-01-10 10:13:47'),(6531,1184,5,'121','98','40','29','2019-01-10 10:13:47'),(6532,1184,7,'10','7','4.3076923076923','2.75','2019-01-10 10:13:47'),(6533,1184,8,'7','6','4','2.7','2019-01-10 10:13:47'),(6534,1184,9,'7','8','7','8','2019-01-10 10:13:47'),(6535,1184,10,'0','0','0','0','2019-01-10 10:13:48'),(6536,1184,11,'0','0','0','0','2019-01-10 10:13:48'),(6537,1184,12,'3','3','1.7142857142857','1.3','2019-01-10 10:13:48'),(6538,1184,13,'3','1','1.5','1','2019-01-10 10:13:48'),(6539,1184,14,'33','50','17.888888888889','26.12','2019-01-10 10:13:48'),(6540,1184,15,'4','3','1.6666666666667','1.3333333333333','2019-01-10 10:13:48'),(6541,1184,16,'1','2','1','1.0625','2019-01-10 10:13:48'),(6542,1184,17,'2','2','2','2','2019-01-10 10:13:48'),(6543,1184,18,'1','1','1','1','2019-01-10 10:13:48'),(6544,1184,19,'3','3',NULL,NULL,'2019-01-10 10:13:48'),(6545,1185,1,'10','9',NULL,NULL,'2019-01-10 10:14:11'),(6546,1185,2,'2','2',NULL,NULL,'2019-01-10 10:14:11'),(6547,1185,4,NULL,NULL,NULL,NULL,'2019-01-10 10:14:11'),(6548,1185,5,'61','117','32','37','2019-01-10 10:14:11'),(6549,1185,7,'5','8','3.3333333333333','4','2019-01-10 10:14:11'),(6550,1185,8,'5','7','3.3333333333333','3.8','2019-01-10 10:14:11'),(6551,1185,9,'4','5','4','5','2019-01-10 10:14:11'),(6552,1185,10,'0','0','0','0','2019-01-10 10:14:11'),(6553,1185,11,'0','0','0','0','2019-01-10 10:14:11'),(6554,1185,12,'1','4','1','2.5','2019-01-10 10:14:11'),(6555,1185,13,'0','0','0','0','2019-01-10 10:14:11'),(6556,1185,14,'15','30','8.6666666666667','12.5','2019-01-10 10:14:11'),(6557,1185,15,'1','4','1','1.6','2019-01-10 10:14:11'),(6558,1185,16,'1','3','1','1.5','2019-01-10 10:14:11'),(6559,1185,17,'0','0','0','0','2019-01-10 10:14:11'),(6560,1185,18,'1','1','1','1','2019-01-10 10:14:12'),(6561,1185,19,'4','4',NULL,NULL,'2019-01-10 10:14:12'),(6562,1186,1,'13','13',NULL,NULL,'2019-01-10 10:14:16'),(6563,1186,2,'2','2',NULL,NULL,'2019-01-10 10:14:16'),(6564,1186,4,NULL,NULL,NULL,NULL,'2019-01-10 10:14:16'),(6565,1186,5,'87','87','41','40','2019-01-10 10:14:16'),(6566,1186,7,'5','5','3.8333333333333','3.6666666666667','2019-01-10 10:14:16'),(6567,1186,8,'5','5','3.8333333333333','3.6666666666667','2019-01-10 10:14:17'),(6568,1186,9,'5','6','5','6','2019-01-10 10:14:17'),(6569,1186,10,'0','0','0','0','2019-01-10 10:14:17'),(6570,1186,11,'0','0','0','0','2019-01-10 10:14:17'),(6571,1186,12,'1','1','1','1','2019-01-10 10:14:17'),(6572,1186,13,'0','0','0','0','2019-01-10 10:14:17'),(6573,1186,14,'23','26','11.727272727273','13.272727272727','2019-01-10 10:14:17'),(6574,1186,15,'2','2','1.3333333333333','1.3333333333333','2019-01-10 10:14:17'),(6575,1186,16,'1','2','1','1.1666666666667','2019-01-10 10:14:17'),(6576,1186,17,'0','0','0','0','2019-01-10 10:14:17'),(6577,1186,18,'1','1','1','1','2019-01-10 10:14:17'),(6578,1186,19,'6','6',NULL,NULL,'2019-01-10 10:14:17'),(6579,1187,1,'10','9',NULL,NULL,'2019-01-10 10:14:22'),(6580,1187,2,'2','2',NULL,NULL,'2019-01-10 10:14:22'),(6581,1187,4,NULL,NULL,NULL,NULL,'2019-01-10 10:14:22'),(6582,1187,5,'87','135','33','38','2019-01-10 10:14:22'),(6583,1187,7,'8','11','4.2857142857143','5','2019-01-10 10:14:22'),(6584,1187,8,'7','9','4','4.5','2019-01-10 10:14:22'),(6585,1187,9,'4','5','4','5','2019-01-10 10:14:22'),(6586,1187,10,'0','0','0','0','2019-01-10 10:14:22'),(6587,1187,11,'0','0','0','0','2019-01-10 10:14:22'),(6588,1187,12,'2','5','1.3333333333333','2.3333333333333','2019-01-10 10:14:22'),(6589,1187,13,'1','1','1','1','2019-01-10 10:14:23'),(6590,1187,14,'26','23','15.4','14.222222222222','2019-01-10 10:14:23'),(6591,1187,15,'3','6','1.2857142857143','1.8333333333333','2019-01-10 10:14:23'),(6592,1187,16,'1','3','1','1.6666666666667','2019-01-10 10:14:23'),(6593,1187,17,'0','0','0','0','2019-01-10 10:14:23'),(6594,1187,18,'1','1','1','1','2019-01-10 10:14:23'),(6595,1187,19,'2','2',NULL,NULL,'2019-01-10 10:14:23'),(6596,1188,1,'9','9',NULL,NULL,'2019-01-10 10:14:27'),(6597,1188,2,'2','2',NULL,NULL,'2019-01-10 10:14:27'),(6598,1188,4,NULL,NULL,NULL,NULL,'2019-01-10 10:14:27'),(6599,1188,5,'141','141','55','55','2019-01-10 10:14:27'),(6600,1188,7,'13','13','6.3333333333333','6.1666666666667','2019-01-10 10:14:27'),(6601,1188,8,'9','9','5.1666666666667','5','2019-01-10 10:14:27'),(6602,1188,9,'5','6','5','6','2019-01-10 10:14:27'),(6603,1188,10,'0','0','0','0','2019-01-10 10:14:27'),(6604,1188,11,'0','0','0','0','2019-01-10 10:14:28'),(6605,1188,12,'7','7','3.3333333333333','2.75','2019-01-10 10:14:28'),(6606,1188,13,'1','1','1','1','2019-01-10 10:14:28'),(6607,1188,14,'27','24','17.666666666667','17.333333333333','2019-01-10 10:14:28'),(6608,1188,15,'8','8','2.3333333333333','2.3333333333333','2019-01-10 10:14:28'),(6609,1188,16,'1','2','1','1.3333333333333','2019-01-10 10:14:28'),(6610,1188,17,'0','0','0','0','2019-01-10 10:14:28'),(6611,1188,18,'1','1','1','1','2019-01-10 10:14:28'),(6612,1188,19,'2','2',NULL,NULL,'2019-01-10 10:14:28'),(6613,1189,1,'9','9',NULL,NULL,'2019-01-10 10:14:33'),(6614,1189,2,'2','2',NULL,NULL,'2019-01-10 10:14:33'),(6615,1189,4,NULL,NULL,NULL,NULL,'2019-01-10 10:14:33'),(6616,1189,5,'69','69','23','23','2019-01-10 10:14:33'),(6617,1189,7,'4','4','3.1666666666667','3','2019-01-10 10:14:33'),(6618,1189,8,'4','4','3','2.8333333333333','2019-01-10 10:14:33'),(6619,1189,9,'4','5','4','5','2019-01-10 10:14:33'),(6620,1189,10,'0','0','0','0','2019-01-10 10:14:33'),(6621,1189,11,'0','0','0','0','2019-01-10 10:14:33'),(6622,1189,12,'1','1','1','1','2019-01-10 10:14:33'),(6623,1189,13,'1','1','1','1','2019-01-10 10:14:33'),(6624,1189,14,'15','12','7.3333333333333','7','2019-01-10 10:14:34'),(6625,1189,15,'1','1','1','1','2019-01-10 10:14:34'),(6626,1189,16,'1','2','1','1.3333333333333','2019-01-10 10:14:34'),(6627,1189,17,'0','0','0','0','2019-01-10 10:14:34'),(6628,1189,18,'1','1','1','1','2019-01-10 10:14:34'),(6629,1189,19,'2','2',NULL,NULL,'2019-01-10 10:14:34'),(6630,1190,1,'8','8',NULL,NULL,'2019-01-10 10:14:39'),(6631,1190,2,'2','2',NULL,NULL,'2019-01-10 10:14:39'),(6632,1190,4,NULL,NULL,NULL,NULL,'2019-01-10 10:14:39'),(6633,1190,5,'109','109','37','37','2019-01-10 10:14:39'),(6634,1190,7,'8','8','5','4.8','2019-01-10 10:14:39'),(6635,1190,8,'7','7','4.6','4.4','2019-01-10 10:14:39'),(6636,1190,9,'4','5','4','5','2019-01-10 10:14:39'),(6637,1190,10,'0','0','0','0','2019-01-10 10:14:39'),(6638,1190,11,'0','0','0','0','2019-01-10 10:14:39'),(6639,1190,12,'2','2','1.5','1.3333333333333','2019-01-10 10:14:39'),(6640,1190,13,'2','2','2','2','2019-01-10 10:14:39'),(6641,1190,14,'24','13','10.75','8.875','2019-01-10 10:14:39'),(6642,1190,15,'2','2','1.25','1.25','2019-01-10 10:14:39'),(6643,1190,16,'4','4','1.6','1.8','2019-01-10 10:14:39'),(6644,1190,17,'0','0','0','0','2019-01-10 10:14:39'),(6645,1190,18,'0','0','0','0','2019-01-10 10:14:39'),(6646,1190,19,'2','2',NULL,NULL,'2019-01-10 10:14:39'),(6647,1191,1,'20','16',NULL,NULL,'2019-01-10 10:14:44'),(6648,1191,2,'3','3',NULL,NULL,'2019-01-10 10:14:44'),(6649,1191,4,NULL,NULL,NULL,NULL,'2019-01-10 10:14:44'),(6650,1191,5,'323','45','44','20','2019-01-10 10:14:44'),(6651,1191,7,'23','5','6.8333333333333','3.375','2019-01-10 10:14:44'),(6652,1191,8,'21','4','6.3333333333333','3','2019-01-10 10:14:44'),(6653,1191,9,'7','7','7','7','2019-01-10 10:14:44'),(6654,1191,10,'1','1','1','1','2019-01-10 10:14:44'),(6655,1191,11,'3','1','1.4','1','2019-01-10 10:14:44'),(6656,1191,12,'7','3','2.5','1.6','2019-01-10 10:14:44'),(6657,1191,13,'1','0','1','0','2019-01-10 10:14:44'),(6658,1191,14,'29','12','10.111111111111','6.9285714285714','2019-01-10 10:14:44'),(6659,1191,15,'3','3','1.5714285714286','1.5714285714286','2019-01-10 10:14:44'),(6660,1191,16,'16','2','3.2','1.3333333333333','2019-01-10 10:14:45'),(6661,1191,17,'1','1','1','1','2019-01-10 10:14:45'),(6662,1191,18,'1','1','1','1','2019-01-10 10:14:45'),(6663,1191,19,'5','5',NULL,NULL,'2019-01-10 10:14:45'),(6664,1192,1,'16','11',NULL,NULL,'2019-01-10 10:14:50'),(6665,1192,2,'3','2',NULL,NULL,'2019-01-10 10:14:50'),(6666,1192,4,NULL,NULL,NULL,NULL,'2019-01-10 10:14:50'),(6667,1192,5,'101','163','33','52','2019-01-10 10:14:50'),(6668,1192,7,'7','12','4.3333333333333','5.8571428571429','2019-01-10 10:14:50'),(6669,1192,8,'6','9','4.1111111111111','5.1428571428571','2019-01-10 10:14:50'),(6670,1192,9,'7','7','7','7','2019-01-10 10:14:50'),(6671,1192,10,'0','0','0','0','2019-01-10 10:14:50'),(6672,1192,11,'0','0','0','0','2019-01-10 10:14:50'),(6673,1192,12,'3','4','1.4','1.8333333333333','2019-01-10 10:14:50'),(6674,1192,13,'2','2','1.6666666666667','1.6666666666667','2019-01-10 10:14:50'),(6675,1192,14,'17','20','9.2666666666667','8.9','2019-01-10 10:14:50'),(6676,1192,15,'3','5','1.3333333333333','2','2019-01-10 10:14:51'),(6677,1192,16,'1','4','1','1.75','2019-01-10 10:14:51'),(6678,1192,17,'2','2','2','2','2019-01-10 10:14:51'),(6679,1192,18,'1','1','1','1','2019-01-10 10:14:51'),(6680,1192,19,'4','4',NULL,NULL,'2019-01-10 10:14:51'),(6681,1193,1,'9','9',NULL,NULL,'2019-01-10 10:14:56'),(6682,1193,2,'2','2',NULL,NULL,'2019-01-10 10:14:56'),(6683,1193,4,NULL,NULL,NULL,NULL,'2019-01-10 10:14:56'),(6684,1193,5,'55','55','25','25','2019-01-10 10:14:56'),(6685,1193,7,'5','5','3.6666666666667','3.5','2019-01-10 10:14:56'),(6686,1193,8,'4','4','3.3333333333333','3.1666666666667','2019-01-10 10:14:56'),(6687,1193,9,'5','6','5','6','2019-01-10 10:14:56'),(6688,1193,10,'0','0','0','0','2019-01-10 10:14:56'),(6689,1193,11,'0','0','0','0','2019-01-10 10:14:56'),(6690,1193,12,'2','2','1.5','1.3333333333333','2019-01-10 10:14:56'),(6691,1193,13,'0','0','0','0','2019-01-10 10:14:57'),(6692,1193,14,'23','20','14.111111111111','13.777777777778','2019-01-10 10:14:57'),(6693,1193,15,'2','2','1.3333333333333','1.3333333333333','2019-01-10 10:14:57'),(6694,1193,16,'1','2','1','1.3333333333333','2019-01-10 10:14:57'),(6695,1193,17,'0','0','0','0','2019-01-10 10:14:57'),(6696,1193,18,'1','1','1','1','2019-01-10 10:14:57'),(6697,1193,19,'2','2',NULL,NULL,'2019-01-10 10:14:57'),(6698,1194,1,'7','7',NULL,NULL,'2019-01-10 10:15:02'),(6699,1194,2,'2','2',NULL,NULL,'2019-01-10 10:15:02'),(6700,1194,4,NULL,NULL,NULL,NULL,'2019-01-10 10:15:02'),(6701,1194,5,'51','51','21','20','2019-01-10 10:15:02'),(6702,1194,7,'5','5','3.4','3.2','2019-01-10 10:15:02'),(6703,1194,8,'5','5','3.4','3.2','2019-01-10 10:15:02'),(6704,1194,9,'5','6','5','6','2019-01-10 10:15:02'),(6705,1194,10,'0','0','0','0','2019-01-10 10:15:02'),(6706,1194,11,'0','0','0','0','2019-01-10 10:15:02'),(6707,1194,12,'1','1','1','1','2019-01-10 10:15:02'),(6708,1194,13,'0','0','0','0','2019-01-10 10:15:02'),(6709,1194,14,'23','20','12.875','12.5','2019-01-10 10:15:02'),(6710,1194,15,'2','2','1.5','1.5','2019-01-10 10:15:02'),(6711,1194,16,'1','2','1','1.3333333333333','2019-01-10 10:15:02'),(6712,1194,17,'0','0','0','0','2019-01-10 10:15:03'),(6713,1194,18,'1','1','1','1','2019-01-10 10:15:03'),(6714,1194,19,'2','2',NULL,NULL,'2019-01-10 10:15:03'),(6715,1015,20,'3','3',NULL,NULL,'2019-02-17 19:39:50'),(6716,1015,21,'6','6',NULL,NULL,'2019-02-17 19:39:51'),(6717,1015,22,'3','3',NULL,NULL,'2019-02-17 19:39:51'),(6718,1015,23,'6','6',NULL,NULL,'2019-02-17 19:39:51'),(6719,1016,20,'0','0',NULL,NULL,'2019-02-17 19:39:52'),(6720,1016,21,'0','0',NULL,NULL,'2019-02-17 19:39:52'),(6721,1016,22,'0','0',NULL,NULL,'2019-02-17 19:39:52'),(6722,1016,23,'0','0',NULL,NULL,'2019-02-17 19:39:52'),(6723,1017,20,'1','1',NULL,NULL,'2019-02-17 19:39:53'),(6724,1017,21,'2','2',NULL,NULL,'2019-02-17 19:39:53'),(6725,1017,22,'1','1',NULL,NULL,'2019-02-17 19:39:53'),(6726,1017,23,'2','2',NULL,NULL,'2019-02-17 19:39:53'),(6727,1018,20,'1','1',NULL,NULL,'2019-02-17 19:39:54'),(6728,1018,21,'2','2',NULL,NULL,'2019-02-17 19:39:54'),(6729,1018,22,'1','1',NULL,NULL,'2019-02-17 19:39:54'),(6730,1018,23,'2','2',NULL,NULL,'2019-02-17 19:39:54'),(6731,1019,20,'2','5',NULL,NULL,'2019-02-17 19:39:55'),(6732,1019,21,'9','18',NULL,NULL,'2019-02-17 19:39:55'),(6733,1019,22,'6','11',NULL,NULL,'2019-02-17 19:39:55'),(6734,1019,23,'10','20',NULL,NULL,'2019-02-17 19:39:55'),(6735,1020,20,'3','3',NULL,NULL,'2019-02-17 19:39:56'),(6736,1020,21,'6','6',NULL,NULL,'2019-02-17 19:39:56'),(6737,1020,22,'3','3',NULL,NULL,'2019-02-17 19:39:56'),(6738,1020,23,'6','6',NULL,NULL,'2019-02-17 19:39:56'),(6739,1021,20,'0','0',NULL,NULL,'2019-02-17 19:39:58'),(6740,1021,21,'0','0',NULL,NULL,'2019-02-17 19:39:58'),(6741,1021,22,'0','0',NULL,NULL,'2019-02-17 19:39:58'),(6742,1021,23,'0','0',NULL,NULL,'2019-02-17 19:39:58'),(6743,1022,20,'3','1',NULL,NULL,'2019-02-17 19:39:59'),(6744,1022,21,'10','6',NULL,NULL,'2019-02-17 19:39:59'),(6745,1022,22,'5','3',NULL,NULL,'2019-02-17 19:39:59'),(6746,1022,23,'10','6',NULL,NULL,'2019-02-17 19:39:59'),(6747,1023,20,'0','0',NULL,NULL,'2019-02-17 19:40:00'),(6748,1023,21,'0','0',NULL,NULL,'2019-02-17 19:40:00'),(6749,1023,22,'0','0',NULL,NULL,'2019-02-17 19:40:00'),(6750,1023,23,'0','0',NULL,NULL,'2019-02-17 19:40:00'),(6751,1024,20,'1','1',NULL,NULL,'2019-02-17 19:40:01'),(6752,1024,21,'4','4',NULL,NULL,'2019-02-17 19:40:01'),(6753,1024,22,'2','2',NULL,NULL,'2019-02-17 19:40:01'),(6754,1024,23,'4','4',NULL,NULL,'2019-02-17 19:40:01'),(6755,1025,20,'1','2',NULL,NULL,'2019-02-17 19:40:02'),(6756,1025,21,'2','3',NULL,NULL,'2019-02-17 19:40:02'),(6757,1025,22,'1','3',NULL,NULL,'2019-02-17 19:40:02'),(6758,1025,23,'2','5',NULL,NULL,'2019-02-17 19:40:02'),(6759,1026,20,'2','2',NULL,NULL,'2019-02-17 19:40:03'),(6760,1026,21,'4','4',NULL,NULL,'2019-02-17 19:40:03'),(6761,1026,22,'2','2',NULL,NULL,'2019-02-17 19:40:03'),(6762,1026,23,'4','4',NULL,NULL,'2019-02-17 19:40:03'),(6763,1027,20,'4','4',NULL,NULL,'2019-02-17 19:40:04'),(6764,1027,21,'8','8',NULL,NULL,'2019-02-17 19:40:04'),(6765,1027,22,'4','4',NULL,NULL,'2019-02-17 19:40:04'),(6766,1027,23,'8','8',NULL,NULL,'2019-02-17 19:40:04'),(6767,1028,20,'1','1',NULL,NULL,'2019-02-17 19:40:05'),(6768,1028,21,'2','2',NULL,NULL,'2019-02-17 19:40:05'),(6769,1028,22,'1','1',NULL,NULL,'2019-02-17 19:40:05'),(6770,1028,23,'2','2',NULL,NULL,'2019-02-17 19:40:05'),(6771,1029,20,'2','2',NULL,NULL,'2019-02-17 19:40:06'),(6772,1029,21,'4','4',NULL,NULL,'2019-02-17 19:40:06'),(6773,1029,22,'2','2',NULL,NULL,'2019-02-17 19:40:06'),(6774,1029,23,'4','4',NULL,NULL,'2019-02-17 19:40:06'),(6775,1030,20,'0','3',NULL,NULL,'2019-02-17 19:40:07'),(6776,1030,21,'0','17',NULL,NULL,'2019-02-17 19:40:07'),(6777,1030,22,'0','10',NULL,NULL,'2019-02-17 19:40:08'),(6778,1030,23,'0','20',NULL,NULL,'2019-02-17 19:40:08'),(6779,1031,20,'2','2',NULL,NULL,'2019-02-17 19:40:09'),(6780,1031,21,'4','4',NULL,NULL,'2019-02-17 19:40:09'),(6781,1031,22,'2','2',NULL,NULL,'2019-02-17 19:40:09'),(6782,1031,23,'4','4',NULL,NULL,'2019-02-17 19:40:09'),(6783,1032,20,'3','4',NULL,NULL,'2019-02-17 19:40:10'),(6784,1032,21,'9','8',NULL,NULL,'2019-02-17 19:40:10'),(6785,1032,22,'7','4',NULL,NULL,'2019-02-17 19:40:10'),(6786,1032,23,'14','8',NULL,NULL,'2019-02-17 19:40:10'),(6787,1033,20,'1','1',NULL,NULL,'2019-02-17 19:40:12'),(6788,1033,21,'2','2',NULL,NULL,'2019-02-17 19:40:12'),(6789,1033,22,'1','1',NULL,NULL,'2019-02-17 19:40:12'),(6790,1033,23,'2','2',NULL,NULL,'2019-02-17 19:40:12'),(6791,1034,20,'3','3',NULL,NULL,'2019-02-17 19:40:14'),(6792,1034,21,'6','6',NULL,NULL,'2019-02-17 19:40:14'),(6793,1034,22,'3','3',NULL,NULL,'2019-02-17 19:40:14'),(6794,1034,23,'6','6',NULL,NULL,'2019-02-17 19:40:14'),(6795,1035,20,'2','2',NULL,NULL,'2019-02-17 19:40:15'),(6796,1035,21,'8','9',NULL,NULL,'2019-02-17 19:40:15'),(6797,1035,22,'5','7',NULL,NULL,'2019-02-17 19:40:15'),(6798,1035,23,'8','11',NULL,NULL,'2019-02-17 19:40:15'),(6799,1036,20,'0','1',NULL,NULL,'2019-02-17 19:40:17'),(6800,1036,21,'0','2',NULL,NULL,'2019-02-17 19:40:17'),(6801,1036,22,'0','1',NULL,NULL,'2019-02-17 19:40:17'),(6802,1036,23,'0','2',NULL,NULL,'2019-02-17 19:40:17'),(6803,1037,20,'0','1',NULL,NULL,'2019-02-17 19:40:18'),(6804,1037,21,'0','3',NULL,NULL,'2019-02-17 19:40:18'),(6805,1037,22,'0','2',NULL,NULL,'2019-02-17 19:40:18'),(6806,1037,23,'0','3',NULL,NULL,'2019-02-17 19:40:18'),(6807,1038,20,'1','1',NULL,NULL,'2019-02-17 19:40:19'),(6808,1038,21,'2','2',NULL,NULL,'2019-02-17 19:40:19'),(6809,1038,22,'1','1',NULL,NULL,'2019-02-17 19:40:19'),(6810,1038,23,'2','2',NULL,NULL,'2019-02-17 19:40:19'),(6811,1039,20,'1','2',NULL,NULL,'2019-02-17 19:40:20'),(6812,1039,21,'2','11',NULL,NULL,'2019-02-17 19:40:20'),(6813,1039,22,'1','6',NULL,NULL,'2019-02-17 19:40:20'),(6814,1039,23,'2','12',NULL,NULL,'2019-02-17 19:40:20'),(6815,1040,20,'1','0',NULL,NULL,'2019-02-17 19:40:21'),(6816,1040,21,'2','0',NULL,NULL,'2019-02-17 19:40:21'),(6817,1040,22,'1','0',NULL,NULL,'2019-02-17 19:40:21'),(6818,1040,23,'2','0',NULL,NULL,'2019-02-17 19:40:21'),(6819,1041,20,'1','1',NULL,NULL,'2019-02-17 19:40:22'),(6820,1041,21,'6','6',NULL,NULL,'2019-02-17 19:40:23'),(6821,1041,22,'3','3',NULL,NULL,'2019-02-17 19:40:23'),(6822,1041,23,'6','6',NULL,NULL,'2019-02-17 19:40:23'),(6823,1042,20,'1','1',NULL,NULL,'2019-02-17 19:40:24'),(6824,1042,21,'2','2',NULL,NULL,'2019-02-17 19:40:24'),(6825,1042,22,'1','1',NULL,NULL,'2019-02-17 19:40:24'),(6826,1042,23,'2','2',NULL,NULL,'2019-02-17 19:40:24'),(6827,1043,20,'2','1',NULL,NULL,'2019-02-17 19:40:25'),(6828,1043,21,'2','2',NULL,NULL,'2019-02-17 19:40:25'),(6829,1043,22,'2','1',NULL,NULL,'2019-02-17 19:40:25'),(6830,1043,23,'4','2',NULL,NULL,'2019-02-17 19:40:25'),(6831,1044,20,'1','1',NULL,NULL,'2019-02-17 19:40:26'),(6832,1044,21,'6','4',NULL,NULL,'2019-02-17 19:40:26'),(6833,1044,22,'3','2',NULL,NULL,'2019-02-17 19:40:26'),(6834,1044,23,'6','4',NULL,NULL,'2019-02-17 19:40:26'),(6835,1045,20,'1','1',NULL,NULL,'2019-02-17 19:40:28'),(6836,1045,21,'2','2',NULL,NULL,'2019-02-17 19:40:28'),(6837,1045,22,'1','1',NULL,NULL,'2019-02-17 19:40:28'),(6838,1045,23,'2','2',NULL,NULL,'2019-02-17 19:40:28'),(6839,1046,20,'3','3',NULL,NULL,'2019-02-17 19:40:29'),(6840,1046,21,'9','6',NULL,NULL,'2019-02-17 19:40:30'),(6841,1046,22,'5','3',NULL,NULL,'2019-02-17 19:40:30'),(6842,1046,23,'9','6',NULL,NULL,'2019-02-17 19:40:30'),(6843,1047,20,'0','0',NULL,NULL,'2019-02-17 19:40:32'),(6844,1047,21,'0','0',NULL,NULL,'2019-02-17 19:40:32'),(6845,1047,22,'0','0',NULL,NULL,'2019-02-17 19:40:32'),(6846,1047,23,'0','0',NULL,NULL,'2019-02-17 19:40:32'),(6847,1048,20,'1','1',NULL,NULL,'2019-02-17 19:40:34'),(6848,1048,21,'2','2',NULL,NULL,'2019-02-17 19:40:34'),(6849,1048,22,'1','1',NULL,NULL,'2019-02-17 19:40:34'),(6850,1048,23,'2','2',NULL,NULL,'2019-02-17 19:40:34'),(6851,1049,20,'0','0',NULL,NULL,'2019-02-17 19:40:36'),(6852,1049,21,'0','0',NULL,NULL,'2019-02-17 19:40:36'),(6853,1049,22,'0','0',NULL,NULL,'2019-02-17 19:40:36'),(6854,1049,23,'0','0',NULL,NULL,'2019-02-17 19:40:36'),(6855,1050,20,'0','0',NULL,NULL,'2019-02-17 19:40:39'),(6856,1050,21,'0','0',NULL,NULL,'2019-02-17 19:40:39'),(6857,1050,22,'0','0',NULL,NULL,'2019-02-17 19:40:39'),(6858,1050,23,'0','0',NULL,NULL,'2019-02-17 19:40:39'),(6859,1051,20,'2','2',NULL,NULL,'2019-02-17 19:40:40'),(6860,1051,21,'10','10',NULL,NULL,'2019-02-17 19:40:41'),(6861,1051,22,'5','5',NULL,NULL,'2019-02-17 19:40:41'),(6862,1051,23,'10','10',NULL,NULL,'2019-02-17 19:40:41'),(6863,1052,20,'2','0',NULL,NULL,'2019-02-17 19:40:42'),(6864,1052,21,'4','0',NULL,NULL,'2019-02-17 19:40:43'),(6865,1052,22,'2','0',NULL,NULL,'2019-02-17 19:40:43'),(6866,1052,23,'4','0',NULL,NULL,'2019-02-17 19:40:43'),(6867,1053,20,'2','1',NULL,NULL,'2019-02-17 19:40:44'),(6868,1053,21,'3','2',NULL,NULL,'2019-02-17 19:40:45'),(6869,1053,22,'2','1',NULL,NULL,'2019-02-17 19:40:45'),(6870,1053,23,'4','2',NULL,NULL,'2019-02-17 19:40:45'),(6871,1054,20,'6','2',NULL,NULL,'2019-02-17 19:40:46'),(6872,1054,21,'11','4',NULL,NULL,'2019-02-17 19:40:46'),(6873,1054,22,'8','2',NULL,NULL,'2019-02-17 19:40:46'),(6874,1054,23,'14','4',NULL,NULL,'2019-02-17 19:40:46'),(6875,1055,20,'5','3',NULL,NULL,'2019-02-17 19:40:47'),(6876,1055,21,'11','8',NULL,NULL,'2019-02-17 19:40:47'),(6877,1055,22,'7','4',NULL,NULL,'2019-02-17 19:40:47'),(6878,1055,23,'14','8',NULL,NULL,'2019-02-17 19:40:47'),(6879,1056,20,'2','3',NULL,NULL,'2019-02-17 19:40:48'),(6880,1056,21,'3','7',NULL,NULL,'2019-02-17 19:40:48'),(6881,1056,22,'2','4',NULL,NULL,'2019-02-17 19:40:49'),(6882,1056,23,'4','7',NULL,NULL,'2019-02-17 19:40:49'),(6883,1057,20,'0','3',NULL,NULL,'2019-02-17 19:40:50'),(6884,1057,21,'0','7',NULL,NULL,'2019-02-17 19:40:50'),(6885,1057,22,'0','4',NULL,NULL,'2019-02-17 19:40:50'),(6886,1057,23,'0','7',NULL,NULL,'2019-02-17 19:40:50'),(6887,1058,20,'0','0',NULL,NULL,'2019-02-17 19:40:51'),(6888,1058,21,'0','0',NULL,NULL,'2019-02-17 19:40:51'),(6889,1058,22,'0','0',NULL,NULL,'2019-02-17 19:40:51'),(6890,1058,23,'0','0',NULL,NULL,'2019-02-17 19:40:51'),(6891,1059,20,'3','3',NULL,NULL,'2019-02-17 19:40:52'),(6892,1059,21,'8','8',NULL,NULL,'2019-02-17 19:40:53'),(6893,1059,22,'5','5',NULL,NULL,'2019-02-17 19:40:53'),(6894,1059,23,'8','8',NULL,NULL,'2019-02-17 19:40:53'),(6895,1060,20,'2','1',NULL,NULL,'2019-02-17 19:40:54'),(6896,1060,21,'4','2',NULL,NULL,'2019-02-17 19:40:54'),(6897,1060,22,'2','1',NULL,NULL,'2019-02-17 19:40:54'),(6898,1060,23,'4','2',NULL,NULL,'2019-02-17 19:40:54'),(6899,1061,20,'2','1',NULL,NULL,'2019-02-17 19:40:55'),(6900,1061,21,'4','2',NULL,NULL,'2019-02-17 19:40:55'),(6901,1061,22,'2','1',NULL,NULL,'2019-02-17 19:40:55'),(6902,1061,23,'4','2',NULL,NULL,'2019-02-17 19:40:55'),(6903,1062,20,'2','1',NULL,NULL,'2019-02-17 19:40:56'),(6904,1062,21,'4','2',NULL,NULL,'2019-02-17 19:40:57'),(6905,1062,22,'2','1',NULL,NULL,'2019-02-17 19:40:57'),(6906,1062,23,'4','2',NULL,NULL,'2019-02-17 19:40:57'),(6907,1063,20,'0','0',NULL,NULL,'2019-02-17 19:40:58'),(6908,1063,21,'0','0',NULL,NULL,'2019-02-17 19:40:58'),(6909,1063,22,'0','0',NULL,NULL,'2019-02-17 19:40:58'),(6910,1063,23,'0','0',NULL,NULL,'2019-02-17 19:40:58'),(6911,1064,20,'1','1',NULL,NULL,'2019-02-17 19:40:59'),(6912,1064,21,'2','2',NULL,NULL,'2019-02-17 19:40:59'),(6913,1064,22,'1','1',NULL,NULL,'2019-02-17 19:41:00'),(6914,1064,23,'2','2',NULL,NULL,'2019-02-17 19:41:00'),(6915,1065,20,'1','1',NULL,NULL,'2019-02-17 19:41:01'),(6916,1065,21,'2','2',NULL,NULL,'2019-02-17 19:41:01'),(6917,1065,22,'1','1',NULL,NULL,'2019-02-17 19:41:01'),(6918,1065,23,'2','2',NULL,NULL,'2019-02-17 19:41:01'),(6919,1066,20,'1','0',NULL,NULL,'2019-02-17 19:41:02'),(6920,1066,21,'2','0',NULL,NULL,'2019-02-17 19:41:02'),(6921,1066,22,'1','0',NULL,NULL,'2019-02-17 19:41:02'),(6922,1066,23,'2','0',NULL,NULL,'2019-02-17 19:41:02'),(6923,1067,20,'1','0',NULL,NULL,'2019-02-17 19:41:04'),(6924,1067,21,'2','0',NULL,NULL,'2019-02-17 19:41:04'),(6925,1067,22,'1','0',NULL,NULL,'2019-02-17 19:41:04'),(6926,1067,23,'2','0',NULL,NULL,'2019-02-17 19:41:04'),(6927,1068,20,'1','0',NULL,NULL,'2019-02-17 19:41:06'),(6928,1068,21,'2','0',NULL,NULL,'2019-02-17 19:41:06'),(6929,1068,22,'2','0',NULL,NULL,'2019-02-17 19:41:06'),(6930,1068,23,'3','0',NULL,NULL,'2019-02-17 19:41:06'),(6931,1069,20,'1','0',NULL,NULL,'2019-02-17 19:41:08'),(6932,1069,21,'10','0',NULL,NULL,'2019-02-17 19:41:08'),(6933,1069,22,'5','0',NULL,NULL,'2019-02-17 19:41:08'),(6934,1069,23,'10','0',NULL,NULL,'2019-02-17 19:41:08'),(6935,1070,20,'0','0',NULL,NULL,'2019-02-17 19:41:10'),(6936,1070,21,'0','0',NULL,NULL,'2019-02-17 19:41:10'),(6937,1070,22,'0','0',NULL,NULL,'2019-02-17 19:41:10'),(6938,1070,23,'0','0',NULL,NULL,'2019-02-17 19:41:10'),(6939,1071,20,'1','1',NULL,NULL,'2019-02-17 19:41:12'),(6940,1071,21,'2','2',NULL,NULL,'2019-02-17 19:41:12'),(6941,1071,22,'1','1',NULL,NULL,'2019-02-17 19:41:12'),(6942,1071,23,'2','2',NULL,NULL,'2019-02-17 19:41:12'),(6943,1072,20,'1','1',NULL,NULL,'2019-02-17 19:41:14'),(6944,1072,21,'2','2',NULL,NULL,'2019-02-17 19:41:14'),(6945,1072,22,'1','1',NULL,NULL,'2019-02-17 19:41:14'),(6946,1072,23,'2','2',NULL,NULL,'2019-02-17 19:41:14'),(6947,1073,20,'2','2',NULL,NULL,'2019-02-17 19:41:15'),(6948,1073,21,'6','6',NULL,NULL,'2019-02-17 19:41:16'),(6949,1073,22,'4','3',NULL,NULL,'2019-02-17 19:41:16'),(6950,1073,23,'8','6',NULL,NULL,'2019-02-17 19:41:16'),(6951,1166,20,'1','0',NULL,NULL,'2019-02-17 19:41:17'),(6952,1166,21,'2','0',NULL,NULL,'2019-02-17 19:41:17'),(6953,1166,22,'1','0',NULL,NULL,'2019-02-17 19:41:17'),(6954,1166,23,'2','0',NULL,NULL,'2019-02-17 19:41:17'),(6955,1167,20,'2','1',NULL,NULL,'2019-02-17 19:41:18'),(6956,1167,21,'4','2',NULL,NULL,'2019-02-17 19:41:18'),(6957,1167,22,'2','1',NULL,NULL,'2019-02-17 19:41:18'),(6958,1167,23,'4','2',NULL,NULL,'2019-02-17 19:41:18'),(6959,1168,20,'2','2',NULL,NULL,'2019-02-17 19:41:20'),(6960,1168,21,'5','4',NULL,NULL,'2019-02-17 19:41:20'),(6961,1168,22,'3','2',NULL,NULL,'2019-02-17 19:41:20'),(6962,1168,23,'6','4',NULL,NULL,'2019-02-17 19:41:20'),(6963,1169,20,'4','2',NULL,NULL,'2019-02-17 19:41:21'),(6964,1169,21,'8','4',NULL,NULL,'2019-02-17 19:41:21'),(6965,1169,22,'6','3',NULL,NULL,'2019-02-17 19:41:21'),(6966,1169,23,'11','6',NULL,NULL,'2019-02-17 19:41:21'),(6967,1170,20,'4','2',NULL,NULL,'2019-02-17 19:41:23'),(6968,1170,21,'7','4',NULL,NULL,'2019-02-17 19:41:23'),(6969,1170,22,'5','3',NULL,NULL,'2019-02-17 19:41:23'),(6970,1170,23,'10','6',NULL,NULL,'2019-02-17 19:41:23'),(6971,1171,20,'2','1',NULL,NULL,'2019-02-17 19:41:25'),(6972,1171,21,'6','4',NULL,NULL,'2019-02-17 19:41:25'),(6973,1171,22,'3','2',NULL,NULL,'2019-02-17 19:41:25'),(6974,1171,23,'6','4',NULL,NULL,'2019-02-17 19:41:25'),(6975,1172,20,'3','2',NULL,NULL,'2019-02-17 19:41:26'),(6976,1172,21,'11','9',NULL,NULL,'2019-02-17 19:41:26'),(6977,1172,22,'6','5',NULL,NULL,'2019-02-17 19:41:26'),(6978,1172,23,'12','10',NULL,NULL,'2019-02-17 19:41:27'),(6979,1173,20,'3','2',NULL,NULL,'2019-02-17 19:41:28'),(6980,1173,21,'8','6',NULL,NULL,'2019-02-17 19:41:28'),(6981,1173,22,'5','4',NULL,NULL,'2019-02-17 19:41:28'),(6982,1173,23,'10','8',NULL,NULL,'2019-02-17 19:41:28'),(6983,1174,20,'0','0',NULL,NULL,'2019-02-17 19:41:29'),(6984,1174,21,'0','0',NULL,NULL,'2019-02-17 19:41:29'),(6985,1174,22,'0','0',NULL,NULL,'2019-02-17 19:41:29'),(6986,1174,23,'0','0',NULL,NULL,'2019-02-17 19:41:29'),(6987,1175,20,'2','2',NULL,NULL,'2019-02-17 19:41:30'),(6988,1175,21,'6','6',NULL,NULL,'2019-02-17 19:41:30'),(6989,1175,22,'3','3',NULL,NULL,'2019-02-17 19:41:30'),(6990,1175,23,'6','6',NULL,NULL,'2019-02-17 19:41:30'),(6991,1176,20,'1','1',NULL,NULL,'2019-02-17 19:41:32'),(6992,1176,21,'2','2',NULL,NULL,'2019-02-17 19:41:32'),(6993,1176,22,'1','1',NULL,NULL,'2019-02-17 19:41:32'),(6994,1176,23,'2','2',NULL,NULL,'2019-02-17 19:41:32'),(6995,1177,20,'0','0',NULL,NULL,'2019-02-17 19:41:33'),(6996,1177,21,'0','0',NULL,NULL,'2019-02-17 19:41:33'),(6997,1177,22,'0','0',NULL,NULL,'2019-02-17 19:41:33'),(6998,1177,23,'0','0',NULL,NULL,'2019-02-17 19:41:33'),(6999,1178,20,'6','6',NULL,NULL,'2019-02-17 19:41:34'),(7000,1178,21,'25','16',NULL,NULL,'2019-02-17 19:41:34'),(7001,1178,22,'16','9',NULL,NULL,'2019-02-17 19:41:34'),(7002,1178,23,'26','16',NULL,NULL,'2019-02-17 19:41:34'),(7003,1179,20,'2','2',NULL,NULL,'2019-02-17 19:41:36'),(7004,1179,21,'10','10',NULL,NULL,'2019-02-17 19:41:36'),(7005,1179,22,'5','5',NULL,NULL,'2019-02-17 19:41:36'),(7006,1179,23,'10','10',NULL,NULL,'2019-02-17 19:41:36'),(7007,1180,20,'1','1',NULL,NULL,'2019-02-17 19:41:38'),(7008,1180,21,'2','2',NULL,NULL,'2019-02-17 19:41:38'),(7009,1180,22,'1','1',NULL,NULL,'2019-02-17 19:41:38'),(7010,1180,23,'2','2',NULL,NULL,'2019-02-17 19:41:38'),(7011,1181,20,'1','0',NULL,NULL,'2019-02-17 19:41:40'),(7012,1181,21,'2','0',NULL,NULL,'2019-02-17 19:41:40'),(7013,1181,22,'1','0',NULL,NULL,'2019-02-17 19:41:40'),(7014,1181,23,'2','0',NULL,NULL,'2019-02-17 19:41:40'),(7015,1182,20,'4','4',NULL,NULL,'2019-02-17 19:41:42'),(7016,1182,21,'10','7',NULL,NULL,'2019-02-17 19:41:42'),(7017,1182,22,'5','4',NULL,NULL,'2019-02-17 19:41:42'),(7018,1182,23,'10','8',NULL,NULL,'2019-02-17 19:41:42'),(7019,1183,20,'2','1',NULL,NULL,'2019-02-17 19:41:44'),(7020,1183,21,'4','2',NULL,NULL,'2019-02-17 19:41:44'),(7021,1183,22,'2','1',NULL,NULL,'2019-02-17 19:41:44'),(7022,1183,23,'4','2',NULL,NULL,'2019-02-17 19:41:44'),(7023,1184,20,'3','3',NULL,NULL,'2019-02-17 19:41:46'),(7024,1184,21,'14','11',NULL,NULL,'2019-02-17 19:41:46'),(7025,1184,22,'8','6',NULL,NULL,'2019-02-17 19:41:46'),(7026,1184,23,'16','12',NULL,NULL,'2019-02-17 19:41:46'),(7027,1185,20,'2','1',NULL,NULL,'2019-02-17 19:41:48'),(7028,1185,21,'6','2',NULL,NULL,'2019-02-17 19:41:48'),(7029,1185,22,'3','1',NULL,NULL,'2019-02-17 19:41:48'),(7030,1185,23,'6','2',NULL,NULL,'2019-02-17 19:41:48'),(7031,1186,20,'2','1',NULL,NULL,'2019-02-17 19:41:49'),(7032,1186,21,'5','4',NULL,NULL,'2019-02-17 19:41:49'),(7033,1186,22,'3','2',NULL,NULL,'2019-02-17 19:41:49'),(7034,1186,23,'6','4',NULL,NULL,'2019-02-17 19:41:50'),(7035,1187,20,'2','1',NULL,NULL,'2019-02-17 19:41:51'),(7036,1187,21,'6','4',NULL,NULL,'2019-02-17 19:41:51'),(7037,1187,22,'4','2',NULL,NULL,'2019-02-17 19:41:51'),(7038,1187,23,'8','4',NULL,NULL,'2019-02-17 19:41:51'),(7039,1188,20,'2','2',NULL,NULL,'2019-02-17 19:41:52'),(7040,1188,21,'8','6',NULL,NULL,'2019-02-17 19:41:52'),(7041,1188,22,'4','3',NULL,NULL,'2019-02-17 19:41:52'),(7042,1188,23,'8','6',NULL,NULL,'2019-02-17 19:41:52'),(7043,1189,20,'2','1',NULL,NULL,'2019-02-17 19:41:53'),(7044,1189,21,'5','4',NULL,NULL,'2019-02-17 19:41:53'),(7045,1189,22,'3','2',NULL,NULL,'2019-02-17 19:41:53'),(7046,1189,23,'6','4',NULL,NULL,'2019-02-17 19:41:53'),(7047,1190,20,'1','1',NULL,NULL,'2019-02-17 19:41:54'),(7048,1190,21,'4','2',NULL,NULL,'2019-02-17 19:41:55'),(7049,1190,22,'2','1',NULL,NULL,'2019-02-17 19:41:55'),(7050,1190,23,'4','2',NULL,NULL,'2019-02-17 19:41:55'),(7051,1191,20,'4','2',NULL,NULL,'2019-02-17 19:41:56'),(7052,1191,21,'14','4',NULL,NULL,'2019-02-17 19:41:56'),(7053,1191,22,'10','2',NULL,NULL,'2019-02-17 19:41:56'),(7054,1191,23,'16','4',NULL,NULL,'2019-02-17 19:41:56'),(7055,1192,20,'3','2',NULL,NULL,'2019-02-17 19:41:57'),(7056,1192,21,'9','8',NULL,NULL,'2019-02-17 19:41:58'),(7057,1192,22,'6','4',NULL,NULL,'2019-02-17 19:41:58'),(7058,1192,23,'12','8',NULL,NULL,'2019-02-17 19:41:58'),(7059,1193,20,'2','1',NULL,NULL,'2019-02-17 19:41:59'),(7060,1193,21,'5','4',NULL,NULL,'2019-02-17 19:41:59'),(7061,1193,22,'3','2',NULL,NULL,'2019-02-17 19:41:59'),(7062,1193,23,'6','4',NULL,NULL,'2019-02-17 19:41:59'),(7063,1194,20,'2','1',NULL,NULL,'2019-02-17 19:42:01'),(7064,1194,21,'4','2',NULL,NULL,'2019-02-17 19:42:01'),(7065,1194,22,'2','1',NULL,NULL,'2019-02-17 19:42:01'),(7066,1194,23,'4','2',NULL,NULL,'2019-02-17 19:42:02'),(7067,1015,24,'4.6','4.71',NULL,NULL,'2019-02-19 16:56:33'),(7068,1016,24,'4.59','4.45',NULL,NULL,'2019-02-19 16:56:34'),(7069,1017,24,'4.44','4.82',NULL,NULL,'2019-02-19 16:56:35'),(7070,1018,24,'4.68','4.77',NULL,NULL,'2019-02-19 16:56:36'),(7071,1019,24,'4.69','4.41',NULL,NULL,'2019-02-19 16:56:38'),(7072,1020,24,'4.15','4.14',NULL,NULL,'2019-02-19 16:56:39'),(7073,1021,24,'4.24','4.55',NULL,NULL,'2019-02-19 16:56:40'),(7074,1022,24,'4.61','4.72',NULL,NULL,'2019-02-19 16:56:42'),(7075,1023,24,'4.08','4.66',NULL,NULL,'2019-02-19 16:56:43'),(7076,1024,24,'4.22','4.39',NULL,NULL,'2019-02-19 16:56:44'),(7077,1025,24,'4.3','4.71',NULL,NULL,'2019-02-19 16:56:45'),(7078,1026,24,'4.57','4.4',NULL,NULL,'2019-02-19 16:56:46'),(7079,1027,24,'4.46','4.51',NULL,NULL,'2019-02-19 16:56:48'),(7080,1028,24,'4.18','4.47',NULL,NULL,'2019-02-19 16:56:49'),(7081,1029,24,'4.56','4.39',NULL,NULL,'2019-02-19 16:56:51'),(7082,1030,24,'4.89','4.73',NULL,NULL,'2019-02-19 16:56:53'),(7083,1031,24,'4.56','4.53',NULL,NULL,'2019-02-19 16:56:54'),(7084,1032,24,'4.42','4.72',NULL,NULL,'2019-02-19 16:56:56'),(7085,1033,24,'3.81','3.92',NULL,NULL,'2019-02-19 16:56:59'),(7086,1034,24,'4.33','4.52',NULL,NULL,'2019-02-19 16:57:01'),(7087,1035,24,'3.92','4.38',NULL,NULL,'2019-02-19 16:57:03'),(7088,1036,24,'4.39','4.69',NULL,NULL,'2019-02-19 16:57:04'),(7089,1037,24,'3.98','4.5',NULL,NULL,'2019-02-19 16:57:06'),(7090,1038,24,'4.25','4.58',NULL,NULL,'2019-02-19 16:57:08'),(7091,1039,24,'4.26','3.91',NULL,NULL,'2019-02-19 16:57:10'),(7092,1040,24,'4.5','4.58',NULL,NULL,'2019-02-19 16:57:12'),(7093,1041,24,'4.25','4.35',NULL,NULL,'2019-02-19 16:57:13'),(7094,1042,24,'4.09','4.17',NULL,NULL,'2019-02-19 16:57:15'),(7095,1043,24,'4.5','4.72',NULL,NULL,'2019-02-19 16:57:16'),(7096,1044,24,'4.46','4.61',NULL,NULL,'2019-02-19 16:57:17'),(7097,1045,24,'4.43','4.56',NULL,NULL,'2019-02-19 16:57:18'),(7098,1046,24,'4.8','4.77',NULL,NULL,'2019-02-19 16:57:20'),(7099,1047,24,'4.66','4.74',NULL,NULL,'2019-02-19 16:57:21'),(7100,1048,24,'4.59','4.44',NULL,NULL,'2019-02-19 16:57:23'),(7101,1049,24,'4.59','4.71',NULL,NULL,'2019-02-19 16:57:25'),(7102,1050,24,'4.66','4.74',NULL,NULL,'2019-02-19 16:57:27'),(7103,1051,24,'4.65','4.59',NULL,NULL,'2019-02-19 16:57:28'),(7104,1052,24,'4.71','4.66',NULL,NULL,'2019-02-19 16:57:30'),(7105,1053,24,'4.81','5.06',NULL,NULL,'2019-02-19 16:57:32'),(7106,1054,24,'4.29','4.51',NULL,NULL,'2019-02-19 16:57:35'),(7107,1055,24,'4.55','4.57',NULL,NULL,'2019-02-19 16:57:36'),(7108,1056,24,'4.58','4.72',NULL,NULL,'2019-02-19 16:57:38'),(7109,1057,24,'4.57','4.77',NULL,NULL,'2019-02-19 16:57:39'),(7110,1058,24,'4.62','4.58',NULL,NULL,'2019-02-19 16:57:40'),(7111,1059,24,'4.28','4.32',NULL,NULL,'2019-02-19 16:57:42'),(7112,1060,24,'4.28','3.93',NULL,NULL,'2019-02-19 16:57:43'),(7113,1061,24,'4.28','4.63',NULL,NULL,'2019-02-19 16:57:45'),(7114,1062,24,'4.29','4.65',NULL,NULL,'2019-02-19 16:57:46'),(7115,1063,24,'4.6','4.81',NULL,NULL,'2019-02-19 16:57:48'),(7116,1064,24,'4.75','4.79',NULL,NULL,'2019-02-19 16:57:50'),(7117,1065,24,'5.05','5.1',NULL,NULL,'2019-02-19 16:57:52'),(7118,1066,24,'4.99','4.97',NULL,NULL,'2019-02-19 16:57:53'),(7119,1067,24,'4.26','4.51',NULL,NULL,'2019-02-19 16:57:55'),(7120,1068,24,'4.66','4.74',NULL,NULL,'2019-02-19 16:57:56'),(7121,1069,24,'4.37','4.57',NULL,NULL,'2019-02-19 16:57:58'),(7122,1070,24,'4.52','4.51',NULL,NULL,'2019-02-19 16:57:59'),(7123,1071,24,'4.76','4.86',NULL,NULL,'2019-02-19 16:58:01'),(7124,1072,24,'4.72','4.71',NULL,NULL,'2019-02-19 16:58:02'),(7125,1073,24,'4.72','4.78',NULL,NULL,'2019-02-19 16:58:04'),(7126,1166,24,'3.56','3.31',NULL,NULL,'2019-02-19 16:58:05'),(7127,1167,24,'4.06','3.45',NULL,NULL,'2019-02-19 16:58:06'),(7128,1168,24,'4.2','4.03',NULL,NULL,'2019-02-19 16:58:09'),(7129,1169,24,'4.57','3.84',NULL,NULL,'2019-02-19 16:58:10'),(7130,1170,24,'4.14','3.54',NULL,NULL,'2019-02-19 16:58:12'),(7131,1171,24,'4.23','4.02',NULL,NULL,'2019-02-19 16:58:14'),(7132,1172,24,'4.1','4.16',NULL,NULL,'2019-02-19 16:58:16'),(7133,1173,24,'3.89','3.76',NULL,NULL,'2019-02-19 16:58:17'),(7134,1174,24,'4.27','4.61',NULL,NULL,'2019-02-19 16:58:19'),(7135,1175,24,'4.18','4.42',NULL,NULL,'2019-02-19 16:58:20'),(7136,1176,24,'3.91','4.11',NULL,NULL,'2019-02-19 16:58:21'),(7137,1177,24,'3.94','4.24',NULL,NULL,'2019-02-19 16:58:22'),(7138,1178,24,'4.41','4.87',NULL,NULL,'2019-02-19 16:58:24'),(7139,1179,24,'5.04','5.06',NULL,NULL,'2019-02-19 16:58:25'),(7140,1180,24,'4.07','4.41',NULL,NULL,'2019-02-19 16:58:26'),(7141,1181,24,'4.23','3.24',NULL,NULL,'2019-02-19 16:58:28'),(7142,1182,24,'4.24','3.69',NULL,NULL,'2019-02-19 16:58:29'),(7143,1183,24,'3.76','3.81',NULL,NULL,'2019-02-19 16:58:30'),(7144,1184,24,'4.46','3.87',NULL,NULL,'2019-02-19 16:58:32'),(7145,1185,24,'4.72','4.62',NULL,NULL,'2019-02-19 16:58:33'),(7146,1186,24,'4.51','4.47',NULL,NULL,'2019-02-19 16:58:34'),(7147,1187,24,'4.4','4.56',NULL,NULL,'2019-02-19 16:58:35'),(7148,1188,24,'4.7','4.73',NULL,NULL,'2019-02-19 16:58:37'),(7149,1189,24,'4.61','4.69',NULL,NULL,'2019-02-19 16:58:38'),(7150,1190,24,'4.73','4.84',NULL,NULL,'2019-02-19 16:58:40'),(7151,1191,24,'4.92','4.65',NULL,NULL,'2019-02-19 16:58:41'),(7152,1192,24,'4.65','4.8',NULL,NULL,'2019-02-19 16:58:43'),(7153,1193,24,'4.39','4.43',NULL,NULL,'2019-02-19 16:58:45'),(7154,1194,24,'4.16','4.22',NULL,NULL,'2019-02-19 16:58:47'),(7155,1015,25,'28.53','28.53',NULL,NULL,'2019-02-19 17:10:32'),(7156,1016,25,'NAN','NAN',NULL,NULL,'2019-02-19 17:10:33'),(7157,1017,25,'4.75','4.75',NULL,NULL,'2019-02-19 17:10:34'),(7158,1018,25,'4.75','4.75',NULL,NULL,'2019-02-19 17:10:36'),(7159,1019,25,'55.35','140.23',NULL,NULL,'2019-02-19 17:10:37'),(7160,1020,25,'28.53','28.53',NULL,NULL,'2019-02-19 17:10:38'),(7161,1021,25,'NAN','NAN',NULL,NULL,'2019-02-19 17:10:40'),(7162,1022,25,'55.51','25.27',NULL,NULL,'2019-02-19 17:10:41'),(7163,1023,25,'NAN','NAN',NULL,NULL,'2019-02-19 17:10:42'),(7164,1024,25,'13.93','13.93',NULL,NULL,'2019-02-19 17:10:44'),(7165,1025,25,'4.75','18.58',NULL,NULL,'2019-02-19 17:10:46'),(7166,1026,25,'15.51','15.51',NULL,NULL,'2019-02-19 17:10:47'),(7167,1027,25,'43.02','43.02',NULL,NULL,'2019-02-19 17:10:49'),(7168,1028,25,'4.75','4.75',NULL,NULL,'2019-02-19 17:10:50'),(7169,1029,25,'15.51','15.51',NULL,NULL,'2019-02-19 17:10:53'),(7170,1030,25,'NAN','129.66',NULL,NULL,'2019-02-19 17:10:55'),(7171,1031,25,'15.51','15.51',NULL,NULL,'2019-02-19 17:10:56'),(7172,1032,25,'75.28','43.02',NULL,NULL,'2019-02-19 17:10:57'),(7173,1033,25,'4.75','4.75',NULL,NULL,'2019-02-19 17:10:59'),(7174,1034,25,'28.53','28.53',NULL,NULL,'2019-02-19 17:11:00'),(7175,1035,25,'43.19','62.27',NULL,NULL,'2019-02-19 17:11:01'),(7176,1036,25,'NAN','4.75',NULL,NULL,'2019-02-19 17:11:03'),(7177,1037,25,'NAN','10',NULL,NULL,'2019-02-19 17:11:04'),(7178,1038,25,'4.75','4.75',NULL,NULL,'2019-02-19 17:11:06'),(7179,1039,25,'4.75','66.61',NULL,NULL,'2019-02-19 17:11:07'),(7180,1040,25,'4.75','NAN',NULL,NULL,'2019-02-19 17:11:09'),(7181,1041,25,'25.27','25.27',NULL,NULL,'2019-02-19 17:11:11'),(7182,1042,25,'4.75','4.75',NULL,NULL,'2019-02-19 17:11:13'),(7183,1043,25,'12','4.75',NULL,NULL,'2019-02-19 17:11:15'),(7184,1044,25,'25.27','13.93',NULL,NULL,'2019-02-19 17:11:18'),(7185,1045,25,'4.75','4.75',NULL,NULL,'2019-02-19 17:11:25'),(7186,1046,25,'50.19','28.53',NULL,NULL,'2019-02-19 17:11:26'),(7187,1047,25,'NAN','NAN',NULL,NULL,'2019-02-19 17:11:28'),(7188,1048,25,'4.75','4.75',NULL,NULL,'2019-02-19 17:11:29'),(7189,1049,25,'NAN','NAN',NULL,NULL,'2019-02-19 17:11:31'),(7190,1050,25,'NAN','NAN',NULL,NULL,'2019-02-19 17:11:32'),(7191,1051,25,'53.77','53.77',NULL,NULL,'2019-02-19 17:11:34'),(7192,1052,25,'15.51','NAN',NULL,NULL,'2019-02-19 17:11:36'),(7193,1053,25,'13.93','4.75',NULL,NULL,'2019-02-19 17:11:38'),(7194,1054,25,'89.92','15.51',NULL,NULL,'2019-02-19 17:11:41'),(7195,1055,25,'84','41.51',NULL,NULL,'2019-02-19 17:11:43'),(7196,1056,25,'13.93','36.54',NULL,NULL,'2019-02-19 17:11:45'),(7197,1057,25,'NAN','36.54',NULL,NULL,'2019-02-19 17:11:49'),(7198,1058,25,'NAN','NAN',NULL,NULL,'2019-02-19 17:11:51'),(7199,1059,25,'44.97','44.97',NULL,NULL,'2019-02-19 17:11:52'),(7200,1060,25,'15.51','4.75',NULL,NULL,'2019-02-19 17:11:54'),(7201,1061,25,'15.51','4.75',NULL,NULL,'2019-02-19 17:11:56'),(7202,1062,25,'15.51','4.75',NULL,NULL,'2019-02-19 17:12:00'),(7203,1063,25,'NAN','NAN',NULL,NULL,'2019-02-19 17:12:01'),(7204,1064,25,'4.75','4.75',NULL,NULL,'2019-02-19 17:12:02'),(7205,1065,25,'4.75','4.75',NULL,NULL,'2019-02-19 17:12:03'),(7206,1066,25,'4.75','NAN',NULL,NULL,'2019-02-19 17:12:05'),(7207,1067,25,'4.75','NAN',NULL,NULL,'2019-02-19 17:12:06'),(7208,1068,25,'7.92','NAN',NULL,NULL,'2019-02-19 17:12:07'),(7209,1069,25,'51.89','NAN',NULL,NULL,'2019-02-19 17:12:09'),(7210,1070,25,'NAN','NAN',NULL,NULL,'2019-02-19 17:12:10'),(7211,1071,25,'4.75','4.75',NULL,NULL,'2019-02-19 17:12:12'),(7212,1072,25,'4.75','4.75',NULL,NULL,'2019-02-19 17:12:13'),(7213,1073,25,'36','27',NULL,NULL,'2019-02-19 17:12:16'),(7214,1166,25,'4.75','NAN',NULL,NULL,'2019-02-19 17:12:18'),(7215,1167,25,'15.51','4.75',NULL,NULL,'2019-02-19 17:12:19'),(7216,1168,25,'25.27','15.51',NULL,NULL,'2019-02-19 17:12:20'),(7217,1169,25,'60.94','23.26',NULL,NULL,'2019-02-19 17:12:22'),(7218,1170,25,'51.89','23.26',NULL,NULL,'2019-02-19 17:12:23'),(7219,1171,25,'27','13.93',NULL,NULL,'2019-02-19 17:12:25'),(7220,1172,25,'68.53','51.89',NULL,NULL,'2019-02-19 17:12:26'),(7221,1173,25,'51.89','36',NULL,NULL,'2019-02-19 17:12:28'),(7222,1174,25,'NAN','NAN',NULL,NULL,'2019-02-19 17:12:30'),(7223,1175,25,'27','27',NULL,NULL,'2019-02-19 17:12:31'),(7224,1176,25,'4.75','4.75',NULL,NULL,'2019-02-19 17:12:33'),(7225,1177,25,'NAN','NAN',NULL,NULL,'2019-02-19 17:12:36'),(7226,1178,25,'208.08','111.49',NULL,NULL,'2019-02-19 17:12:39'),(7227,1179,25,'53.77','53.77',NULL,NULL,'2019-02-19 17:12:41'),(7228,1180,25,'4.75','4.75',NULL,NULL,'2019-02-19 17:12:44'),(7229,1181,25,'4.75','NAN',NULL,NULL,'2019-02-19 17:12:46'),(7230,1182,25,'57.11','41.51',NULL,NULL,'2019-02-19 17:12:48'),(7231,1183,25,'15.51','4.75',NULL,NULL,'2019-02-19 17:12:50'),(7232,1184,25,'98.1','68.53',NULL,NULL,'2019-02-19 17:12:51'),(7233,1185,25,'27','4.75',NULL,NULL,'2019-02-19 17:12:52'),(7234,1186,25,'25.27','13.93',NULL,NULL,'2019-02-19 17:12:54'),(7235,1187,25,'36','13.93',NULL,NULL,'2019-02-19 17:12:55'),(7236,1188,25,'39.86','27',NULL,NULL,'2019-02-19 17:12:57'),(7237,1189,25,'25.27','13.93',NULL,NULL,'2019-02-19 17:12:59'),(7238,1190,25,'13.93','4.75',NULL,NULL,'2019-02-19 17:13:02'),(7239,1191,25,'108.42','15.51',NULL,NULL,'2019-02-19 17:13:04'),(7240,1192,25,'64.53','39.86',NULL,NULL,'2019-02-19 17:13:07'),(7241,1193,25,'25.27','13.93',NULL,NULL,'2019-02-19 17:13:09'),(7242,1194,25,'15.51','4.75',NULL,NULL,'2019-02-19 17:13:11'),(7243,1015,26,'0.343','0.326',NULL,NULL,'2019-02-19 18:26:37'),(7244,1016,26,'NAN','NAN',NULL,NULL,'2019-02-19 18:26:39'),(7245,1017,26,'0.485','0.348',NULL,NULL,'2019-02-19 18:26:40'),(7246,1018,26,'0.369','0.356',NULL,NULL,'2019-02-19 18:26:41'),(7247,1019,26,'0.481','0.923',NULL,NULL,'2019-02-19 18:26:43'),(7248,1020,26,'1.05','1.092',NULL,NULL,'2019-02-19 18:26:44'),(7249,1021,26,'NAN','NAN',NULL,NULL,'2019-02-19 18:26:46'),(7250,1022,26,'0.532','0.456',NULL,NULL,'2019-02-19 18:26:47'),(7251,1023,26,'NAN','NAN',NULL,NULL,'2019-02-19 18:26:49'),(7252,1024,26,'0.968','0.703',NULL,NULL,'2019-02-19 18:26:50'),(7253,1025,26,'0.746','0.439',NULL,NULL,'2019-02-19 18:26:51'),(7254,1026,26,'0.43','0.656',NULL,NULL,'2019-02-19 18:26:53'),(7255,1027,26,'0.476','0.349',NULL,NULL,'2019-02-19 18:26:54'),(7256,1028,26,'0.844','0.561',NULL,NULL,'2019-02-19 18:26:55'),(7257,1029,26,'0.392','0.617',NULL,NULL,'2019-02-19 18:26:58'),(7258,1030,26,'NAN','1.47',NULL,NULL,'2019-02-19 18:27:00'),(7259,1031,26,'0.832','0.756',NULL,NULL,'2019-02-19 18:27:03'),(7260,1032,26,'0.536','0.517',NULL,NULL,'2019-02-19 18:27:04'),(7261,1033,26,'0.7','0.563',NULL,NULL,'2019-02-19 18:27:05'),(7262,1034,26,'0.663','0.475',NULL,NULL,'2019-02-19 18:27:06'),(7263,1035,26,'1.076','0.505',NULL,NULL,'2019-02-19 18:27:08'),(7264,1036,26,'NAN','0.608',NULL,NULL,'2019-02-19 18:27:09'),(7265,1037,26,'NAN','0.419',NULL,NULL,'2019-02-19 18:27:10'),(7266,1038,26,'0.634','0.304',NULL,NULL,'2019-02-19 18:27:12'),(7267,1039,26,'0.872','0.721',NULL,NULL,'2019-02-19 18:27:13'),(7268,1040,26,'0.756','NAN',NULL,NULL,'2019-02-19 18:27:15'),(7269,1041,26,'0.966','0.871',NULL,NULL,'2019-02-19 18:27:16'),(7270,1042,26,'0.858','0.726',NULL,NULL,'2019-02-19 18:27:18'),(7271,1043,26,'0.492','0.283',NULL,NULL,'2019-02-19 18:27:20'),(7272,1044,26,'0.495','0.35',NULL,NULL,'2019-02-19 18:27:21'),(7273,1045,26,'0.527','0.387',NULL,NULL,'2019-02-19 18:27:23'),(7274,1046,26,'0.321','0.557',NULL,NULL,'2019-02-19 18:27:26'),(7275,1047,26,'NAN','NAN',NULL,NULL,'2019-02-19 18:27:29'),(7276,1048,26,'0.583','0.645',NULL,NULL,'2019-02-19 18:27:31'),(7277,1049,26,'NAN','NAN',NULL,NULL,'2019-02-19 18:27:34'),(7278,1050,26,'NAN','NAN',NULL,NULL,'2019-02-19 18:27:36'),(7279,1051,26,'0.612','0.661',NULL,NULL,'2019-02-19 18:27:38'),(7280,1052,26,'0.569','NAN',NULL,NULL,'2019-02-19 18:27:40'),(7281,1053,26,'0.72','0.472',NULL,NULL,'2019-02-19 18:27:42'),(7282,1054,26,'0.427','0.399',NULL,NULL,'2019-02-19 18:27:43'),(7283,1055,26,'0.247','0.465',NULL,NULL,'2019-02-19 18:27:45'),(7284,1056,26,'0.634','0.898',NULL,NULL,'2019-02-19 18:27:47'),(7285,1057,26,'NAN','0.571',NULL,NULL,'2019-02-19 18:27:50'),(7286,1058,26,'NAN','NAN',NULL,NULL,'2019-02-19 18:27:51'),(7287,1059,26,'0.537','0.451',NULL,NULL,'2019-02-19 18:27:53'),(7288,1060,26,'0.554','0.762',NULL,NULL,'2019-02-19 18:27:54'),(7289,1061,26,'0.634','0.377',NULL,NULL,'2019-02-19 18:27:56'),(7290,1062,26,'0.592','0.334',NULL,NULL,'2019-02-19 18:27:58'),(7291,1063,26,'NAN','NAN',NULL,NULL,'2019-02-19 18:28:00'),(7292,1064,26,'0.759','0.553',NULL,NULL,'2019-02-19 18:28:01'),(7293,1065,26,'0.914','0.706',NULL,NULL,'2019-02-19 18:28:03'),(7294,1066,26,'0.843','NAN',NULL,NULL,'2019-02-19 18:28:04'),(7295,1067,26,'0.592','NAN',NULL,NULL,'2019-02-19 18:28:06'),(7296,1068,26,'0.482','NAN',NULL,NULL,'2019-02-19 18:28:09'),(7297,1069,26,'0.74','NAN',NULL,NULL,'2019-02-19 18:28:10'),(7298,1070,26,'NAN','NAN',NULL,NULL,'2019-02-19 18:28:12'),(7299,1071,26,'0.437','0.462',NULL,NULL,'2019-02-19 18:28:13'),(7300,1072,26,'0.483','0.805',NULL,NULL,'2019-02-19 18:28:15'),(7301,1073,26,'1.42','0.721',NULL,NULL,'2019-02-19 18:28:16'),(7302,1166,26,'0.497','NAN',NULL,NULL,'2019-02-19 18:28:18'),(7303,1167,26,'0.507','0.874',NULL,NULL,'2019-02-19 18:28:20'),(7304,1168,26,'0.494','0.631',NULL,NULL,'2019-02-19 18:28:23'),(7305,1169,26,'0.44','0.914',NULL,NULL,'2019-02-19 18:28:24'),(7306,1170,26,'0.695','1.319',NULL,NULL,'2019-02-19 18:28:26'),(7307,1171,26,'0.523','0.638',NULL,NULL,'2019-02-19 18:28:28'),(7308,1172,26,'0.726','0.692',NULL,NULL,'2019-02-19 18:28:29'),(7309,1173,26,'0.572','0.684',NULL,NULL,'2019-02-19 18:28:31'),(7310,1174,26,'NAN','NAN',NULL,NULL,'2019-02-19 18:28:34'),(7311,1175,26,'0.851','0.695',NULL,NULL,'2019-02-19 18:28:35'),(7312,1176,26,'1.085','0.895',NULL,NULL,'2019-02-19 18:28:37'),(7313,1177,26,'NAN','NAN',NULL,NULL,'2019-02-19 18:28:39'),(7314,1178,26,'0.179','0.069',NULL,NULL,'2019-02-19 18:28:40'),(7315,1179,26,'0.274','0.271',NULL,NULL,'2019-02-19 18:34:46'),(7316,1180,26,'0.661','0.45',NULL,NULL,'2019-02-19 18:34:47'),(7317,1181,26,'0.637','NAN',NULL,NULL,'2019-02-19 18:34:49'),(7318,1182,26,'0.543','0.837',NULL,NULL,'2019-02-19 18:34:50'),(7319,1183,26,'0.752','0.9',NULL,NULL,'2019-02-19 18:34:52'),(7320,1184,26,'0.654','1.12',NULL,NULL,'2019-02-19 18:34:53'),(7321,1185,26,'0.49','0.538',NULL,NULL,'2019-02-19 18:34:54'),(7322,1186,26,'0.647','0.691',NULL,NULL,'2019-02-19 18:34:56'),(7323,1187,26,'0.508','0.517',NULL,NULL,'2019-02-19 18:34:57'),(7324,1188,26,'0.41','0.448',NULL,NULL,'2019-02-19 18:34:59'),(7325,1189,26,'0.472','0.498',NULL,NULL,'2019-02-19 18:35:00'),(7326,1190,26,'0.452','0.465',NULL,NULL,'2019-02-19 18:35:02'),(7327,1191,26,'0.591','0.778',NULL,NULL,'2019-02-19 18:35:04'),(7328,1192,26,'0.617','0.475',NULL,NULL,'2019-02-19 18:35:06'),(7329,1193,26,'0.505','0.537',NULL,NULL,'2019-02-19 18:35:09'),(7330,1194,26,'0.492','0.518',NULL,NULL,'2019-02-19 18:35:11');
/*!40000 ALTER TABLE `results` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `search_events`
--

DROP TABLE IF EXISTS `search_events`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `search_events` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(150) NOT NULL,
  `school` varchar(100) DEFAULT NULL,
  `created` datetime DEFAULT NULL,
  `modified` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `search_events`
--

LOCK TABLES `search_events` WRITE;
/*!40000 ALTER TABLE `search_events` DISABLE KEYS */;
INSERT INTO `search_events` VALUES (5,'Análise do impacto na compreensão de programasJava com a adoção de expressões lambda','Universidade de Brasília','2018-09-02 16:33:20','2018-09-02 16:33:20');
/*!40000 ALTER TABLE `search_events` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `transformation_type_languages`
--

DROP TABLE IF EXISTS `transformation_type_languages`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `transformation_type_languages` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `language_id` tinyint(4) NOT NULL,
  `transformation_type_id` tinyint(4) NOT NULL,
  `created` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `fk_transformation_type_languages_languages1_idx` (`language_id`),
  KEY `fk_transformation_type_languages_transformation_types1_idx` (`transformation_type_id`),
  CONSTRAINT `fk_transformation_type_languages_languages1` FOREIGN KEY (`language_id`) REFERENCES `languages` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_transformation_type_languages_transformation_types1` FOREIGN KEY (`transformation_type_id`) REFERENCES `transformation_types` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `transformation_type_languages`
--

LOCK TABLES `transformation_type_languages` WRITE;
/*!40000 ALTER TABLE `transformation_type_languages` DISABLE KEYS */;
/*!40000 ALTER TABLE `transformation_type_languages` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `transformation_types`
--

DROP TABLE IF EXISTS `transformation_types`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `transformation_types` (
  `id` tinyint(4) NOT NULL AUTO_INCREMENT,
  `description` varchar(120) DEFAULT NULL,
  `created` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `transformation_types`
--

LOCK TABLES `transformation_types` WRITE;
/*!40000 ALTER TABLE `transformation_types` DISABLE KEYS */;
INSERT INTO `transformation_types` VALUES (1,'Anonymous inner classes -> Lambda','2018-02-14 11:10:25'),(2,'(for) to ForEach -> Lambda','2018-02-14 11:10:25'),(3,'(for) to Filter -> Lambda','2018-02-14 11:10:25'),(4,'(If) to anyMatch -> Lambda','2018-02-14 11:10:25'),(5,'(for) to Map -> Lambda','2018-02-14 11:10:25'),(6,'(for) to Map/Reduce -> Lambda','2018-11-29 15:50:25'),(7,'(for) to Map/Collect  -> Lambda','2018-11-29 15:50:25'),(8,'(for) to Filter/Count -> Lambda','2018-11-29 15:50:25'),(9,'(for) to Filter/Collect -> Lambda','2018-11-29 15:50:25'),(10,'(for) to Filter/ForEach -> Lambda','2018-11-30 12:50:25'),(11,'(for) to Filter/FlatMap -> Lambda','2018-01-12 12:50:25'),(13,'(for) to Map/FlatMap -> Lambda','2018-01-12 12:50:25'),(14,'(for) to ForEach/FlatMap -> Lambda','2018-01-12 12:50:25'),(15,'(for) to Map/Count -> Lambda','2018-01-12 12:50:25'),(16,'(for) to FlatMap -> Lambda','2018-01-12 12:50:25');
/*!40000 ALTER TABLE `transformation_types` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `transformations`
--

DROP TABLE IF EXISTS `transformations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `transformations` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `transformation_type_id` tinyint(4) NOT NULL,
  `language_id` tinyint(4) NOT NULL,
  `search_event_id` int(11) NOT NULL,
  `code_before` text,
  `deletions` varchar(50) DEFAULT NULL,
  `code_after` text,
  `additions` varchar(50) DEFAULT NULL,
  `created` datetime DEFAULT NULL,
  `modified` datetime DEFAULT NULL,
  `diff_id` text NOT NULL,
  `site_link` text NOT NULL,
  `old_code` varchar(255) DEFAULT NULL,
  `new_code` varchar(255) DEFAULT NULL,
  `line_start` varchar(45) DEFAULT NULL,
  `line_end` varchar(45) DEFAULT NULL,
  `apt` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `fk_transformations_languages1_idx` (`language_id`),
  KEY `fk_transformations_transformation_types1_idx` (`transformation_type_id`),
  KEY `fk_transformations_search_events1_idx` (`search_event_id`),
  CONSTRAINT `fk_transformations_languages1` FOREIGN KEY (`language_id`) REFERENCES `languages` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_transformations_search_events1` FOREIGN KEY (`search_event_id`) REFERENCES `search_events` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_transformations_transformation_types1` FOREIGN KEY (`transformation_type_id`) REFERENCES `transformation_types` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=1195 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `transformations`
--

LOCK TABLES `transformations` WRITE;
/*!40000 ALTER TABLE `transformations` DISABLE KEYS */;
INSERT INTO `transformations` VALUES (1015,1,1,5,'<p>\r\n<br/>        @Provides @NonNull @Singleton\r\n<br/>        public HttpLoggingInterceptor provideHttpLoggingInterceptor() {\r\n<br/>    -        HttpLoggingInterceptor httpLoggingInterceptor = new HttpLoggingInterceptor();\r\n<br/>            httpLoggingInterceptor.setLevel(BuildConfig.DEBUG ? BODY : NONE);\r\n<br/>            return httpLoggingInterceptor;\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>        @Provides @NonNull @Singleton\r\n<br/>        public HttpLoggingInterceptor provideHttpLoggingInterceptor() {\r\n<br/>    +        HttpLoggingInterceptor httpLoggingInterceptor = new HttpLoggingInterceptor(message -&gt; Timber.d(message));\r\n<br/>            httpLoggingInterceptor.setLevel(BuildConfig.DEBUG ? BODY : NONE);\r\n<br/>            return httpLoggingInterceptor;\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:27:12','2019-01-09 00:27:13','diff-a2afc5fdcf3469676fe934fb27ff465a-20190109002712','https://github.com/artem-zinnatullin/qualitymatters/commit/7d1b1e2e8b5aeddf75ab79a607c9c0484ddb20e9#diff-a2afc5fdcf3469676fe934fb27ff465a','/var/www/QARefactorings/app/webroot/files/diff-a2afc5fdcf3469676fe934fb27ff465a-20190109002712/a.txt','/var/www/QARefactorings/app/webroot/files/diff-a2afc5fdcf3469676fe934fb27ff465a-20190109002712/b.txt','L26','R33','S'),(1016,1,1,5,'<p>\r\n<br/>        private void initFab() {\r\n<br/>    -        mFloatingButton.setOnClickListener(v -&gt; mPresenter.addNewApp());\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>        private void initFab() {\r\n<br/>    +        mFloatingButton.setOnClickListener(v -&gt; {\r\n<br/>    +            CircularAnim.fullActivity(this, mFloatingButton)\r\n<br/>    +                    .colorOrImageRes(R.color.colorPrimaryRavel)\r\n<br/>    +                    .go(() -&gt; ListAppActivity.gotoListApp(this));\r\n<br/>    +        });\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:27:16','2019-01-09 00:27:17','diff-a3e60a66d5d32b8a6755633f27ee2aee-20190109002716','https://github.com/asLody/VirtualApp/commit/963f78c437609897b78904df6e6dd4509ec46b56#diff-a3e60a66d5d32b8a6755633f27ee2aee','/var/www/QARefactorings/app/webroot/files/diff-a3e60a66d5d32b8a6755633f27ee2aee-20190109002716/a.txt','/var/www/QARefactorings/app/webroot/files/diff-a3e60a66d5d32b8a6755633f27ee2aee-20190109002716/b.txt','L109','R125','N'),(1017,1,1,5,'<p>\r\n<br/>        @Override\r\n<br/>    -    public Future&lt;Void&gt; put(K k, V v, long timeout) {\r\n<br/>    -      Future&lt;Void&gt; fut = put(k, v);\r\n<br/>    -      vertx.setTimer(timeout, tid -&gt; map.remove(k));\r\n<br/>    -      return fut;\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>        @Override\r\n<br/>    +    public void replaceIfPresent(K k, V oldValue, V newValue, Handler&lt;AsyncResult&lt;Boolean&gt;&gt; resultHandler) {\r\n<br/>    +      vertx.executeBlocking(fut -&gt; fut.complete(map.replace(k, oldValue, newValue)), resultHandler);\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:27:20','2019-01-09 00:27:21','diff-e31e546766580703e5b536a7c2368ec7-20190109002720','https://github.com/eclipse/vert.x/commit/60ecfee015e51c61c6b0a452bcad68b72b1e1486#diff-e31e546766580703e5b536a7c2368ec7','/var/www/QARefactorings/app/webroot/files/diff-e31e546766580703e5b536a7c2368ec7-20190109002720/a.txt','/var/www/QARefactorings/app/webroot/files/diff-e31e546766580703e5b536a7c2368ec7-20190109002720/b.txt','L282','R294','N'),(1018,1,1,5,'<p>\r\n<br/>        @Override\r\n<br/>    -    public void put(K k, V v, long timeout, Handler&lt;AsyncResult&lt;Void&gt;&gt; completionHandler) {\r\n<br/>    -      put(k, v, timeout).setHandler(completionHandler);\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>        @Override\r\n<br/>    +    public void replace(K k, V v, Handler&lt;AsyncResult&lt;V&gt;&gt; resultHandler) {\r\n<br/>    +      vertx.executeBlocking(fut -&gt; fut.complete(map.replace(k, v)), resultHandler);\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:27:25','2019-01-09 00:27:27','diff-e31e546766580703e5b536a7c2368ec7-20190109002725','https://github.com/eclipse/vert.x/commit/824a1daa941ff04e087b4cc0774ee0b974cda266#diff-e31e546766580703e5b536a7c2368ec7','/var/www/QARefactorings/app/webroot/files/diff-e31e546766580703e5b536a7c2368ec7-20190109002725/a.txt','/var/www/QARefactorings/app/webroot/files/diff-e31e546766580703e5b536a7c2368ec7-20190109002725/b.txt','L277','R289','N'),(1019,1,1,5,'<p>>\r\n<br/>    -    /** ensure a cluster is form with {@link #nodes}.size() nodes, but do so by using the client of the specified node */\r\n<br/>        private void validateClusterFormed(String viaNode) {\r\n<br/>    -        final int size = nodes.size();\r\n<br/>    -        logger.trace(\"validating cluster formed via [{}], expecting [{}]\", viaNode, size);\r\n<br/>            final Client client = client(viaNode);\r\n<br/>    -        ClusterHealthResponse response = client.admin().cluster().prepareHealth().setWaitForNodes(Integer.toString(size)).get();\r\n<br/>    -        if (response.isTimedOut()) {\r\n<br/>    -            logger.warn(\"failed to wait for a cluster of size [{}], got [{}]\", size, response);\r\n<br/>    -            throw new IllegalStateException(\"cluster failed to reach the expected size of [\" + size + \"]\");\r\n<br/>            }\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'<p>>\r\n<br/>    +    /** ensure a cluster is formed with all published nodes, but do so by using the client of the specified node */\r\n<br/>        private void validateClusterFormed(String viaNode) {\r\n<br/>    +        Set&lt;DiscoveryNode&gt; expectedNodes = new HashSet&lt;&gt;();\r\n<br/>    +        for (NodeAndClient nodeAndClient : nodes.values()) {\r\n<br/>    +            expectedNodes.add(getInstanceFromNode(ClusterService.class, nodeAndClient.node()).localNode());\r\n<br/>    +        }\r\n<br/>    +        logger.trace(\"validating cluster formed via [{}], expecting {}\", viaNode, expectedNodes);\r\n<br/>            final Client client = client(viaNode);\r\n<br/>    +        try {\r\n<br/>    +            if (awaitBusy(() -&gt; {\r\n<br/>    +                DiscoveryNodes discoveryNodes = client.admin().cluster().prepareState().get().getState().nodes();\r\n<br/>    +                if (discoveryNodes.getSize() != expectedNodes.size()) {\r\n<br/>    +                    return false;\r\n<br/>    +                }\r\n<br/>    +                for (DiscoveryNode expectedNode : expectedNodes) {\r\n<br/>    +                    if (discoveryNodes.nodeExists(expectedNode) == false) {\r\n<br/>    +                        return false;\r\n<br/>    +                    }\r\n<br/>    +                }\r\n<br/>    +                return true;\r\n<br/>    +            }, 30, TimeUnit.SECONDS) == false) {\r\n<br/>    +                throw new IllegalStateException(\"cluster failed to from with expected nodes \" + expectedNodes + \" and actual nodes \" +\r\n<br/>    +                    client.admin().cluster().prepareState().get().getState().nodes());\r\n<br/>    +            }\r\n<br/>    +        } catch (InterruptedException e) {\r\n<br/>    +            throw new IllegalStateException(e);\r\n<br/>            }\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:27:29','2019-01-09 00:27:31','diff-80781e38e5de74275f62a1934ae17d9a-20190109002729','https://github.com/elastic/elasticsearch/commit/7c55d7084253a5040587ba3ac62139ce005d1963#diff-80781e38e5de74275f62a1934ae17d9a','/var/www/QARefactorings/app/webroot/files/diff-80781e38e5de74275f62a1934ae17d9a-20190109002729/a.txt','/var/www/QARefactorings/app/webroot/files/diff-80781e38e5de74275f62a1934ae17d9a-20190109002729/b.txt','L1074','R1104','S'),(1020,1,1,5,'<p><br>                @Override\r\n<br>                public void onFailure(Exception t) {\r\n<br>                    logger.warn((Supplier) () -&gt; new ParameterizedMessage(\"Failed to clear scroll [{}]\", scrollId), t);\r\n<br>                public void onFailure(Exception e) {\r\n<br>                    logFailure(e);\r\n<br>                    onCompletion.run();\r\n<br>                }\r\n<br>    <br>\r\n<br>                private void logFailure(Exception e) {\r\n<br>                    if (e instanceof ResponseException) {\r\n<br>                        ResponseException re = (ResponseException) e;\r\n<br>                        if (remoteVersion.before(Version.V_2_0_0) &amp;&amp; re.getResponse().getStatusLine().getStatusCode() == 404) {\r\n<br>                            logger.debug((Supplier) () -&gt; new ParameterizedMessage(\r\n<br>                                    \"Failed to clear scroll [{}] from pre-2.0 Elasticsearch. This is normal if the request terminated \"\r\n<br>                            return;\r\n<br>                        }\r\n<br>                    }\r\n<br>                    logger.warn((Supplier) () -&gt; new ParameterizedMessage(\"Failed to clear scroll [{}]\", scrollId), e);\r\n<br>                }\r\n<br>            });\r\n<br>        }\r\n<br>    <br></p>',NULL,'<p><br>                @Override\r\n<br>                public void onFailure(Exception t) {\r\n<br>                    logger.warn((Supplier) () -&gt; new ParameterizedMessage(\"Failed to clear scroll [{}]\", scrollId), t);\r\n<br>                public void onFailure(Exception e) {\r\n<br>                    logFailure(e);\r\n<br>                    onCompletion.run();\r\n<br>                }\r\n<br>    <br>\r\n<br>                private void logFailure(Exception e) {\r\n<br>                    if (e instanceof ResponseException) {\r\n<br>                        ResponseException re = (ResponseException) e;\r\n<br>                        if (remoteVersion.before(Version.V_2_0_0) &amp;&amp; re.getResponse().getStatusLine().getStatusCode() == 404) {\r\n<br>                            logger.debug((Supplier) () -&gt; new ParameterizedMessage(\r\n<br>                                    \"Failed to clear scroll [{}] from pre-2.0 Elasticsearch. This is normal if the request terminated \"\r\n<br>                                            + \"normally as the scroll has already been cleared automatically.\", scrollId), e);\r\n<br>                            return;\r\n<br>                        }\r\n<br>                    }\r\n<br>                    logger.warn((Supplier) () -&gt; new ParameterizedMessage(\"Failed to clear scroll [{}]\", scrollId), e);\r\n<br>                }\r\n<br>            });\r\n<br>        }\r\n<br>    <br></p>',NULL,'2019-01-09 00:27:34','2019-01-09 00:32:05','diff-10be32893f947fec2c278044519a4d21-20190109002734','https://github.com/elastic/elasticsearch/commit/d479b0e7c722569d99bbe30f70c2ac2a7b8fb597#diff-10be32893f947fec2c278044519a4d21','/var/www/QARefactorings/app/webroot/files/diff-10be32893f947fec2c278044519a4d21-20190109002734/a.txt','/var/www/QARefactorings/app/webroot/files/diff-10be32893f947fec2c278044519a4d21-20190109002734/b.txt','L120','R141','N'),(1021,7,1,5,'<p>\r\n<br/>        @Override\r\n<br/>        public List&lt;String&gt; attributes(final String attribute) {\r\n<br/>    -        return Lists.transform(this, new Function&lt;E, String&gt;() {\r\n<br/>    -            public String apply(E webElement) {\r\n<br/>    -                return webElement.attribute(attribute);\r\n<br/>    -            }\r\n<br/>    -        });\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>        @Override\r\n<br/>        public List&lt;String&gt; attributes(final String attribute) {\r\n<br/>    +        return stream().map(webElement -&gt; webElement.attribute(attribute)).collect(Collectors.toList());\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:27:38','2019-01-09 00:27:39','diff-b8d56c1e212b1e2b113c91aeb2c19cd8-20190109002738','https://github.com/FluentLenium/FluentLenium/commit/73bac61cc819c5f04d8acac29575877e18de3332#diff-b8d56c1e212b1e2b113c91aeb2c19cd8','/var/www/QARefactorings/app/webroot/files/diff-b8d56c1e212b1e2b113c91aeb2c19cd8-20190109002738/a.txt','/var/www/QARefactorings/app/webroot/files/diff-b8d56c1e212b1e2b113c91aeb2c19cd8-20190109002738/b.txt','L417','R421','S'),(1022,7,1,5,'<p>\r\n<br/>        public ListField(String name, String humanName, List&lt;String&gt; defaultValue, Map&lt;String, String&gt; values, String description, Optional isOptional, Attribute... attributes) {\r\n<br/>            super(FIELD_TYPE, name, humanName, description, isOptional);\r\n<br/>            this.defaultValue = defaultValue;\r\n<br/>            this.values = values;\r\n<br/>    -\r\n<br/>    -        this.attributes = new ArrayList&lt;&gt;();\r\n<br/>    -        if (attributes != null) {\r\n<br/>    -            for (Attribute attribute : attributes) {\r\n<br/>    -                this.attributes.add(attribute.toString().toLowerCase(Locale.ENGLISH));\r\n<br/>    -            }\r\n<br/>    -        }\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>        public ListField(String name, String humanName, List&lt;String&gt; defaultValue, Map&lt;String, String&gt; values, String description, Optional isOptional, Attribute... attributes) {\r\n<br/>            super(FIELD_TYPE, name, humanName, description, isOptional);\r\n<br/>            this.defaultValue = defaultValue;\r\n<br/>            this.values = values;\r\n<br/>    +        this.attributes = Arrays.stream(attributes)\r\n<br/>    +                .map(attribute -&gt; attribute.toString().toLowerCase(Locale.ENGLISH))\r\n<br/>    +                .collect(Collectors.toList());\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:27:42','2019-01-09 00:27:43','diff-d663fea3b2dce1447b9948bc83ad3683-20190109002742','https://github.com/Graylog2/graylog2-server/commit/50f59c0f17786f1ac180037728e4c8486ef873ae#diff-d663fea3b2dce1447b9948bc83ad3683','/var/www/QARefactorings/app/webroot/files/diff-d663fea3b2dce1447b9948bc83ad3683-20190109002742/a.txt','/var/www/QARefactorings/app/webroot/files/diff-d663fea3b2dce1447b9948bc83ad3683-20190109002742/b.txt','L46','R49','S'),(1023,1,1,5,'<p>\r\n<br/>        private void createReminderAlarmsDelayed(final Context context)\r\n<br/>        {\r\n<br/>    -        new Handler().postDelayed(new Runnable()\r\n<br/>    -        {\r\n<br/>    -            @Override\r\n<br/>    -            public void run()\r\n<br/>    -            {\r\n<br/>    -                ReminderUtils.createReminderAlarms(context);\r\n<br/>    -            }\r\n<br/>    -        }, 5000);\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>        private void createReminderAlarmsDelayed(final Context context)\r\n<br/>        {\r\n<br/>    +        new Handler().postDelayed(() -&gt; ReminderUtils.createReminderAlarms(context), 5000);\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:27:47','2019-01-09 00:27:48','diff-1772454fe9f81a5d5335a08354ea68be-20190109002747','https://github.com/iSoron/uhabits/commit/7e8a2a0c1c44b8b8b8e6419095dce25eeed41c73#diff-1772454fe9f81a5d5335a08354ea68be','/var/www/QARefactorings/app/webroot/files/diff-1772454fe9f81a5d5335a08354ea68be-20190109002747/a.txt','/var/www/QARefactorings/app/webroot/files/diff-1772454fe9f81a5d5335a08354ea68be-20190109002747/b.txt','L85','R101','S'),(1024,1,1,5,'<p>\r\n<br/>        @Test\r\n<br/>        public void testExportCSV() throws Throwable\r\n<br/>        {\r\n<br/>    -        ExportDBTask task = new ExportDBTask(null);\r\n<br/>    -        task.setListener(new ExportDBTask.Listener()\r\n<br/>    -        {\r\n<br/>    -            @Override\r\n<br/>    -            public void onExportDBFinished(String filename)\r\n<br/>    -            {\r\n<br/>    -                assertThat(filename, is(not(nullValue())));\r\n<br/>    -                File f = new File(filename);\r\n<br/>    -                assertTrue(f.exists());\r\n<br/>    -                assertTrue(f.canRead());\r\n<br/>    -            }\r\n<br/>            });\r\n<br/>    -        task.execute();\r\n<br/>            waitForAsyncTasks();\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>        @Test\r\n<br/>        public void testExportCSV() throws Throwable\r\n<br/>        {\r\n<br/>    +        ExportDBTask task = new ExportDBTask(filename -&gt; {\r\n<br/>    +            assertThat(filename, is(not(nullValue())));\r\n<br/>    +            File f = new File(filename);\r\n<br/>    +            assertTrue(f.exists());\r\n<br/>    +            assertTrue(f.canRead());\r\n<br/>            });\r\n<br/>    +        taskRunner.execute(task);\r\n<br/>            waitForAsyncTasks();\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:27:51','2019-01-09 00:27:52','diff-d1aadeca7890eb5e0471d5d3ef093f3f-20190109002751','https://github.com/iSoron/uhabits/commit/d54de9df89b23e4a9c57dcf1cf5c2e639cb09bd9#diff-d1aadeca7890eb5e0471d5d3ef093f3f','/var/www/QARefactorings/app/webroot/files/diff-d1aadeca7890eb5e0471d5d3ef093f3f-20190109002751/a.txt','/var/www/QARefactorings/app/webroot/files/diff-d1aadeca7890eb5e0471d5d3ef093f3f-20190109002751/b.txt','L48','R60','S'),(1025,1,1,5,'<p>\r\n<br/>            @Inject\r\n<br/>    -        public FactoryTemplateProcessor(final Configuration config, final InjectionManager injectionManager,\r\n<br/>    -                                        @Optional final ServletContext servletContext) {\r\n<br/>    -            super(config, servletContext, \"factory\", \"fct\");\r\n<br/>    -\r\n<br/>    -            this.factory = getTemplateObjectFactory(injectionManager, TestFactory.class, Values.lazy(new Value&lt;TestFactory&gt;() {\r\n<br/>    -                @Override\r\n<br/>    -                public TestFactory get() {\r\n<br/>    -                    return new TestFactory(\"Default Test Factory\");\r\n<br/>    -                }\r\n<br/>    -            }));\r\n<br/>            }\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>            @Inject\r\n<br/>    +        public FactoryTemplateProcessor(Configuration config, InjectionManager injectionManager) {\r\n<br/>    +            super(config, injectionManager.getInstance(ServletContext.class), \"factory\", \"fct\");\r\n<br/>    +\r\n<br/>    +            this.factory = getTemplateObjectFactory(injectionManager::createAndInitialize, TestFactory.class, Values.lazy(\r\n<br/>    +                    (Value&lt;TestFactory&gt;) () -&gt; new TestFactory(\"Default Test Factory\")));\r\n<br/>            }\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:27:55','2019-01-09 00:27:57','diff-aed7e7b1b3a81e3972f4fef2b4878370-20190109002755','https://github.com/jersey/jersey/commit/9709e30c8ef1c13478797c14e0ddaf90ecca9ccf#diff-aed7e7b1b3a81e3972f4fef2b4878370','/var/www/QARefactorings/app/webroot/files/diff-aed7e7b1b3a81e3972f4fef2b4878370-20190109002755/a.txt','/var/www/QARefactorings/app/webroot/files/diff-aed7e7b1b3a81e3972f4fef2b4878370-20190109002755/b.txt','L120','R126','S'),(1026,2,1,5,'<p>\r\n<br/>            // Calculations. (depend on recommended destinations)\r\n<br/>    -        final List&lt;Calculation&gt; calculations = new ArrayList&lt;&gt;(recommended.size());\r\n<br/>    -        for (final Destination dest : recommended) {\r\n<br/>    -            calculations.add(calculation.resolveTemplate(\"from\", \"Moon\").resolveTemplate(\"to\", dest.getDestination())\r\n<br/>    -                    .request().get(Calculation.class));\r\n<br/>    -        }\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>            // Calculations. (depend on recommended destinations)\r\n<br/>    +        final Map&lt;String, Calculation&gt; calculations = new HashMap&lt;&gt;();\r\n<br/>    +        recommended.stream().forEach(destination -&gt; {\r\n<br/>    +            try {\r\n<br/>    +                calculations.put(destination.getDestination(), calculation.resolveTemplate(\"from\", \"Moon\")\r\n<br/>    +                        .resolveTemplate(\"to\", destination.getDestination())\r\n<br/>    +                        .request().get(Calculation.class));\r\n<br/>    +            } catch (final Throwable throwable) {\r\n<br/>    +                errors.offer(\"Calculation: \" + throwable.getMessage());\r\n<br/>    +            }\r\n<br/>    +        });\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:28:00','2019-01-09 00:28:01','diff-64e48651bda9668a3a875987cf4e0d3e-20190109002800','https://github.com/jersey/jersey/commit/bcbacae45d02f6d65671b3ee91b9d32e899bb2c9#diff-64e48651bda9668a3a875987cf4e0d3e','/var/www/QARefactorings/app/webroot/files/diff-64e48651bda9668a3a875987cf4e0d3e-20190109002800/a.txt','/var/www/QARefactorings/app/webroot/files/diff-64e48651bda9668a3a875987cf4e0d3e-20190109002800/b.txt','L102','R135','S'),(1027,7,1,5,'<p>-code blob-code-context selected-line\">\r\n<br/>         */\r\n<br/>        static List&lt;ResourceMethod&gt; transform(final Resource parent, final List&lt;Data&gt; list) {\r\n<br/>    -        return Lists.transform(list, new Function&lt;Data, ResourceMethod&gt;() {\r\n<br/>    -            @Override\r\n<br/>    -            public ResourceMethod apply(Data data) {\r\n<br/>    -                return (data == null) ? null : new ResourceMethod(parent, data);\r\n<br/>    -            }\r\n<br/>    -        });\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'<p>-code blob-code-context selected-line\">\r\n<br/>         */\r\n<br/>        static List&lt;ResourceMethod&gt; transform(final Resource parent, final List&lt;Data&gt; list) {\r\n<br/>    +        return list.stream()\r\n<br/>    +                   .map(data1 -&gt; (data1 == null) ? null : new ResourceMethod(parent, data1))\r\n<br/>    +                   .collect(Collectors.toList());\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:28:04','2019-01-09 00:28:06','diff-ccaccee397a7ef2b2eeb0bc77955b0c6-20190109002804','https://github.com/jersey/jersey/commit/e5eb133193fa091b841f41ee5d1eab5611e45ec9#diff-ccaccee397a7ef2b2eeb0bc77955b0c6','/var/www/QARefactorings/app/webroot/files/diff-ccaccee397a7ef2b2eeb0bc77955b0c6-20190109002804/a.txt','/var/www/QARefactorings/app/webroot/files/diff-ccaccee397a7ef2b2eeb0bc77955b0c6-20190109002804/b.txt','L731','R732','S'),(1028,7,1,5,'<p>-code blob-code-context selected-line\">\r\n<br/>            public List&lt;Integer&gt; readFrom(final Class&lt;List&lt;Integer&gt;&gt; type, final Type genericType, final Annotation[] annotations,\r\n<br/>                                          final MediaType mediaType, final MultivaluedMap&lt;String, String&gt; httpHeaders,\r\n<br/>                                          final InputStream entityStream) throws IOException, WebApplicationException {\r\n<br/>    -            return Lists.transform(\r\n<br/>    -                    Arrays.asList(ReaderWriter.readFromAsString(entityStream, mediaType).split(\",\")),\r\n<br/>    -                    new Function&lt;String, Integer&gt;() {\r\n<br/>    -                        @Override\r\n<br/>    -                        public Integer apply(final String input) {\r\n<br/>    -                            return Integer.valueOf(input.trim());\r\n<br/>    -                        }\r\n<br/>    -                    }\r\n<br/>    -            );\r\n<br/>            }\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'<p>-code blob-code-context selected-line\">\r\n<br/>            public List&lt;Integer&gt; readFrom(final Class&lt;List&lt;Integer&gt;&gt; type, final Type genericType, final Annotation[] annotations,\r\n<br/>                                          final MediaType mediaType, final MultivaluedMap&lt;String, String&gt; httpHeaders,\r\n<br/>                                          final InputStream entityStream) throws IOException, WebApplicationException {\r\n<br/>    +            return Arrays.stream(ReaderWriter.readFromAsString(entityStream, mediaType).split(\",\"))\r\n<br/>    +                         .map(input -&gt; Integer.valueOf(input.trim()))\r\n<br/>    +                         .collect(Collectors.toList());\r\n<br/>            }\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:28:08','2019-01-09 00:28:10','diff-fc975bebe7796242f64c8a49d280117c-20190109002808','https://github.com/jersey/jersey/commit/e5eb133193fa091b841f41ee5d1eab5611e45ec9#diff-fc975bebe7796242f64c8a49d280117c','/var/www/QARefactorings/app/webroot/files/diff-fc975bebe7796242f64c8a49d280117c-20190109002808/a.txt','/var/www/QARefactorings/app/webroot/files/diff-fc975bebe7796242f64c8a49d280117c-20190109002808/b.txt','L132','R137','S'),(1029,2,1,5,'<p>           // Calculations. (depend on recommended destinations)\r\n<br/>    -        final List&lt;Calculation&gt; calculations = new ArrayList&lt;&gt;(recommended.size());\r\n<br/>    -        for (final Destination dest : recommended) {\r\n<br/>    -            calculations.add(calculation.resolveTemplate(\"from\", \"Moon\").resolveTemplate(\"to\", dest.getDestination())\r\n<br/>    -                    .request().get(Calculation.class));\r\n<br/>    -        }\r\n<br/>    <br/></p>',NULL,'<p>           // Calculations. (depend on recommended destinations)\r\n<br/>    +        final Map&lt;String, Calculation&gt; calculations = new HashMap&lt;&gt;();\r\n<br/>    +        recommended.stream().forEach(destination -&gt; {\r\n<br/>    +            try {\r\n<br/>    +                calculations.put(destination.getDestination(), calculation.resolveTemplate(\"from\", \"Moon\")\r\n<br/>    +                        .resolveTemplate(\"to\", destination.getDestination())\r\n<br/>    +                        .request().get(Calculation.class));\r\n<br/>    +            } catch (final Throwable throwable) {\r\n<br/>    +                errors.offer(\"Calculation: \" + throwable.getMessage());\r\n<br/>    +            }\r\n<br/>    +        });\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:28:13','2019-01-09 00:28:14','diff-64e48651bda9668a3a875987cf4e0d3e-20190109002813','https://github.com/jersey/jersey/commit/fc432d9bfc2682da0dcc99bacbb2e718259849fd#diff-64e48651bda9668a3a875987cf4e0d3e','/var/www/QARefactorings/app/webroot/files/diff-64e48651bda9668a3a875987cf4e0d3e-20190109002813/a.txt','/var/www/QARefactorings/app/webroot/files/diff-64e48651bda9668a3a875987cf4e0d3e-20190109002813/b.txt','L103','R135','S'),(1030,9,1,5,'<p>>\r\n<br/>        @Override\r\n<br/>    -    public CTLSchemaMetaInfoDto updateCTLSchemaMetaInfoScope(CTLSchemaMetaInfoDto ctlSchemaMetaInfo)\r\n<br/>                throws KaaAdminServiceException {\r\n<br/>    -        this.checkAuthority(KaaAuthorityDto.values());\r\n<br/>            try {\r\n<br/>    -            checkCTLSchemaEditScope(ctlSchemaMetaInfo.getTenantId(), ctlSchemaMetaInfo.getApplicationId());\r\n<br/>                return controlService.updateCTLSchemaMetaInfoScope(ctlSchemaMetaInfo);\r\n<br/>            } catch (Exception cause) {\r\n<br/>                throw Utils.handleException(cause);\r\n<br/>    @@ -3467,8 +3600,8 @@ public CtlSchemaFormDto getCTLSchemaFormByMetaInfoIdAndVer(String metaInfoId, in\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'<p>>\r\n<br/>    +\r\n<br/>        @Override\r\n<br/>    +    public CTLSchemaMetaInfoDto promoteScopeToTenant(String applicationId, String fqn)\r\n<br/>                throws KaaAdminServiceException {\r\n<br/>    +        checkAuthority(KaaAuthorityDto.values());\r\n<br/>    +        final String tenantId = getTenantId();\r\n<br/>    +        checkApplicationId(applicationId);\r\n<br/>    +        checkCTLSchemaEditScope(tenantId, applicationId);\r\n<br/>    +\r\n<br/>            try {\r\n<br/>    +            Set&lt;CTLSchemaDto&gt; dependencies = new HashSet&lt;&gt;();\r\n<br/>    +            List&lt;Integer&gt; versions = controlService.getAllCTLSchemaVersionsByFqnTenantIdAndApplicationId(fqn, tenantId, applicationId);\r\n<br/>    +\r\n<br/>    +            if(versions.isEmpty()) {\r\n<br/>    +                throw new KaaAdminServiceException(\"The requested item was not found!\", ServiceErrorCode.ITEM_NOT_FOUND);\r\n<br/>    +            }\r\n<br/>    +\r\n<br/>    +            // meta info same for all versions\r\n<br/>    +            CTLSchemaMetaInfoDto ctlSchemaMetaInfo = controlService.getCTLSchemaByFqnVersionTenantIdAndApplicationId(fqn, versions.get(0), tenantId, applicationId).getMetaInfo();\r\n<br/>    +            ctlSchemaMetaInfo.setApplicationId(null); //promote to tenant\r\n<br/>    +\r\n<br/>    +            // get dep of all versions\r\n<br/>    +            for (Integer version : versions) {\r\n<br/>    +                CTLSchemaDto schema = controlService.getCTLSchemaByFqnVersionTenantIdAndApplicationId(fqn, version, tenantId, applicationId);\r\n<br/>    +                Set&lt;CTLSchemaDto&gt; schemaDependents = schema.getDependencySet();\r\n<br/>    +                dependencies.addAll(schemaDependents.stream()\r\n<br/>    +                        .filter(dep -&gt; dep.getMetaInfo().getScope() == CTLSchemaScopeDto.APPLICATION)\r\n<br/>    +                        .collect(Collectors.toList()));\r\n<br/>    +            }\r\n<br/>    +\r\n<br/>    +            // check if CT has dependencies with application scope\r\n<br/>    +            if (!dependencies.isEmpty()) {\r\n<br/>    +                String message = \"Can\'t promote the common type version as it has references on following common type(s) with application scope: \"\r\n<br/>    +                        + asText(dependencies);\r\n<br/>    +                throw new KaaAdminServiceException(message, ServiceErrorCode.CONFLICT);\r\n<br/>    +            }\r\n<br/>    +\r\n<br/>                return controlService.updateCTLSchemaMetaInfoScope(ctlSchemaMetaInfo);\r\n<br/>            } catch (Exception cause) {\r\n<br/>                throw Utils.handleException(cause);\r\n<br/>    @@ -3467,8 +3600,8 @@ public CtlSchemaFormDto getCTLSchemaFormByMetaInfoIdAndVer(String metaInfoId, in\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:28:18','2019-01-09 00:28:19','diff-1d3c5b17cd31869a4251d3aed8a8ae67-20190109002818','https://github.com/kaaproject/kaa/commit/22179b96fc5f66319a63abfb52e96075d2ed4918#diff-1d3c5b17cd31869a4251d3aed8a8ae67','/var/www/QARefactorings/app/webroot/files/diff-1d3c5b17cd31869a4251d3aed8a8ae67-20190109002818/a.txt','/var/www/QARefactorings/app/webroot/files/diff-1d3c5b17cd31869a4251d3aed8a8ae67-20190109002818/b.txt','L3352','R3601','N'),(1031,1,1,5,'<p>\r\n<br/>         */\r\n<br/>        @Override\r\n<br/>    -    public EndpointProfileDto updateProfile(SyncContext context) {\r\n<br/>            EndpointProfileDto profile = context.getEndpointProfile();\r\n<br/>            if (!operationServerHash.equals(profile.getServerHash())) {\r\n<br/>                LOG.debug(\"[{}] Operations server hash changed from {} to {}\", context.getEndpointKey(), profile.getServerHash(),\r\n<br/>                        operationServerHash);\r\n<br/>                profile.setServerHash(operationServerHash);\r\n<br/>    -            context.setUpdateProfileRequired(true);\r\n<br/>    -        }\r\n<br/>    -\r\n<br/>    -        if (context.isUpdateProfileRequired()) {\r\n<br/>    -            context.setEndpointProfile(profileService.updateProfile(profile));\r\n<br/>            }\r\n<br/>    -        return context.getEndpointProfile();\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>         */\r\n<br/>        @Override\r\n<br/>    +    public SyncContext syncProfileServerHash(SyncContext context) {\r\n<br/>            EndpointProfileDto profile = context.getEndpointProfile();\r\n<br/>            if (!operationServerHash.equals(profile.getServerHash())) {\r\n<br/>                LOG.debug(\"[{}] Operations server hash changed from {} to {}\", context.getEndpointKey(), profile.getServerHash(),\r\n<br/>                        operationServerHash);\r\n<br/>                profile.setServerHash(operationServerHash);\r\n<br/>    +            context.setEndpointProfile(profileService.updateProfile(profile, (storedProfile, newProfile) -&gt; {\r\n<br/>    +                return storedProfile;\r\n<br/>    +            }));\r\n<br/>            }\r\n<br/>    +        return context;\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:28:22','2019-01-09 00:28:24','diff-9bfccbe0a376fd87d817fcda4dd76b29-20190109002822','https://github.com/kaaproject/kaa/commit/8e389a24730b68e1982a66a3ffc335900f47b19d#diff-9bfccbe0a376fd87d817fcda4dd76b29','/var/www/QARefactorings/app/webroot/files/diff-9bfccbe0a376fd87d817fcda4dd76b29-20190109002822/a.txt','/var/www/QARefactorings/app/webroot/files/diff-9bfccbe0a376fd87d817fcda4dd76b29-20190109002822/b.txt','L274','R327','S'),(1032,2,1,5,'<p>\r\n<br/>        @Override\r\n<br/>        public String getBody() {\r\n<br/>            StringBuilder buffer = new StringBuilder();\r\n<br/>    -        String delim = \"\";\r\n<br/>    -        for (int i = 0; i &lt; this.paramTypes.size(); i++) {\r\n<br/>    -            String paramType = this.paramTypes.get(i);\r\n<br/>    -            if (paramType != null &amp;&amp; !paramType.isEmpty()) {\r\n<br/>    -                buffer.append(delim).append(paramType).append(\" p\").append(i + 1);\r\n<br/>    -                delim = \", \";\r\n<br/>    -            }\r\n<br/>    -        }\r\n<br/>    -        return String.format(this.template, this.returnType, this.name, buffer.toString()).trim();\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>        @Override\r\n<br/>        public String getBody() {\r\n<br/>    +\r\n<br/>            StringBuilder buffer = new StringBuilder();\r\n<br/>    +        this.params.forEach((paramName, paramType) -&gt; {\r\n<br/>    +            buffer.append(buffer.length() == 0 ? \"\" : \", \");\r\n<br/>    +            buffer.append(paramType).append(\" \").append(paramName);\r\n<br/>    +        });\r\n<br/>    +\r\n<br/>    +        return String.format(DEFAULT_TEMPLATE, this.formatModifiers(modifiers), this.returnType, this.name, buffer.toString()).trim();\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:28:27','2019-01-09 00:28:28','diff-8959bb9f9175411018c491b97ae0806e-20190109002827','https://github.com/kaaproject/kaa/commit/bbda9ae93b8cbfea350d4fce0b7363876f7dce7c#diff-8959bb9f9175411018c491b97ae0806e','/var/www/QARefactorings/app/webroot/files/diff-8959bb9f9175411018c491b97ae0806e-20190109002827/a.txt','/var/www/QARefactorings/app/webroot/files/diff-8959bb9f9175411018c491b97ae0806e-20190109002827/b.txt','L36','R67','S'),(1033,1,1,5,'<p>\r\n<br/>            _subscriptions//\r\n<br/>    -              .add(tapEventEmitter.subscribe(new Action1&lt;Object&gt;() {\r\n<br/>    -                  @Override\r\n<br/>    -                  public void call(Object event) {\r\n<br/>    -                      if (event instanceof RxBusDemoFragment.TapEvent) {\r\n<br/>    -                          _showTapText();\r\n<br/>    -                      }\r\n<br/>                      }\r\n<br/>                  }));\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>            _subscriptions//\r\n<br/>    +              .add(tapEventEmitter.subscribe(event -&gt; {\r\n<br/>    +                  if (event instanceof RxBusDemoFragment.TapEvent) {\r\n<br/>    +                      _showTapText();\r\n<br/>                      }\r\n<br/>                  }));\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:28:32','2019-01-09 00:28:33','diff-325ebb5b674954b41de7b2f1caaac600-20190109002832','https://github.com/kaushikgopal/RxJava-Android-Samples/commit/a1cd646cf546e9ea773882c9af2f16886641cc30#diff-325ebb5b674954b41de7b2f1caaac600','/var/www/QARefactorings/app/webroot/files/diff-325ebb5b674954b41de7b2f1caaac600-20190109002832/a.txt','/var/www/QARefactorings/app/webroot/files/diff-325ebb5b674954b41de7b2f1caaac600-20190109002832/b.txt','L56','R59','S'),(1034,1,1,5,'<p>\r\n<br/>        private void _log(String logMsg) {\r\n<br/>            _logs.add(0, String.format(logMsg + \" [MainThread: %b]\", getMainLooper() == myLooper()));\r\n<br/>            // You can only do below stuff on main thread.\r\n<br/>    -        new Handler(getMainLooper()).post(new Runnable() {\r\n<br/>    -\r\n<br/>    -            @Override\r\n<br/>    -            public void run() {\r\n<br/>    -                _adapter.clear();\r\n<br/>    -                _adapter.addAll(_logs);\r\n<br/>    -            }\r\n<br/>            });\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>        private void _log(String logMsg) {\r\n<br/>            _logs.add(0, String.format(logMsg + \" [MainThread: %b]\", getMainLooper() == myLooper()));\r\n<br/>            // You can only do below stuff on main thread.\r\n<br/>    +        new Handler(getMainLooper()).post(() -&gt; {\r\n<br/>    +            _adapter.clear();\r\n<br/>    +            _adapter.addAll(_logs);\r\n<br/>            });\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:28:35','2019-01-09 00:28:36','diff-596a76be3d75c06208d9cf419e05c61d-20190109002835','https://github.com/kaushikgopal/RxJava-Android-Samples/commit/a1cd646cf546e9ea773882c9af2f16886641cc30#diff-596a76be3d75c06208d9cf419e05c61d','/var/www/QARefactorings/app/webroot/files/diff-596a76be3d75c06208d9cf419e05c61d-20190109002835/a.txt','/var/www/QARefactorings/app/webroot/files/diff-596a76be3d75c06208d9cf419e05c61d-20190109002835/b.txt','L190','R200','S'),(1035,5,1,5,'<p>\r\n<br/>            _subscriptions.add(//\r\n<br/>                  Observable.interval(INITIAL_DELAY, POLLING_INTERVAL, TimeUnit.MILLISECONDS)\r\n<br/>    -                    .map(new Func1&lt;Long, String&gt;() {\r\n<br/>    -                        @Override\r\n<br/>    -                        public String call(Long heartBeat) {\r\n<br/>    -                            return _doNetworkCallAndGetStringResult(heartBeat);\r\n<br/>    -                        }\r\n<br/>    -                    }).take(pollCount)\r\n<br/>    -                    .doOnSubscribe(new Action0() {\r\n<br/>    -                        @Override\r\n<br/>    -                        public void call() {\r\n<br/>    -                            _log(String.format(\"Start simple polling - %s\", _counter));\r\n<br/>    -                        }\r\n<br/>    -                    })\r\n<br/>    -                    .subscribe(new Action1&lt;String&gt;() {\r\n<br/>    -                        @Override\r\n<br/>    -                        public void call(String taskName) {\r\n<br/>    -                            _log(String.format(Locale.US, \"Executing polled task [%s] now time : [xx:%02d]\",\r\n<br/>    -                                  taskName, _getSecondHand()));\r\n<br/>    -                        }\r\n<br/>                        })\r\n<br/>            );\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>            _subscriptions.add(//\r\n<br/>                  Observable.interval(INITIAL_DELAY, POLLING_INTERVAL, TimeUnit.MILLISECONDS)\r\n<br/>    +                    .map(this::_doNetworkCallAndGetStringResult)//\r\n<br/>    +                    .take(pollCount)\r\n<br/>    +                    .doOnSubscribe(() -&gt;\r\n<br/>    +                          _log(String.format(\"Start simple polling - %s\", _counter)))\r\n<br/>    +                    .subscribe(taskName -&gt; {\r\n<br/>    +                        _log(String.format(Locale.US, \"Executing polled task [%s] now time : [xx:%02d]\",\r\n<br/>    +                              taskName, _getSecondHand()));\r\n<br/>                        })\r\n<br/>            );\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:28:39','2019-01-09 00:28:40','diff-b70350cbaa584e955f89a1c444a466c1-20190109002839','https://github.com/kaushikgopal/RxJava-Android-Samples/commit/a1cd646cf546e9ea773882c9af2f16886641cc30#diff-b70350cbaa584e955f89a1c444a466c1','/var/www/QARefactorings/app/webroot/files/diff-b70350cbaa584e955f89a1c444a466c1-20190109002839/a.txt','/var/www/QARefactorings/app/webroot/files/diff-b70350cbaa584e955f89a1c444a466c1-20190109002839/b.txt','L80','R90','S'),(1036,1,1,5,'<p>\r\n<br/>        @Produces\r\n<br/>        @CustomHumanTaskService\r\n<br/>        @Override\r\n<br/>        public CommandBasedTaskService produceTaskService() {\r\n<br/>    -        return super.produceTaskService();\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>        @Produces\r\n<br/>        @CustomHumanTaskService\r\n<br/>        @Override\r\n<br/>        public CommandBasedTaskService produceTaskService() {\r\n<br/>    +        CommandBasedTaskService taskServiceMock = Mockito.mock(CommandBasedTaskService.class);\r\n<br/>    +        Mockito.when(taskServiceMock.execute(Mockito.any())).thenAnswer((InvocationOnMock invocation) -&gt; {\r\n<br/>    +            throw new CustomTaskServiceInUse();\r\n<br/>    +        });\r\n<br/>    +        return taskServiceMock;\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:28:43','2019-01-09 00:28:44','diff-81c4ecd721868f3875ca8390cb33d9ac-20190109002843','https://github.com/kiegroup/jbpm/commit/0b6955d69fc377d421dd23e2f2d30872f4ce62cb#diff-81c4ecd721868f3875ca8390cb33d9ac','/var/www/QARefactorings/app/webroot/files/diff-81c4ecd721868f3875ca8390cb33d9ac-20190109002843/a.txt','/var/www/QARefactorings/app/webroot/files/diff-81c4ecd721868f3875ca8390cb33d9ac-20190109002843/b.txt','L45','R42','S'),(1037,2,1,5,'<p>\r\n<br/>        @Override\r\n<br/>    -    public Object getInstance() {\r\n<br/>    -        return instance;\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>        @Override\r\n<br/>    +    public void printSetup(StringBuilder sb) {\r\n<br/>    +        sb.append(String.format(\"        //%s%n\", instanceToString));\r\n<br/>    +        fields.forEach(f -&gt; f.print(sb));\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:28:47','2019-01-09 00:28:48','diff-f86139d937eedc85f31b14b05c065f63-20190109002847','https://github.com/kiegroup/optaplanner/commit/08ba3fad475d86cb639ff16d23b0188cf20f99f5#diff-f86139d937eedc85f31b14b05c065f63','/var/www/QARefactorings/app/webroot/files/diff-f86139d937eedc85f31b14b05c065f63-20190109002847/a.txt','/var/www/QARefactorings/app/webroot/files/diff-f86139d937eedc85f31b14b05c065f63-20190109002847/b.txt','L159','R178','S'),(1038,1,1,5,'<p>\r\n<br/>    -        SelectionSorter&lt;TestdataSolution, TestdataValue&gt; sorter = new SelectionSorter&lt;TestdataSolution, TestdataValue&gt;() {\r\n<br/>    -            public void sort(ScoreDirector scoreDirector, List&lt;TestdataValue&gt; selectionList) {\r\n<br/>    -                Collections.sort(selectionList, new Comparator&lt;TestdataValue&gt;() {\r\n<br/>    -                    public int compare(TestdataValue a, TestdataValue b) {\r\n<br/>    -                        return a.getCode().compareTo(b.getCode());\r\n<br/>    -                    }\r\n<br/>    -                });\r\n<br/>    -            }\r\n<br/>    -        };\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>    +        SelectionSorter&lt;TestdataSolution, TestdataValue&gt; sorter = (scoreDirector, selectionList)\r\n<br/>    +                -&gt; Collections.sort(selectionList, (a, b) -&gt; a.getCode().compareTo(b.getCode()));\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:28:51','2019-01-09 00:28:52','diff-786d5dfd7f5e10d3aebe3ecd4dca3070-20190109002851','https://github.com/kiegroup/optaplanner/commit/0c371e68d7e694e9b1ec472329a9c6a02ee07e24#diff-786d5dfd7f5e10d3aebe3ecd4dca3070','/var/www/QARefactorings/app/webroot/files/diff-786d5dfd7f5e10d3aebe3ecd4dca3070-20190109002851/a.txt','/var/www/QARefactorings/app/webroot/files/diff-786d5dfd7f5e10d3aebe3ecd4dca3070-20190109002851/b.txt','L62','R65','S'),(1039,1,1,5,'<p>\r\n<br/>    -        SelectionProbabilityWeightFactory&lt;DummyMove&gt; probabilityWeightFactory = new SelectionProbabilityWeightFactory&lt;DummyMove&gt;() {\r\n<br/>    -            public double createProbabilityWeight(ScoreDirector scoreDirector, DummyMove move) {\r\n<br/>    -                if (move.getCode().equals(\"e1\")) {\r\n<br/>                        return 1000.0;\r\n<br/>    -                } else if (move.getCode().equals(\"e2\")) {\r\n<br/>                        return 200.0;\r\n<br/>    -                } else if (move.getCode().equals(\"e3\")) {\r\n<br/>                        return 30.0;\r\n<br/>    -                } else if (move.getCode().equals(\"e4\")) {\r\n<br/>                        return 4.0;\r\n<br/>    -                } else {\r\n<br/>                        throw new IllegalStateException(\"Unknown move (\" + move + \").\");\r\n<br/>    -                }\r\n<br/>                }\r\n<br/>            };\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>    +        SelectionProbabilityWeightFactory&lt;TestdataSolution, DummyMove&gt; probabilityWeightFactory\r\n<br/>    +                = (scoreDirector, move) -&gt; {\r\n<br/>    +            switch (move.getCode()) {\r\n<br/>    +                case \"e1\":\r\n<br/>                        return 1000.0;\r\n<br/>    +                case \"e2\":\r\n<br/>                        return 200.0;\r\n<br/>    +                case \"e3\":\r\n<br/>                        return 30.0;\r\n<br/>    +                case \"e4\":\r\n<br/>                        return 4.0;\r\n<br/>    +                default:\r\n<br/>                        throw new IllegalStateException(\"Unknown move (\" + move + \").\");\r\n<br/>                }\r\n<br/>            };\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:28:55','2019-01-09 00:28:56','diff-8674b26e82b057866d6ec76cfbadb8fe-20190109002855','https://github.com/kiegroup/optaplanner/commit/0c371e68d7e694e9b1ec472329a9c6a02ee07e24#diff-8674b26e82b057866d6ec76cfbadb8fe','/var/www/QARefactorings/app/webroot/files/diff-8674b26e82b057866d6ec76cfbadb8fe-20190109002855/a.txt','/var/www/QARefactorings/app/webroot/files/diff-8674b26e82b057866d6ec76cfbadb8fe-20190109002855/b.txt','L41','R58','S'),(1040,1,1,5,'<p>\r\n<br/>        @Test\r\n<br/>        public void serializeAndDeserialize() {\r\n<br/>    -        HardSoftBigDecimalScore input = HardSoftBigDecimalScore.valueOf(\r\n<br/>    -                new BigDecimal(\"-12.3\"), new BigDecimal(\"3400.5\"));\r\n<br/>    -        PlannerTestUtils.serializeAndDeserializeWithAll(input,\r\n<br/>    -                new PlannerTestUtils.OutputAsserter&lt;HardSoftBigDecimalScore&gt;() {\r\n<br/>    -                    @Override\r\n<br/>    -                    public void assertOutput(HardSoftBigDecimalScore output) {\r\n<br/>    -                        assertEquals(new BigDecimal(\"-12.3\"), output.getHardScore());\r\n<br/>    -                        assertEquals(new BigDecimal(\"3400.5\"), output.getSoftScore());\r\n<br/>    -                    }\r\n<br/>                    }\r\n<br/>            );\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>        @Test\r\n<br/>        public void serializeAndDeserialize() {\r\n<br/>    +        PlannerTestUtils.serializeAndDeserializeWithAll(\r\n<br/>    +                HardSoftBigDecimalScore.valueOfInitialized(new BigDecimal(\"-12.3\"), new BigDecimal(\"3400.5\")),\r\n<br/>    +                output -&gt; {\r\n<br/>    +                    assertEquals(0, output.getInitScore());\r\n<br/>    +                    assertEquals(new BigDecimal(\"-12.3\"), output.getHardScore());\r\n<br/>    +                    assertEquals(new BigDecimal(\"3400.5\"), output.getSoftScore());\r\n<br/>    +                }\r\n<br/>    +        );\r\n<br/>    +        PlannerTestUtils.serializeAndDeserializeWithAll(\r\n<br/>    +                HardSoftBigDecimalScore.valueOf(-7, new BigDecimal(\"-12.3\"), new BigDecimal(\"3400.5\")),\r\n<br/>    +                output -&gt; {\r\n<br/>    +                    assertEquals(-7, output.getInitScore());\r\n<br/>    +                    assertEquals(new BigDecimal(\"-12.3\"), output.getHardScore());\r\n<br/>    +                    assertEquals(new BigDecimal(\"3400.5\"), output.getSoftScore());\r\n<br/>                    }\r\n<br/>            );\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:29:00','2019-01-09 00:29:01','diff-444b69fe4a1cc121a1333d7784704f5e-20190109002900','https://github.com/kiegroup/optaplanner/commit/2946d661959a3209a85c03ae000abacee8f88422#diff-444b69fe4a1cc121a1333d7784704f5e','/var/www/QARefactorings/app/webroot/files/diff-444b69fe4a1cc121a1333d7784704f5e-20190109002900/a.txt','/var/www/QARefactorings/app/webroot/files/diff-444b69fe4a1cc121a1333d7784704f5e-20190109002900/b.txt','L125','R193','S'),(1041,1,1,5,'<p>\r\n<br/>        public void deleteProcess(final CloudProcess process) {\r\n<br/>            logger.info(\"Scheduling delete of process ({}).\", process);\r\n<br/>    -        doProblemFactChange(new ProblemFactChange() {\r\n<br/>    -            public void doChange(ScoreDirector scoreDirector) {\r\n<br/>    -                CloudBalance cloudBalance = (CloudBalance) scoreDirector.getWorkingSolution();\r\n<br/>    -                // Remove the planning entity itself\r\n<br/>    -                for (Iterator&lt;CloudProcess&gt; it = cloudBalance.getProcessList().iterator(); it.hasNext(); ) {\r\n<br/>    -                    CloudProcess workingProcess = it.next();\r\n<br/>    -                    if (Objects.equals(workingProcess, process)) {\r\n<br/>    -                        scoreDirector.beforeEntityRemoved(workingProcess);\r\n<br/>    -                        it.remove(); // remove from list\r\n<br/>    -                        scoreDirector.afterEntityRemoved(workingProcess);\r\n<br/>    -                        break;\r\n<br/>    -                    }\r\n<br/>                    }\r\n<br/>    -                scoreDirector.triggerVariableListeners();\r\n<br/>                }\r\n<br/>            });\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>        public void deleteProcess(final CloudProcess process) {\r\n<br/>            logger.info(\"Scheduling delete of process ({}).\", process);\r\n<br/>    +        doProblemFactChange(scoreDirector -&gt; {\r\n<br/>    +            CloudBalance cloudBalance = scoreDirector.getWorkingSolution();\r\n<br/>    +            // Remove the planning entity itself\r\n<br/>    +            for (Iterator&lt;CloudProcess&gt; it = cloudBalance.getProcessList().iterator(); it.hasNext(); ) {\r\n<br/>    +                CloudProcess workingProcess = it.next();\r\n<br/>    +                if (Objects.equals(workingProcess, process)) {\r\n<br/>    +                    scoreDirector.beforeEntityRemoved(workingProcess);\r\n<br/>    +                    it.remove(); // remove from list\r\n<br/>    +                    scoreDirector.afterEntityRemoved(workingProcess);\r\n<br/>    +                    break;\r\n<br/>                    }\r\n<br/>                }\r\n<br/>    +            scoreDirector.triggerVariableListeners();\r\n<br/>            });\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:29:05','2019-01-09 00:29:06','diff-c00b643f2fa9fd24f5e41df33667dab3-20190109002905','https://github.com/kiegroup/optaplanner/commit/84c379549cbf3c84948bec3e44452749582f887e#diff-c00b643f2fa9fd24f5e41df33667dab3','/var/www/QARefactorings/app/webroot/files/diff-c00b643f2fa9fd24f5e41df33667dab3-20190109002905/a.txt','/var/www/QARefactorings/app/webroot/files/diff-c00b643f2fa9fd24f5e41df33667dab3-20190109002905/b.txt','L314','R326','S'),(1042,1,1,5,'<p>\r\n<br/>        public static SingletonInverseVariableSupply mockSingletonInverseVariableSupply(\r\n<br/>                final TestdataChainedEntity[] allEntities) {\r\n<br/>    -        return new SingletonInverseVariableSupply() {\r\n<br/>    -            @Override\r\n<br/>    -            public Object getInverseSingleton(Object planningValue) {\r\n<br/>    -                for (TestdataChainedEntity entity : allEntities) {\r\n<br/>    -                    if (entity.getChainedObject().equals(planningValue)) {\r\n<br/>    -                        return entity;\r\n<br/>    -                    }\r\n<br/>                    }\r\n<br/>    -                return null;\r\n<br/>                }\r\n<br/>            };\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>        public static SingletonInverseVariableSupply mockSingletonInverseVariableSupply(\r\n<br/>                final TestdataChainedEntity[] allEntities) {\r\n<br/>    +        return planningValue -&gt; {\r\n<br/>    +            for (TestdataChainedEntity entity : allEntities) {\r\n<br/>    +                if (entity.getChainedObject().equals(planningValue)) {\r\n<br/>    +                    return entity;\r\n<br/>                    }\r\n<br/>                }\r\n<br/>    +            return null;\r\n<br/>            };\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:29:09','2019-01-09 00:29:11','diff-6dbcd7b0eb0e8bfaec46ef6585f8dc6a-20190109002909','https://github.com/kiegroup/optaplanner/commit/e12ab0cc52d233ce908210a415ff0a0112a9a7bb#diff-6dbcd7b0eb0e8bfaec46ef6585f8dc6a','/var/www/QARefactorings/app/webroot/files/diff-6dbcd7b0eb0e8bfaec46ef6585f8dc6a-20190109002909/a.txt','/var/www/QARefactorings/app/webroot/files/diff-6dbcd7b0eb0e8bfaec46ef6585f8dc6a-20190109002909/b.txt','L235','R192','S'),(1043,1,1,5,'<p>\r\n<br/>            final List&lt;Object&gt; valueList = Arrays.&lt;Object&gt;asList(values);\r\n<br/>    -        when(valueSelector.iterator(any())).thenAnswer(new Answer&lt;Iterator&lt;Object&gt;&gt;() {\r\n<br/>    -            @Override\r\n<br/>    -            public Iterator&lt;Object&gt; answer(InvocationOnMock invocation) throws Throwable {\r\n<br/>    -                return valueList.iterator();\r\n<br/>    -            }\r\n<br/>    -        });\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>            final List&lt;Object&gt; valueList = Arrays.&lt;Object&gt;asList(values);\r\n<br/>    +        when(valueSelector.iterator(any())).thenAnswer(invocation -&gt; valueList.iterator());\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:29:14','2019-01-09 00:29:15','diff-6dbcd7b0eb0e8bfaec46ef6585f8dc6a-20190109002914','https://github.com/kiegroup/optaplanner/commit/e12ab0cc52d233ce908210a415ff0a0112a9a7bb#diff-6dbcd7b0eb0e8bfaec46ef6585f8dc6a','/var/www/QARefactorings/app/webroot/files/diff-6dbcd7b0eb0e8bfaec46ef6585f8dc6a-20190109002914/a.txt','/var/www/QARefactorings/app/webroot/files/diff-6dbcd7b0eb0e8bfaec46ef6585f8dc6a-20190109002914/b.txt','L131','R113','S'),(1044,1,1,5,'<p>\r\n<br/>            TestdataSetBasedSolution original = new TestdataSetBasedSolution(\"solution\");\r\n<br/>    -        Comparator&lt;TestdataValue&gt; valueComparator = new Comparator&lt;TestdataValue&gt;() {\r\n<br/>    -            @Override\r\n<br/>    -            public int compare(TestdataValue a, TestdataValue b) {\r\n<br/>    -                return b.getCode().compareTo(a.getCode()); // Reverse alphabetic\r\n<br/>    -            }\r\n<br/>    -        };\r\n<br/>    -        Set&lt;TestdataValue&gt; valueSet = new TreeSet&lt;&gt;(valueComparator);\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>            TestdataSetBasedSolution original = new TestdataSetBasedSolution(\"solution\");\r\n<br/>    +        Set&lt;TestdataValue&gt; valueSet = new TreeSet&lt;&gt;((a1, b1) -&gt; {\r\n<br/>    +            return b1.getCode().compareTo(a1.getCode()); // Reverse alphabetic\r\n<br/>    +        });\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:29:18','2019-01-09 00:29:19','diff-a870f956ab46d1ea20a267b7b7e178aa-20190109002918','https://github.com/kiegroup/optaplanner/commit/e12ab0cc52d233ce908210a415ff0a0112a9a7bb#diff-a870f956ab46d1ea20a267b7b7e178aa','/var/www/QARefactorings/app/webroot/files/diff-a870f956ab46d1ea20a267b7b7e178aa-20190109002918/a.txt','/var/www/QARefactorings/app/webroot/files/diff-a870f956ab46d1ea20a267b7b7e178aa-20190109002918/b.txt','L394','R398','S'),(1045,1,1,5,'<p>\r\n<br/>            original.setValueSet(valueSet);\r\n<br/>    -        Comparator&lt;TestdataSetBasedEntity&gt; entityComparator = new Comparator&lt;TestdataSetBasedEntity&gt;() {\r\n<br/>    -            @Override\r\n<br/>    -            public int compare(TestdataSetBasedEntity a, TestdataSetBasedEntity b) {\r\n<br/>    -                return b.getCode().compareTo(a.getCode()); // Reverse alphabetic\r\n<br/>    -            }\r\n<br/>            };\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>            original.setValueSet(valueSet);\r\n<br/>    +        Comparator&lt;TestdataSetBasedEntity&gt; entityComparator = (a1, b1) -&gt; {\r\n<br/>    +            return b1.getCode().compareTo(a1.getCode()); // Reverse alphabetic\r\n<br/>            };\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:29:21','2019-01-09 00:29:23','diff-a870f956ab46d1ea20a267b7b7e178aa-20190109002921','https://github.com/kiegroup/optaplanner/commit/e12ab0cc52d233ce908210a415ff0a0112a9a7bb#diff-a870f956ab46d1ea20a267b7b7e178aa','/var/www/QARefactorings/app/webroot/files/diff-a870f956ab46d1ea20a267b7b7e178aa-20190109002921/a.txt','/var/www/QARefactorings/app/webroot/files/diff-a870f956ab46d1ea20a267b7b7e178aa-20190109002921/b.txt','L403','R403','S'),(1046,1,1,5,'<p>\r\n<br/>        @NonNull\r\n<br/>        private Observable&lt;byte[]&gt; setupCharacteristicNotification(BluetoothGattDescriptor bluetoothGattDescriptor, boolean enabled) {\r\n<br/>    -        final BluetoothGattCharacteristic bluetoothGattCharacteristic = bluetoothGattDescriptor.getCharacteristic();\r\n<br/>    -        return bluetoothGatt.setCharacteristicNotification(bluetoothGattCharacteristic, enabled)\r\n<br/>    -                ? writeDescriptor(bluetoothGattDescriptor, enabled ? ENABLE_NOTIFICATION_VALUE : DISABLE_NOTIFICATION_VALUE)\r\n<br/>    -                : Observable.error(new BleCannotSetCharacteristicNotificationException(bluetoothGattCharacteristic));\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>        @NonNull\r\n<br/>        private Observable&lt;byte[]&gt; setupCharacteristicNotification(BluetoothGattDescriptor bluetoothGattDescriptor, boolean enabled) {\r\n<br/>    +        final BluetoothGattCharacteristic characteristic = bluetoothGattDescriptor.getCharacteristic();\r\n<br/>    +\r\n<br/>    +        if (bluetoothGatt.setCharacteristicNotification(characteristic, enabled)) {\r\n<br/>    +            return writeDescriptor(bluetoothGattDescriptor, enabled ? ENABLE_NOTIFICATION_VALUE : DISABLE_NOTIFICATION_VALUE)\r\n<br/>    +                    .onErrorResumeNext(throwable -&gt; error(new BleCannotSetCharacteristicNotificationException(characteristic)));\r\n<br/>    +        } else {\r\n<br/>    +            return error(new BleCannotSetCharacteristicNotificationException(characteristic));\r\n<br/>    +        }\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:29:25','2019-01-09 00:29:26','diff-70127ee1ccd288fc48bab1e941023361-20190109002925','https://github.com/Polidea/RxAndroidBle/commit/3ab592ad3366e3961e768acf02802c2c16ca7911#diff-70127ee1ccd288fc48bab1e941023361','/var/www/QARefactorings/app/webroot/files/diff-70127ee1ccd288fc48bab1e941023361-20190109002925/a.txt','/var/www/QARefactorings/app/webroot/files/diff-70127ee1ccd288fc48bab1e941023361-20190109002925/b.txt','L129','R142','S'),(1047,13,1,5,'<p>\r\n<br/>        @Override\r\n<br/>        public Observable&lt;byte[]&gt; writeDescriptor(UUID serviceUuid, UUID characteristicUuid, UUID descriptorUuid, byte[] data) {\r\n<br/>    -        discoverServices()\r\n<br/>                    .flatMap(rxBleDeviceServices -&gt; rxBleDeviceServices.getDescriptor(serviceUuid, characteristicUuid, descriptorUuid))\r\n<br/>    -                .map(bluetoothGattDescriptor -&gt; bluetoothGattDescriptor.setValue(data)).subscribe();\r\n<br/>    -        return Observable.just(data);\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>        @Override\r\n<br/>        public Observable&lt;byte[]&gt; writeDescriptor(UUID serviceUuid, UUID characteristicUuid, UUID descriptorUuid, byte[] data) {\r\n<br/>    +        return discoverServices()\r\n<br/>                    .flatMap(rxBleDeviceServices -&gt; rxBleDeviceServices.getDescriptor(serviceUuid, characteristicUuid, descriptorUuid))\r\n<br/>    +                .map(bluetoothGattDescriptor -&gt; bluetoothGattDescriptor.setValue(data)).flatMap(ignored -&gt; Observable.just(data));\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:29:29','2019-01-09 00:29:30','diff-e16a3667ed79c289ca17f768878f1115-20190109002929','https://github.com/Polidea/RxAndroidBle/commit/4f8b60d952305335224b50ce00c0e2c25e23e872#diff-e16a3667ed79c289ca17f768878f1115','/var/www/QARefactorings/app/webroot/files/diff-e16a3667ed79c289ca17f768878f1115-20190109002929/a.txt','/var/www/QARefactorings/app/webroot/files/diff-e16a3667ed79c289ca17f768878f1115-20190109002929/b.txt','L61','R67','N'),(1048,3,1,5,'<p>\r\n<br/>        @NonNull\r\n<br/>        private Observable&lt;RxBleScanResult&gt; createScanOperation(@Nullable UUID[] filterServiceUUIDs) {\r\n<br/>    -        return Observable.defer(() -&gt; Observable.from(getFilteredDevicesList(filterServiceUUIDs))\r\n<br/>                    .map(rxBleDevice -&gt; {\r\n<br/>                        RxBleDeviceMock rxBleDeviceMock = (RxBleDeviceMock) rxBleDevice;\r\n<br/>                        return convertToPublicScanResult(rxBleDeviceMock, rxBleDeviceMock.getRssi(), rxBleDeviceMock.getScanRecord());\r\n<br/>                    })\r\n<br/>                    .share());\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>        @NonNull\r\n<br/>        private Observable&lt;RxBleScanResult&gt; createScanOperation(@Nullable UUID[] filterServiceUUIDs) {\r\n<br/>    +        return Observable.defer(() -&gt; Observable.from(discoverableDevices.values())\r\n<br/>    +                                                .filter(rxBleDevice -&gt; filterDevice(rxBleDevice, filterServiceUUIDs))\r\n<br/>                    .map(rxBleDevice -&gt; {\r\n<br/>                        RxBleDeviceMock rxBleDeviceMock = (RxBleDeviceMock) rxBleDevice;\r\n<br/>                        return convertToPublicScanResult(rxBleDeviceMock, rxBleDeviceMock.getRssi(), rxBleDeviceMock.getScanRecord());\r\n<br/>                    })\r\n<br/>                    .share());\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:29:33','2019-01-09 00:29:35','diff-5fa1ac0351dd354aeae7cd0e10312451-20190109002933','https://github.com/Polidea/RxAndroidBle/commit/f8e71662b7ec9fccefdd7ecd3a4cc5d7d6cf1bde#diff-5fa1ac0351dd354aeae7cd0e10312451','/var/www/QARefactorings/app/webroot/files/diff-5fa1ac0351dd354aeae7cd0e10312451-20190109002933/a.txt','/var/www/QARefactorings/app/webroot/files/diff-5fa1ac0351dd354aeae7cd0e10312451-20190109002933/b.txt','L250','R267','N'),(1049,13,1,5,'<p>\r\n<br/>        @Override\r\n<br/>        public Observable&lt;byte[]&gt; writeCharacteristic(UUID characteristicUuid, byte[] data) {\r\n<br/>    -        getCharacteristic(characteristicUuid).map(characteristic -&gt; characteristic.setValue(data)).subscribe();\r\n<br/>    -        return Observable.just(data);\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>        @Override\r\n<br/>        public Observable&lt;byte[]&gt; writeCharacteristic(UUID characteristicUuid, byte[] data) {\r\n<br/>    +        return getCharacteristic(characteristicUuid).map(characteristic -&gt; characteristic.setValue(data)).flatMap(ignored -&gt; Observable.just(data));\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:29:37','2019-01-09 00:29:39','diff-e16a3667ed79c289ca17f768878f1115-20190109002937','https://github.com/Polidea/RxAndroidBle/commit/f918c3fcb035201f10f0c49cad11384fc93f7f2a#diff-e16a3667ed79c289ca17f768878f1115','/var/www/QARefactorings/app/webroot/files/diff-e16a3667ed79c289ca17f768878f1115-20190109002937/a.txt','/var/www/QARefactorings/app/webroot/files/diff-e16a3667ed79c289ca17f768878f1115-20190109002937/b.txt','L48','R53','N'),(1050,13,1,5,'<p>\r\n<br/>        @Override\r\n<br/>        public Observable&lt;byte[]&gt; writeDescriptor(UUID serviceUuid, UUID characteristicUuid, UUID descriptorUuid, byte[] data) {\r\n<br/>    -        discoverServices()\r\n<br/>                    .flatMap(rxBleDeviceServices -&gt; rxBleDeviceServices.getDescriptor(serviceUuid, characteristicUuid, descriptorUuid))\r\n<br/>    -                .map(bluetoothGattDescriptor -&gt; bluetoothGattDescriptor.setValue(data)).subscribe();\r\n<br/>    -        return Observable.just(data);\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>        @Override\r\n<br/>        public Observable&lt;byte[]&gt; writeDescriptor(UUID serviceUuid, UUID characteristicUuid, UUID descriptorUuid, byte[] data) {\r\n<br/>    +        return discoverServices()\r\n<br/>                    .flatMap(rxBleDeviceServices -&gt; rxBleDeviceServices.getDescriptor(serviceUuid, characteristicUuid, descriptorUuid))\r\n<br/>    +                .map(bluetoothGattDescriptor -&gt; bluetoothGattDescriptor.setValue(data)).flatMap(ignored -&gt; Observable.just(data));\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:29:42','2019-01-09 00:29:43','diff-e16a3667ed79c289ca17f768878f1115-20190109002942','https://github.com/Polidea/RxAndroidBle/commit/f918c3fcb035201f10f0c49cad11384fc93f7f2a#diff-e16a3667ed79c289ca17f768878f1115','/var/www/QARefactorings/app/webroot/files/diff-e16a3667ed79c289ca17f768878f1115-20190109002942/a.txt','/var/www/QARefactorings/app/webroot/files/diff-e16a3667ed79c289ca17f768878f1115-20190109002942/b.txt','L61','R67','N'),(1051,1,1,5,'<p>\r\n<br/>        public RxBleConnectionImpl(RxBleRadio rxBleRadio, RxBleGattCallback gattCallback, BluetoothGatt bluetoothGatt) {\r\n<br/>    -\r\n<br/>            this.rxBleRadio = rxBleRadio;\r\n<br/>            this.gattCallback = gattCallback;\r\n<br/>            this.bluetoothGatt = bluetoothGatt;\r\n<br/>    @@ -92,59 +88,64 @@ public RxBleConnectionImpl(RxBleRadio rxBleRadio, RxBleGattCallback gattCallback\r\n<br/>                    return availableObservable;\r\n<br/>                }\r\n<br/>    -            final Observable&lt;Observable&lt;byte[]&gt;&gt; newObservable = createCharacteristicNotificationObservable(characteristicUuid);\r\n<br/>                notificationObservableMap.put(characteristicUuid, newObservable);\r\n<br/>    -\r\n<br/>                return newObservable;\r\n<br/>            }\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>        public RxBleConnectionImpl(RxBleRadio rxBleRadio, RxBleGattCallback gattCallback, BluetoothGatt bluetoothGatt) {\r\n<br/>            this.rxBleRadio = rxBleRadio;\r\n<br/>            this.gattCallback = gattCallback;\r\n<br/>            this.bluetoothGatt = bluetoothGatt;\r\n<br/>    @@ -92,59 +88,64 @@ public RxBleConnectionImpl(RxBleRadio rxBleRadio, RxBleGattCallback gattCallback\r\n<br/>                    return availableObservable;\r\n<br/>                }\r\n<br/>    +            final Observable&lt;Observable&lt;byte[]&gt;&gt; newObservable = createCharacteristicNotificationObservable(characteristicUuid)\r\n<br/>    +                    .doOnUnsubscribe(() -&gt; dismissCharacteristicNotification(characteristicUuid))\r\n<br/>    +                    .cache(1)\r\n<br/>    +                    .share();\r\n<br/>                notificationObservableMap.put(characteristicUuid, newObservable);\r\n<br/>                return newObservable;\r\n<br/>            }\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:29:46','2019-01-09 00:29:48','diff-70127ee1ccd288fc48bab1e941023361-20190109002946','https://github.com/Polidea/RxAndroidBle/commit/ffce6eb924bdc95ce035c46be2500ebac125262f#diff-70127ee1ccd288fc48bab1e941023361','/var/www/QARefactorings/app/webroot/files/diff-70127ee1ccd288fc48bab1e941023361-20190109002946/a.txt','/var/www/QARefactorings/app/webroot/files/diff-70127ee1ccd288fc48bab1e941023361-20190109002946/b.txt','L46','R99','S'),(1052,7,1,5,'<p>\r\n<br/>        private static Collection&lt;CharSequenceJavaFileObject&gt; wrap(final Map&lt;String, CharSequence&gt; sources)\r\n<br/>        {\r\n<br/>    -        final Collection&lt;CharSequenceJavaFileObject&gt; collection = new ArrayList&lt;&gt;(sources.size());\r\n<br/>    -        for (final Map.Entry&lt;String, CharSequence&gt; entry : sources.entrySet())\r\n<br/>    -        {\r\n<br/>    -            collection.add(new CharSequenceJavaFileObject(entry.getKey(), entry.getValue()));\r\n<br/>    -        }\r\n<br/>    -\r\n<br/>    -        return collection;\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>        private static Collection&lt;CharSequenceJavaFileObject&gt; wrap(final Map&lt;String, CharSequence&gt; sources)\r\n<br/>        {\r\n<br/>    +        return sources.entrySet()\r\n<br/>    +            .stream()\r\n<br/>    +            .map((e) -&gt; new CharSequenceJavaFileObject(e.getKey(), e.getValue())).collect(toList());\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:29:51','2019-01-09 00:29:52','diff-37b7ff89b52726a431d8fc73423ffd79-20190109002951','https://github.com/real-logic/Agrona/commit/394dee1cb09b2c06b4ff887bfe7fcb813862fb3c#diff-37b7ff89b52726a431d8fc73423ffd79','/var/www/QARefactorings/app/webroot/files/diff-37b7ff89b52726a431d8fc73423ffd79-20190109002951/a.txt','/var/www/QARefactorings/app/webroot/files/diff-37b7ff89b52726a431d8fc73423ffd79-20190109002951/b.txt','L166','R176','S'),(1053,1,1,5,'<p>\r\n<br/>            Map&lt;String, Object&gt; output = new HashMap&lt;&gt;();\r\n<br/>            output.put(Messages.SUMMARY_KEY,\r\n<br/>                Formatter.formatSummary(numFiles, numSkipped, numErrors, numWarnings).replace(NEWLINE_PATTERN, \"\"));\r\n<br/>    -        Collections.sort(FILES, Collections.reverseOrder(new Comparator&lt;Map&lt;String, Object&gt;&gt;() {\r\n<br/>    -            @Override\r\n<br/>    -            public int compare(Map&lt;String, Object&gt; o1, Map&lt;String, Object&gt; o2) {\r\n<br/>    -                return Integer.compare(\r\n<br/>    -                    ((List) o1.get(Messages.VIOLATIONS_KEY)).size(),\r\n<br/>    -                    ((List) o2.get(Messages.VIOLATIONS_KEY)).size()\r\n<br/>    -                );\r\n<br/>    -            }\r\n<br/>    -        }));\r\n<br/>            output.put(Messages.FILES_KEY, FILES);\r\n<br/>            output.put(Messages.VERSION_LONG_OPT, new ConfigProperties().getVersion());\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>            Map&lt;String, Object&gt; output = new HashMap&lt;&gt;();\r\n<br/>            output.put(Messages.SUMMARY_KEY,\r\n<br/>                Formatter.formatSummary(numFiles, numSkipped, numErrors, numWarnings).replace(NEWLINE_PATTERN, \"\"));\r\n<br/>    +        // Sort files by descending order of the number of violations\r\n<br/>    +        FILES.sort((o1, o2) -&gt;\r\n<br/>    +            ((List) o2.get(Messages.VIOLATIONS_KEY)).size() - ((List) o1.get(Messages.VIOLATIONS_KEY)).size());\r\n<br/>            output.put(Messages.FILES_KEY, FILES);\r\n<br/>            output.put(Messages.VERSION_LONG_OPT, new ConfigProperties().getVersion());\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:29:55','2019-01-09 00:29:56','diff-ca76d22f3669b4c5f8955c445e291079-20190109002955','https://github.com/sleekbyte/tailor/commit/15c3a3a862a27c73504a9f9965c9a986be6a232e#diff-ca76d22f3669b4c5f8955c445e291079','/var/www/QARefactorings/app/webroot/files/diff-ca76d22f3669b4c5f8955c445e291079-20190109002955/a.txt','/var/www/QARefactorings/app/webroot/files/diff-ca76d22f3669b4c5f8955c445e291079-20190109002955/b.txt','L80','R86','S'),(1054,2,1,5,'<p>\r\n<br/>         */\r\n<br/>        private void walkParseTree(List&lt;SwiftBaseListener&gt; listeners, TopLevelContext tree) {\r\n<br/>            ParseTreeWalker walker = new ParseTreeWalker();\r\n<br/>    -        for (SwiftBaseListener listener : listeners) {\r\n<br/>    -            // The following listeners are used by DeclarationListener to walk the tree\r\n<br/>    -            if (listener instanceof ConstantNamingListener || listener instanceof KPrefixListener) {\r\n<br/>    -                continue;\r\n<br/>    -            }\r\n<br/>    -            walker.walk(listener, tree);\r\n<br/>    -        }\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>         */\r\n<br/>        private void walkParseTree(List&lt;SwiftBaseListener&gt; listeners, TopLevelContext tree) {\r\n<br/>            ParseTreeWalker walker = new ParseTreeWalker();\r\n<br/>    +        listeners.forEach(listener -&gt; walker.walk(listener, tree));\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:29:59','2019-01-09 00:30:00','diff-241fb54b6817fdeccb9de857051ca79a-20190109002959','https://github.com/sleekbyte/tailor/commit/2b6961dee5176d315242014f41187da3c7fb69b9#diff-241fb54b6817fdeccb9de857051ca79a','/var/www/QARefactorings/app/webroot/files/diff-241fb54b6817fdeccb9de857051ca79a-20190109002959/a.txt','/var/www/QARefactorings/app/webroot/files/diff-241fb54b6817fdeccb9de857051ca79a-20190109002959/b.txt','L210','R215','S'),(1055,8,1,5,'<p>\r\n<br/>            if (left != null) {\r\n<br/>    -            Token leftToken = left instanceof ParserRuleContext ? ((ParserRuleContext) left).getStop()\r\n<br/>    -                : ((TerminalNodeImpl) left).getSymbol();\r\n<br/>                Token start = ctx.getStart();\r\n<br/>    -            if (start.getLine() - leftToken.getLine() != 2) {\r\n<br/>                    printer.error(Messages.FUNCTION + Messages.NEWLINE_BEFORE, ListenerUtil.getTokenLocation(start));\r\n<br/>                }\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>            if (left != null) {\r\n<br/>                Token start = ctx.getStart();\r\n<br/>    +            long numberOfNewLineChars = tokenStream.getHiddenTokensToLeft(start.getTokenIndex(), SwiftLexer.WHITESPACE)\r\n<br/>    +                .stream()\r\n<br/>    +                .filter(token -&gt; token.getText().equals(\"\\n\"))\r\n<br/>    +                .count();\r\n<br/>    +            if (numberOfNewLineChars &lt; 2) {\r\n<br/>                    printer.error(Messages.FUNCTION + Messages.NEWLINE_BEFORE, ListenerUtil.getTokenLocation(start));\r\n<br/>                }\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:30:03','2019-01-09 00:30:04','diff-ec262536ff63a6278db137e284fded7d-20190109003003','https://github.com/sleekbyte/tailor/commit/404e54a103cafbc39c96fc6675dc4f4d469e4ba3#diff-ec262536ff63a6278db137e284fded7d','/var/www/QARefactorings/app/webroot/files/diff-ec262536ff63a6278db137e284fded7d-20190109003003/a.txt','/var/www/QARefactorings/app/webroot/files/diff-ec262536ff63a6278db137e284fded7d-20190109003003/b.txt','L598','R611','S'),(1056,4,1,5,'<p>\r\n<br/>        // Invoke the pattern matching method on each directory.\r\n<br/>        @Override\r\n<br/>    -    public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) {\r\n<br/>    -        // Do not analyze the directory\'s children if blacklisted.\r\n<br/>    -        Path dirName = dir.getFileName();\r\n<br/>    -        if (dirName != null &amp;&amp; !entityOfInterest(dir)) {\r\n<br/>                return FileVisitResult.SKIP_SUBTREE;\r\n<br/>    -        } else {\r\n<br/>                return FileVisitResult.CONTINUE;\r\n<br/>            }\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>        // Invoke the pattern matching method on each directory.\r\n<br/>        @Override\r\n<br/>    +    public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attributes) {\r\n<br/>    +        Path relative = Paths.get(base.relativize(dir.toUri()).getPath());\r\n<br/>    +        if (excludeMatcher.stream().anyMatch(pathMatcher -&gt; pathMatcher.matches(relative))) {\r\n<br/>                return FileVisitResult.SKIP_SUBTREE;\r\n<br/>    +        }\r\n<br/>    +        if (isParentIncluded.getOrDefault(dir.getParent(), false)\r\n<br/>    +            || includeMatcher.stream().anyMatch(pathMatcher -&gt; pathMatcher.matches(relative))) {\r\n<br/>    +            isParentIncluded.put(dir, true);\r\n<br/>                return FileVisitResult.CONTINUE;\r\n<br/>            }\r\n<br/>    +        return FileVisitResult.CONTINUE;\r\n<br/>    +    }\r\n<br/>    +\r\n<br/>    +    @Override\r\n<br/>    +    public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {\r\n<br/>    +        isParentIncluded.put(dir, false);\r\n<br/>    +        return super.postVisitDirectory(dir, exc);\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:30:08','2019-01-09 00:30:09','diff-2bbb02aa170177126cca750fb2e06474-20190109003008','https://github.com/sleekbyte/tailor/commit/e49e48f6ededc8611ab5ec888c861412071cdaff#diff-2bbb02aa170177126cca750fb2e06474','/var/www/QARefactorings/app/webroot/files/diff-2bbb02aa170177126cca750fb2e06474-20190109003008/a.txt','/var/www/QARefactorings/app/webroot/files/diff-2bbb02aa170177126cca750fb2e06474-20190109003008/b.txt','L88','R87','N'),(1057,4,1,5,'<p>\r\n<br/>        // Invoke the pattern matching method on each file.\r\n<br/>        @Override\r\n<br/>    -    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\r\n<br/>    -        // If file cannot be read then throw IOException\r\n<br/>    -        if (!Files.isReadable(file)) {\r\n<br/>    -            throw new IOException(\"Cannot read \" + file);\r\n<br/>            }\r\n<br/>    -\r\n<br/>    -        // Ensure only Swift files are linted\r\n<br/>    -        if (entityOfInterest(file) &amp;&amp; file.toString().endsWith(\".swift\")) {\r\n<br/>    -            fileNames.add(file.toAbsolutePath().toString());\r\n<br/>            }\r\n<br/>    -\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>        // Invoke the pattern matching method on each file.\r\n<br/>        @Override\r\n<br/>    +    public FileVisitResult visitFile(Path file, BasicFileAttributes attributes) throws IOException {\r\n<br/>    +        Path relative = Paths.get(base.relativize(file.toUri()).getPath());\r\n<br/>    +        if (excludeMatcher.stream().anyMatch(pathMatcher -&gt; pathMatcher.matches(relative))) {\r\n<br/>    +            return FileVisitResult.CONTINUE;\r\n<br/>            }\r\n<br/>    +        if ((isParentIncluded.getOrDefault(file.getParent(), false)\r\n<br/>    +            || includeMatcher.stream().anyMatch(pathMatcher -&gt; pathMatcher.matches(relative)))\r\n<br/>    +            &amp;&amp; (file.toFile().getCanonicalPath().endsWith(\".swift\") &amp;&amp; file.toFile().canRead())) {\r\n<br/>    +            fileNames.add(file.toFile().getCanonicalPath());\r\n<br/>            }\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:30:12','2019-01-09 00:30:14','diff-2bbb02aa170177126cca750fb2e06474-20190109003012','https://github.com/sleekbyte/tailor/commit/e49e48f6ededc8611ab5ec888c861412071cdaff#diff-2bbb02aa170177126cca750fb2e06474','/var/www/QARefactorings/app/webroot/files/diff-2bbb02aa170177126cca750fb2e06474-20190109003012/a.txt','/var/www/QARefactorings/app/webroot/files/diff-2bbb02aa170177126cca750fb2e06474-20190109003012/b.txt','L72','R64','N'),(1058,8,1,5,'<p>\r\n<br/>        private long getNumMessagesWithSeverity(Severity severity) {\r\n<br/>    -        return msgBuffer.values().stream().filter(msg -&gt; msg.getSeverity().equals(severity)).count();\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>        private long getNumMessagesWithSeverity(Severity severity) {\r\n<br/>    +        return msgBuffer.values().stream()\r\n<br/>    +            .filter(msg -&gt; !ignoredLineNumbers.contains(msg.getLineNumber()))\r\n<br/>    +            .filter(msg -&gt; msg.getSeverity().equals(severity)).count();\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:30:17','2019-01-09 00:30:18','diff-6ba9e01f8a0556527567496ee6f3ab38-20190109003017','https://github.com/sleekbyte/tailor/commit/ee3c8df2847889622c381412b14ea817dae7af5c#diff-6ba9e01f8a0556527567496ee6f3ab38','/var/www/QARefactorings/app/webroot/files/diff-6ba9e01f8a0556527567496ee6f3ab38-20190109003017/a.txt','/var/www/QARefactorings/app/webroot/files/diff-6ba9e01f8a0556527567496ee6f3ab38-20190109003017/b.txt','L135','R141','N'),(1059,7,1,5,'<p>>\r\n<br/>            @Override\r\n<br/>            protected Iterable&lt;String&gt; getChoices(CommandSource source) {\r\n<br/>    -            return Iterables.transform(this.game.getRegistry().getAllOf(this.catalogType), new Function&lt;T, String&gt;() {\r\n<br/>    -                @Nullable\r\n<br/>    -                @Override\r\n<br/>    -                public String apply(@Nullable T input) {\r\n<br/>    -                    return input == null ? null : input.getId(); // TODO: ids or names?\r\n<br/>    -                }\r\n<br/>    -            });\r\n<br/>            }\r\n<br/>    <br/></p>',NULL,'<p>>\r\n<br/>            @Override\r\n<br/>            protected Iterable&lt;String&gt; getChoices(CommandSource source) {\r\n<br/>    +            return this.game.getRegistry().getAllOf(this.catalogType).stream()\r\n<br/>    +                .map(input -&gt; {\r\n<br/>    +                return input == null ? null : input.getId(); // TODO: ids or names?\r\n<br/>    +                })\r\n<br/>    +                .collect(Collectors.toList());\r\n<br/>            }\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:30:22','2019-01-09 00:30:23','diff-bd123d476b4046fba0c04ed1536a5725-20190109003022','https://github.com/SpongePowered/SpongeAPI/commit/20bad1be5c4b80598d820b4c937c6390d0b0384b#diff-bd123d476b4046fba0c04ed1536a5725','/var/www/QARefactorings/app/webroot/files/diff-bd123d476b4046fba0c04ed1536a5725-20190109003022/a.txt','/var/www/QARefactorings/app/webroot/files/diff-bd123d476b4046fba0c04ed1536a5725-20190109003022/b.txt','L1132','R1127','S'),(1060,2,1,5,'<p>\r\n<br/>        @Override\r\n<br/>        public DataContainer copy() {\r\n<br/>            final DataContainer container = new MemoryDataContainer();\r\n<br/>    -        for (DataQuery query : getKeys(false)) {\r\n<br/>    -            container.set(query, get(query).get());\r\n<br/>    -        }\r\n<br/>            return container;\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>        @Override\r\n<br/>        public DataContainer copy() {\r\n<br/>            final DataContainer container = new MemoryDataContainer();\r\n<br/>    +        getKeys(false).stream()\r\n<br/>    +                .forEach(query -&gt;\r\n<br/>    +                        get(query).ifPresent(obj -&gt;\r\n<br/>    +                                container.set(query, obj)\r\n<br/>    +                        )\r\n<br/>    +        );\r\n<br/>            return container;\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:30:26','2019-01-09 00:30:27','diff-16b47531aa190de6100123b8f68582a2-20190109003026','https://github.com/SpongePowered/SpongeAPI/commit/a7df949cd20b17fd10cd1543173a7d6b86ef08c3#diff-16b47531aa190de6100123b8f68582a2','/var/www/QARefactorings/app/webroot/files/diff-16b47531aa190de6100123b8f68582a2-20190109003026/a.txt','/var/www/QARefactorings/app/webroot/files/diff-16b47531aa190de6100123b8f68582a2-20190109003026/b.txt','L938','R794','S'),(1061,3,1,5,'<p>\r\n<br/>        @Override\r\n<br/>        public Optional&lt;DataView&gt; getView(DataQuery path) {\r\n<br/>    -        Optional&lt;Object&gt; val = get(path);\r\n<br/>    -        if (val.isPresent()) {\r\n<br/>    -            if (val.get() instanceof DataView) {\r\n<br/>    -                return Optional.of((DataView) val.get());\r\n<br/>    -            }\r\n<br/>    -        }\r\n<br/>    -        return Optional.empty();\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>        @Override\r\n<br/>        public Optional&lt;DataView&gt; getView(DataQuery path) {\r\n<br/>    +        return get(path).filter(obj -&gt; obj instanceof DataView).map(obj -&gt; (DataView) obj);\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:30:29','2019-01-09 00:30:30','diff-16b47531aa190de6100123b8f68582a2-20190109003029','https://github.com/SpongePowered/SpongeAPI/commit/a7df949cd20b17fd10cd1543173a7d6b86ef08c3#diff-16b47531aa190de6100123b8f68582a2','/var/www/QARefactorings/app/webroot/files/diff-16b47531aa190de6100123b8f68582a2-20190109003029/a.txt','/var/www/QARefactorings/app/webroot/files/diff-16b47531aa190de6100123b8f68582a2-20190109003029/b.txt','L458','R463','S'),(1062,3,1,5,'<p>\r\n<br/>        private Optional&lt;DataView&gt; getUnsafeView(DataQuery path) {\r\n<br/>    -        Optional&lt;Object&gt; val = get(path);\r\n<br/>    -        if (val.isPresent()) {\r\n<br/>    -            if (val.get() instanceof DataView) {\r\n<br/>    -                return Optional.of((DataView) val.get());\r\n<br/>    -            }\r\n<br/>    -        }\r\n<br/>    -        return Optional.empty();\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>        private Optional&lt;DataView&gt; getUnsafeView(DataQuery path) {\r\n<br/>    +        return get(path).filter(obj -&gt; obj instanceof DataView).map(obj -&gt; (DataView) obj);\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:30:32','2019-01-09 00:30:33','diff-16b47531aa190de6100123b8f68582a2-20190109003032','https://github.com/SpongePowered/SpongeAPI/commit/a7df949cd20b17fd10cd1543173a7d6b86ef08c3#diff-16b47531aa190de6100123b8f68582a2','/var/www/QARefactorings/app/webroot/files/diff-16b47531aa190de6100123b8f68582a2-20190109003032/a.txt','/var/www/QARefactorings/app/webroot/files/diff-16b47531aa190de6100123b8f68582a2-20190109003032/b.txt','L511','R509','S'),(1063,1,1,5,'<p>\r\n<br/>    	@Override\r\n<br/>    -	public boolean supportsParameter(MethodParameter parameter) {\r\n<br/>    -		return parameter.hasParameterAnnotation(Value.class);\r\n<br/>    	}\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>    	@Override\r\n<br/>    +	public boolean supportsParameter(MethodParameter param) {\r\n<br/>    +		return checkAnnotatedParamNoReactiveWrapper(param, Value.class, (annot, type) -&gt; true);\r\n<br/>    	}\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:30:37','2019-01-09 00:30:38','diff-82984a3951d9fc77df2cd9d6421dc5d6-20190109003037','https://github.com/spring-projects/spring-framework/commit/164204ca04b9b369267ef5e36c2f243b3898bae1#diff-82984a3951d9fc77df2cd9d6421dc5d6','/var/www/QARefactorings/app/webroot/files/diff-82984a3951d9fc77df2cd9d6421dc5d6-20190109003037/a.txt','/var/www/QARefactorings/app/webroot/files/diff-82984a3951d9fc77df2cd9d6421dc5d6-20190109003037/b.txt','L49','R57','S'),(1064,1,1,5,'<p>\r\n<br/>    	private Runnable asyncSend(final String payload, final int sequence, final int correlation) {\r\n<br/>    -		return new Runnable() {\r\n<br/>    -\r\n<br/>    -			@Override\r\n<br/>    -			public void run() {\r\n<br/>    -				try {\r\n<br/>    -					in.send(new GenericMessage&lt;String&gt;(payload, stubHeaders(sequence, 2, correlation)));\r\n<br/>    -				}\r\n<br/>    -				catch (Exception e) {\r\n<br/>    -					e.printStackTrace();\r\n<br/>    -					exception = e;\r\n<br/>    -				}\r\n<br/>    			}\r\n<br/>    		};\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>    	private Runnable asyncSend(final String payload, final int sequence, final int correlation) {\r\n<br/>    +		return () -&gt; {\r\n<br/>    +			try {\r\n<br/>    +				in.send(new GenericMessage&lt;String&gt;(payload, stubHeaders(sequence, 2, correlation)));\r\n<br/>    +			}\r\n<br/>    +			catch (Exception e) {\r\n<br/>    +				exception = e;\r\n<br/>    			}\r\n<br/>    		};\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:30:41','2019-01-09 00:30:42','diff-0d5a8af55d0dc1e3f95ef157fa30cc23-20190109003041','https://github.com/spring-projects/spring-integration/commit/4a200e069b105bdc46568cd2695bc88d512560c8#diff-0d5a8af55d0dc1e3f95ef157fa30cc23','/var/www/QARefactorings/app/webroot/files/diff-0d5a8af55d0dc1e3f95ef157fa30cc23-20190109003041/a.txt','/var/www/QARefactorings/app/webroot/files/diff-0d5a8af55d0dc1e3f95ef157fa30cc23-20190109003041/b.txt','L125','R130','S'),(1065,1,1,5,'<p>\r\n<br/>    	public void testDistributedAggregator() throws Exception {\r\n<br/>    		this.releaseStrategy.reset(1);\r\n<br/>    		Executors.newSingleThreadExecutor().execute(asyncSend(\"foo\", 1, 1));\r\n<br/>    -		Executors.newSingleThreadExecutor().execute(new Runnable() {\r\n<br/>    -\r\n<br/>    -			@Override\r\n<br/>    -			public void run() {\r\n<br/>    -				try {\r\n<br/>    -					in2.send(new GenericMessage&lt;String&gt;(\"bar\", stubHeaders(2, 2, 1)));\r\n<br/>    -				}\r\n<br/>    -				catch (Exception e) {\r\n<br/>    -					e.printStackTrace();\r\n<br/>    -					exception = e;\r\n<br/>    -				}\r\n<br/>    			}\r\n<br/>    		});\r\n<br/>    		assertTrue(this.releaseStrategy.latch2.await(10, TimeUnit.SECONDS));\r\n<br/>    @@ -124,17 +119,12 @@ public void run() {\r\n<br/>    	}\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>    	public void testDistributedAggregator() throws Exception {\r\n<br/>    		this.releaseStrategy.reset(1);\r\n<br/>    		Executors.newSingleThreadExecutor().execute(asyncSend(\"foo\", 1, 1));\r\n<br/>    +		Executors.newSingleThreadExecutor().execute(() -&gt; {\r\n<br/>    +			try {\r\n<br/>    +				in2.send(new GenericMessage&lt;String&gt;(\"bar\", stubHeaders(2, 2, 1)));\r\n<br/>    +			}\r\n<br/>    +			catch (Exception e) {\r\n<br/>    +				exception = e;\r\n<br/>    			}\r\n<br/>    		});\r\n<br/>    		assertTrue(this.releaseStrategy.latch2.await(10, TimeUnit.SECONDS));\r\n<br/>    @@ -124,17 +119,12 @@ public void run() {\r\n<br/>    	}\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:30:45','2019-01-09 00:30:46','diff-0d5a8af55d0dc1e3f95ef157fa30cc23-20190109003045','https://github.com/spring-projects/spring-integration/commit/4a200e069b105bdc46568cd2695bc88d512560c8#diff-0d5a8af55d0dc1e3f95ef157fa30cc23','/var/www/QARefactorings/app/webroot/files/diff-0d5a8af55d0dc1e3f95ef157fa30cc23-20190109003045/a.txt','/var/www/QARefactorings/app/webroot/files/diff-0d5a8af55d0dc1e3f95ef157fa30cc23-20190109003045/b.txt','L103','R120','S'),(1066,1,1,5,'<p>\r\n<br/>    	public void afterPropertiesSet() throws Exception {\r\n<br/>    		this.sftpFolder.create();\r\n<br/>    		this.localFolder.create();\r\n<br/>    -		server.setPasswordAuthenticator(new PasswordAuthenticator() {\r\n<br/>    -\r\n<br/>    -			@Override\r\n<br/>    -			public boolean authenticate(String arg0, String arg1, ServerSession arg2) {\r\n<br/>    -				return true;\r\n<br/>    -			}\r\n<br/>    -\r\n<br/>    -		});\r\n<br/>    		server.setPort(0);\r\n<br/>    -		server.setKeyPairProvider(new SimpleGeneratorHostKeyProvider(\"hostkey.ser\"));\r\n<br/>    -		this.server.setSubsystemFactories(Collections.&lt;NamedFactory&lt;Command&gt;&gt;singletonList(new SftpSubsystem.Factory()));\r\n<br/>    -		this.server.setFileSystemFactory(new VirtualFileSystemFactory(sftpRootFolder.getAbsolutePath()));\r\n<br/>    		server.start();\r\n<br/>    	}\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>    	public void afterPropertiesSet() throws Exception {\r\n<br/>    		this.sftpFolder.create();\r\n<br/>    		this.localFolder.create();\r\n<br/>    +		server.setPasswordAuthenticator((arg0, arg1, arg2) -&gt; true);\r\n<br/>    		server.setPort(0);\r\n<br/>    +		server.setKeyPairProvider(new SimpleGeneratorHostKeyProvider(new File(\"hostkey.ser\")));\r\n<br/>    +		this.server.setSubsystemFactories(Collections.singletonList(new SftpSubsystemFactory()));\r\n<br/>    +		this.server.setFileSystemFactory(new VirtualFileSystemFactory(sftpRootFolder.toPath()));\r\n<br/>    		server.start();\r\n<br/>    	}\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:30:50','2019-01-09 00:30:51','diff-98d3fc2674005c86b06aeab170c1175a-20190109003050','https://github.com/spring-projects/spring-integration/commit/cb76cfac16f9f4db6d24449585b87aa048f55e1a#diff-98d3fc2674005c86b06aeab170c1175a','/var/www/QARefactorings/app/webroot/files/diff-98d3fc2674005c86b06aeab170c1175a-20190109003050/a.txt','/var/www/QARefactorings/app/webroot/files/diff-98d3fc2674005c86b06aeab170c1175a-20190109003050/b.txt','L120','R126','S'),(1067,2,1,5,'<p>\r\n<br/>            if (CollectionUtils.isNotEmpty(produces)) {\r\n<br/>                buildSectionTitle(PRODUCES, docBuilder);\r\n<br/>                docBuilder.newLine();\r\n<br/>    -            for (String produce : produces) {\r\n<br/>    -                docBuilder.unorderedListItem(literalText(produce));\r\n<br/>    -            }\r\n<br/>                docBuilder.newLine();\r\n<br/>            }\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>            if (CollectionUtils.isNotEmpty(produces)) {\r\n<br/>                buildSectionTitle(PRODUCES, docBuilder);\r\n<br/>                docBuilder.newLine();\r\n<br/>    +            produces.forEach(produce -&gt; docBuilder.unorderedListItem(literalText(produce)));\r\n<br/>                docBuilder.newLine();\r\n<br/>            }\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:30:55','2019-01-09 00:30:56','diff-b2371b91ec873932df80f1e8da819b19-20190109003055','https://github.com/Swagger2Markup/swagger2markup/commit/551aeed83574c8179f912841c92d3fdd59e51005#diff-b2371b91ec873932df80f1e8da819b19','/var/www/QARefactorings/app/webroot/files/diff-b2371b91ec873932df80f1e8da819b19-20190109003055/a.txt','/var/www/QARefactorings/app/webroot/files/diff-b2371b91ec873932df80f1e8da819b19-20190109003055/b.txt','L565','R568','S'),(1068,7,1,5,'<p>\r\n<br/>        @Override\r\n<br/>    -    public MarkupDocBuilder render() {\r\n<br/>    -        markupDocBuilder.sectionTitleLevel(titleLevel, labels.getString(Labels.PRODUCES));\r\n<br/>    -        markupDocBuilder.unorderedList(produces.stream()\r\n<br/>    -                .map(this::literalText).collect(Collectors.toList()));\r\n<br/>            return markupDocBuilder;\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>        @Override\r\n<br/>    +    public MarkupDocBuilder apply(MarkupDocBuilder markupDocBuilder, Parameters params){\r\n<br/>    +        markupDocBuilder.sectionTitleLevel(params.titleLevel, labels.getString(Labels.PRODUCES));\r\n<br/>    +        markupDocBuilder.unorderedList(params.produces.stream()\r\n<br/>    +                .map(value -&gt; literalText(markupDocBuilder, value)).collect(Collectors.toList()));\r\n<br/>            return markupDocBuilder;\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:30:59','2019-01-09 00:31:00','diff-ffd98570df0307e408ee2c9193a8c5f4-20190109003059','https://github.com/Swagger2Markup/swagger2markup/commit/5a00dde9124170085014a0cdde03bf0001f21525#diff-ffd98570df0307e408ee2c9193a8c5f4','/var/www/QARefactorings/app/webroot/files/diff-ffd98570df0307e408ee2c9193a8c5f4-20190109003059/a.txt','/var/www/QARefactorings/app/webroot/files/diff-ffd98570df0307e408ee2c9193a8c5f4-20190109003059/b.txt','L37','R56','S'),(1069,2,1,5,'<p>\r\n<br/>            private void initExtensions(Context context) {\r\n<br/>    -            for (SwaggerModelExtension extension : extensionRegistry.getSwaggerModelExtensions())\r\n<br/>    -                extension.setGlobalContext(context);\r\n<br/>    -\r\n<br/>    -            for (OverviewDocumentExtension extension : extensionRegistry.getOverviewDocumentExtensions())\r\n<br/>    -                extension.setGlobalContext(context);\r\n<br/>    -\r\n<br/>    -            for (DefinitionsDocumentExtension extension : extensionRegistry.getDefinitionsDocumentExtensions())\r\n<br/>    -                extension.setGlobalContext(context);\r\n<br/>    -\r\n<br/>    -            for (PathsDocumentExtension extension : extensionRegistry.getPathsDocumentExtensions())\r\n<br/>    -                extension.setGlobalContext(context);\r\n<br/>    -\r\n<br/>    -            for (SecurityDocumentExtension extension : extensionRegistry.getSecurityDocumentExtensions())\r\n<br/>    -                extension.setGlobalContext(context);\r\n<br/>            }\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>            private void initExtensions(Context context) {\r\n<br/>    +            extensionRegistry.getSwaggerModelExtensions().forEach(extension -&gt; extension.setGlobalContext(context));\r\n<br/>    +            extensionRegistry.getOverviewDocumentExtensions().forEach(extension -&gt; extension.setGlobalContext(context));\r\n<br/>    +            extensionRegistry.getDefinitionsDocumentExtensions().forEach(extension -&gt; extension.setGlobalContext(context));\r\n<br/>    +            extensionRegistry.getPathsDocumentExtensions().forEach(extension -&gt; extension.setGlobalContext(context));\r\n<br/>    +            extensionRegistry.getSecurityDocumentExtensions().forEach(extension -&gt; extension.setGlobalContext(context));\r\n<br/>            }\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:31:03','2019-01-09 00:31:05','diff-fc1497af780df894f7dbd24bb4d4809e-20190109003103','https://github.com/Swagger2Markup/swagger2markup/commit/5b1a1a2bcf4194a9cdea203011b099cb82dc70ac#diff-fc1497af780df894f7dbd24bb4d4809e','/var/www/QARefactorings/app/webroot/files/diff-fc1497af780df894f7dbd24bb4d4809e-20190109003103/a.txt','/var/www/QARefactorings/app/webroot/files/diff-fc1497af780df894f7dbd24bb4d4809e-20190109003103/b.txt','L321','R328','S'),(1070,1,1,5,'<p>\r\n<br/>        // Start the front end server using the Jax-RS controller\r\n<br/>        vertx.createHttpServer()\r\n<br/>            .requestHandler(new VertxRequestHandler(vertx, deployment))\r\n<br/>    -        .listen(8080);\r\n<br/>    -    System.out.println(\"started\");\r\n<br/>      }\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>        // Start the front end server using the Jax-RS controller\r\n<br/>        vertx.createHttpServer()\r\n<br/>            .requestHandler(new VertxRequestHandler(vertx, deployment))\r\n<br/>    +        .listen(8080, ar -&gt; {\r\n<br/>    +          System.out.println(\"Server started on port \"+ ar.result().actualPort());\r\n<br/>    +        });\r\n<br/>      }\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:31:07','2019-01-09 00:31:08','diff-519e3a1391145ba93c3a91bcd4474d33-20190109003107','https://github.com/vert-x3/vertx-examples/commit/4da3461c80594f15598f66e96c39ba21772abf3f#diff-519e3a1391145ba93c3a91bcd4474d33','/var/www/QARefactorings/app/webroot/files/diff-519e3a1391145ba93c3a91bcd4474d33-20190109003107/a.txt','/var/www/QARefactorings/app/webroot/files/diff-519e3a1391145ba93c3a91bcd4474d33-20190109003107/b.txt','L20','R27','S'),(1071,1,1,5,'<p>\r\n<br/>      @Validate\r\n<br/>    -  public void start() {\r\n<br/>        LOGGER.info(\"Creating vertx HTTP server\");\r\n<br/>    -    server = vertx.createHttpServer().requestHandler((r) -&gt; {\r\n<br/>          r.response().end(\"Hello from OSGi !\");\r\n<br/>        }).listen(8080);\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>      @Validate\r\n<br/>    +  public void start() throws Exception {\r\n<br/>        LOGGER.info(\"Creating vertx HTTP server\");\r\n<br/>    +    HttpServer server = executeWithTCCLSwitch(() -&gt; vertx.createHttpServer());\r\n<br/>    +    server.requestHandler((r) -&gt; {\r\n<br/>          r.response().end(\"Hello from OSGi !\");\r\n<br/>        }).listen(8080);\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:31:11','2019-01-09 00:31:13','diff-5522c63d606923f978eb04c2eb5e85bb-20190109003111','https://github.com/vert-x3/vertx-examples/commit/c980de3d9c44b21950700a28164622a236cb0632#diff-5522c63d606923f978eb04c2eb5e85bb','/var/www/QARefactorings/app/webroot/files/diff-5522c63d606923f978eb04c2eb5e85bb-20190109003111/a.txt','/var/www/QARefactorings/app/webroot/files/diff-5522c63d606923f978eb04c2eb5e85bb-20190109003111/b.txt','L21','R32','N'),(1072,1,1,5,'<p>\r\n<br/>        // We should unregister all deployed verticles.\r\n<br/>    @@ -26,12 +30,23 @@ public void stop() {\r\n<br/>      @Bind(aggregate = true)\r\n<br/>      public void bindVerticle(Verticle verticle) {\r\n<br/>        LOGGER.info(\"Deploying verticle \" + verticle);\r\n<br/>    -    vertx.deployVerticle(verticle);\r\n<br/>      }\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>        // We should unregister all deployed verticles.\r\n<br/>    @@ -26,12 +30,23 @@ public void stop() {\r\n<br/>      @Bind(aggregate = true)\r\n<br/>      public void bindVerticle(Verticle verticle) {\r\n<br/>        LOGGER.info(\"Deploying verticle \" + verticle);\r\n<br/>    +    TcclSwitch.executeWithTCCLSwitch(() -&gt; {\r\n<br/>    +      vertx.deployVerticle(verticle, ar -&gt; {\r\n<br/>    +        if (ar.succeeded()) {\r\n<br/>    +          deploymentIds.put(verticle, ar.result());\r\n<br/>    +        } else {\r\n<br/>    +          LOGGER.log(Level.SEVERE, \"Cannot deploy \" + verticle, ar.cause());\r\n<br/>    +        }\r\n<br/>    +      });\r\n<br/>    +    });\r\n<br/>      }\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:31:15','2019-01-09 00:31:16','diff-ee83a3df87aeca91562e7452094768eb-20190109003115','https://github.com/vert-x3/vertx-examples/commit/c980de3d9c44b21950700a28164622a236cb0632#diff-ee83a3df87aeca91562e7452094768eb','/var/www/QARefactorings/app/webroot/files/diff-ee83a3df87aeca91562e7452094768eb-20190109003115/a.txt','/var/www/QARefactorings/app/webroot/files/diff-ee83a3df87aeca91562e7452094768eb-20190109003115/b.txt','L23','R43','S'),(1073,1,1,5,'<p>\r\n<br/>         */\r\n<br/>        private void queryProvinces() {\r\n<br/>            collapsingToolbarLayout.setTitle(\"éæ©çä»½\");\r\n<br/>    -        Observer&lt;Province&gt; observer = new Observer&lt;Province&gt;() {\r\n<br/>    -            @Override\r\n<br/>    -            public void onCompleted() {\r\n<br/>                    currentLevel = LEVEL_PROVINCE;\r\n<br/>                    mAdapter.notifyDataSetChanged();\r\n<br/>                    mProgressBar.setVisibility(View.GONE);\r\n<br/>    -                //PLog.i(TAG,\"çä»½\");\r\n<br/>    -            }\r\n<br/>    -\r\n<br/>    -            @Override\r\n<br/>    -            public void onError(Throwable e) {\r\n<br/>    -\r\n<br/>                }\r\n<br/>    -            @Override\r\n<br/>    -            public void onNext(Province province) {\r\n<br/>    -                //å¨è¿éå RV çå¨ç»ææ ä½¿ç¨ Item çæ´æ°\r\n<br/>    -                dataList.add(province.ProName);\r\n<br/>    -                //PLog.i(TAG,province.ProSort+\"\");\r\n<br/>    -                //mAdapter.notifyItemInserted(province.ProSort-1);\r\n<br/>    -\r\n<br/>    -            }\r\n<br/>    -        };\r\n<br/>    -\r\n<br/>    -        Observable.defer(() -&gt; {\r\n<br/>    -            provincesList = mWeatherDB.loadProvinces(mDBManager.getDatabase());\r\n<br/>    -            dataList.clear();\r\n<br/>    -            mAdapter.notifyDataSetChanged();\r\n<br/>    -            return Observable.from(provincesList);\r\n<br/>    -        }).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(observer);\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'<p>\r\n<br/>         */\r\n<br/>        private void queryProvinces() {\r\n<br/>            collapsingToolbarLayout.setTitle(\"éæ©çä»½\");\r\n<br/>    +        Observable.defer(() -&gt; {\r\n<br/>    +            provincesList = mWeatherDB.loadProvinces(mDBManager.getDatabase());\r\n<br/>    +            dataList.clear();\r\n<br/>    +            return Observable.from(provincesList);\r\n<br/>    +        }).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(\r\n<br/>    +            province -&gt; dataList.add(province.ProName), throwable -&gt; PLog.e(TAG, throwable.toString()), () -&gt; {\r\n<br/>                    currentLevel = LEVEL_PROVINCE;\r\n<br/>                    mAdapter.notifyDataSetChanged();\r\n<br/>                    mProgressBar.setVisibility(View.GONE);\r\n<br/>                }\r\n<br/>    +        );\r\n<br/>        }\r\n<br/>    <br/></p>',NULL,'2019-01-09 00:31:20','2019-01-09 00:31:22','diff-8331b149df69a1594ececf1d1fa0d287-20190109003120','https://github.com/xcc3641/SeeWeather/commit/65e21cf7134a546999460297c957d97c7c801deb#diff-8331b149df69a1594ececf1d1fa0d287','/var/www/QARefactorings/app/webroot/files/diff-8331b149df69a1594ececf1d1fa0d287-20190109003120/a.txt','/var/www/QARefactorings/app/webroot/files/diff-8331b149df69a1594ececf1d1fa0d287-20190109003120/b.txt','L127','R143','N'),(1166,2,1,5,'<p><br>      -          for (CRFThread thread : threads) {\r\n<br>      -            thread.start();\r\n<br>      -          }\r\n<br>    \r\n<br><br></p>',NULL,'<p><br>      +          threads.forEach(\r\n<br>      +              thread -&gt; {\r\n<br>      +                thread.start();\r\n<br>      +              });\r\n<br>    \r\n<br><br></p>',NULL,'2019-01-10 10:10:29','2019-01-10 10:22:28','diff-e112047b36af77d670c0d4f1df5f040f-20190110101029','https://github.com/stanfordnlp/CoreNLP/pull/545/commits/f950190a60d01c522578ddea728a5180e09b0f40#diff-e112047b36af77d670c0d4f1df5f040f','/var/www/QARefactorings/app/webroot/files/diff-e112047b36af77d670c0d4f1df5f040f-20190110101029/a.txt','/var/www/QARefactorings/app/webroot/files/diff-e112047b36af77d670c0d4f1df5f040f-20190110101029/b.txt','L168','R172','S'),(1167,2,1,5,'<p><br>        // collect all nodes in deps\r\n<br>        Set nodes = Generics.newHashSet();\r\n<br>      -        for (TypedDependency dep: deps) {\r\n<br>      -          nodes.add(dep.gov());\r\n<br>      -          nodes.add(dep.dep());\r\n<br>      -        }\r\n<br>    \r\n<br><br></p>',NULL,'<p><br>        // collect all nodes in deps\r\n<br>        Set nodes = Generics.newHashSet();\r\n<br>      +        deps.stream()\r\n<br>      +            .map(\r\n<br>      +                dep -&gt; {\r\n<br>      +                  nodes.add(dep.gov());\r\n<br>      +                  return dep;\r\n<br>      +                })\r\n<br>      +            .forEach(\r\n<br>      +                dep -&gt; {\r\n<br>      +                  nodes.add(dep.dep());\r\n<br>      +                });\r\n<br>    \r\n<br><br></p>',NULL,'2019-01-10 10:10:35','2019-01-10 10:22:38','diff-256f88ee5a6d39b73c9399f43ae55ecb-20190110101035','https://github.com/stanfordnlp/CoreNLP/pull/545/commits/f950190a60d01c522578ddea728a5180e09b0f40#diff-256f88ee5a6d39b73c9399f43ae55ecb','/var/www/QARefactorings/app/webroot/files/diff-256f88ee5a6d39b73c9399f43ae55ecb-20190110101035/a.txt','/var/www/QARefactorings/app/webroot/files/diff-256f88ee5a6d39b73c9399f43ae55ecb-20190110101035/b.txt','L90','R103','S'),(1168,10,1,5,'<p><br>      public void testMultiWordNormalization() {\r\n<br>        for (Pair testCase : multiWordTestCases) {\r\n<br>          Tree head = readTree(testCase.first());\r\n<br>      -          for (Tree t : head) {\r\n<br>      -            if (t.isPrePreTerminal())\r\n<br>      -              tn.normalizeForMultiWord(t, tf);\r\n<br>      -          }\r\n<br>    \r\n<br><br></p>',NULL,'<p><br>      public void testMultiWordNormalization() {\r\n<br>        for (Pair testCase : multiWordTestCases) {\r\n<br>          Tree head = readTree(testCase.first());\r\n<br>      +          head.stream()\r\n<br>      +              .filter(t -&gt; t.isPrePreTerminal())\r\n<br>      +              .forEach(\r\n<br>      +                  t -&gt; {\r\n<br>      +                    tn.normalizeForMultiWord(t, tf);\r\n<br>      +                  });\r\n<br>    \r\n<br><br></p>',NULL,'2019-01-10 10:12:15','2019-01-10 10:22:40','diff-a5be1778add685c6af3da81a8dbf0008-20190110101215','https://github.com/stanfordnlp/CoreNLP/pull/545/commits/f950190a60d01c522578ddea728a5180e09b0f40#diff-a5be1778add685c6af3da81a8dbf0008','/var/www/QARefactorings/app/webroot/files/diff-a5be1778add685c6af3da81a8dbf0008-20190110101215/a.txt','/var/www/QARefactorings/app/webroot/files/diff-a5be1778add685c6af3da81a8dbf0008-20190110101215/b.txt','L73','R82','S'),(1169,2,1,5,'<p><br>\r\n<br>      private static List makeSVMLightLineInfos(List lines) {\r\n<br>        List lineInfos = new ArrayList&lt;&gt;(lines.size());\r\n<br>      -        for (String line : lines) {\r\n<br>      -          line = line.replaceFirst(\"#.*$\", \"\"); // remove any trailing comments\r\n<br>      -          // in principle, it\'d be nice to save the comment, though, for possible use as a displayedColumn - make it column 1??\r\n<br>      -          lineInfos.add(line.split(\"\\\\s+\"));\r\n<br>      -        }\r\n<br>        return lineInfos;\r\n<br>      }\r\n<br>    \r\n<br><br></p>',NULL,'<p><br>\r\n<br>      private static List makeSVMLightLineInfos(List lines) {\r\n<br>        List lineInfos = new ArrayList&lt;&gt;(lines.size());\r\n<br>      +        lines\r\n<br>      +            .stream()\r\n<br>      +            .map(\r\n<br>      +                line -&gt; {\r\n<br>      +                  line = line.replaceFirst(\"#.*$\", \"\");\r\n<br>      +                  return line;\r\n<br>      +                })\r\n<br>      +            .forEach(\r\n<br>      +                line -&gt; {\r\n<br>      +                  lineInfos.add(line.split(\"\\\\s+\"));\r\n<br>      +                });\r\n<br>        return lineInfos;\r\n<br>      }\r\n<br>    \r\n<br><br></p>',NULL,'2019-01-10 10:12:21','2019-01-10 10:22:04','diff-0b17448b3317b1cbc0da6eb8b3040b70-20190110101221','https://github.com/stanfordnlp/CoreNLP/pull/545/commits/f950190a60d01c522578ddea728a5180e09b0f40#diff-0b17448b3317b1cbc0da6eb8b3040b70','/var/www/QARefactorings/app/webroot/files/diff-0b17448b3317b1cbc0da6eb8b3040b70-20190110101221/a.txt','/var/www/QARefactorings/app/webroot/files/diff-0b17448b3317b1cbc0da6eb8b3040b70-20190110101221/b.txt','L380','R396','S'),(1170,2,1,5,'<p><br>    \r\n<br>\r\n<br>      private void addAllInterningAndPrefixing(Collection accumulator, Collection addend, String prefix) {\r\n<br>        assert prefix != null;\r\n<br>      -        for (String protoFeat : addend) {\r\n<br>      -          if ( ! prefix.isEmpty()) {\r\n<br>      -            protoFeat = prefix + protoFeat;\r\n<br>      -          }\r\n<br>      -          if (globalFlags.intern) {\r\n<br>      -            protoFeat = protoFeat.intern();\r\n<br>      -          }\r\n<br>      -          accumulator.add(protoFeat);\r\n<br>        }\r\n<br>      -      }\r\n<br>    \r\n<br><br></p>',NULL,'<p><br>    \r\n<br>\r\n<br>      private void addAllInterningAndPrefixing(Collection accumulator, Collection addend, String prefix) {\r\n<br>        assert prefix != null;\r\n<br>      +        addend\r\n<br>      +            .stream()\r\n<br>      +            .map(\r\n<br>      +                protoFeat -&gt; {\r\n<br>      +                  if (!prefix.isEmpty()) {\r\n<br>      +                    protoFeat = prefix + protoFeat;\r\n<br>      +                  }\r\n<br>      +                  return protoFeat;\r\n<br>      +                })\r\n<br>      +            .map(\r\n<br>      +                protoFeat -&gt; {\r\n<br>      +                  if (globalFlags.intern) {\r\n<br>      +                    protoFeat = protoFeat.intern();\r\n<br>      +                  }\r\n<br>      +                  return protoFeat;\r\n<br>      +                })\r\n<br>      +            .forEach(\r\n<br>      +                protoFeat -&gt; {\r\n<br>      +                  accumulator.add(protoFeat);\r\n<br>      +                });\r\n<br>        }\r\n<br>    \r\n<br><br></p>',NULL,'2019-01-10 10:12:26','2019-01-10 10:21:57','diff-0b17448b3317b1cbc0da6eb8b3040b70-20190110101226','https://github.com/stanfordnlp/CoreNLP/pull/545/commits/f950190a60d01c522578ddea728a5180e09b0f40#diff-0b17448b3317b1cbc0da6eb8b3040b70','/var/www/QARefactorings/app/webroot/files/diff-0b17448b3317b1cbc0da6eb8b3040b70-20190110101226/a.txt','/var/www/QARefactorings/app/webroot/files/diff-0b17448b3317b1cbc0da6eb8b3040b70-20190110101226/b.txt','L899','R927','S'),(1171,2,1,5,'<p><br>      protected void addInstances(Collection&gt; datums) {\r\n<br>      -        for (RVFDatum datum : datums) {\r\n<br>      -          K label = datum.label();\r\n<br>      -          Counter vec = datum.asFeaturesCounter();\r\n<br>      -          instances.add(label, vec);\r\n<br>      -          classLookup.put(vec, label);\r\n<br>        }\r\n<br>      -      }\r\n<br>    \r\n<br><br></p>',NULL,'<p><br>      protected void addInstances(Collection&gt; datums) {\r\n<br>      +        datums.forEach(\r\n<br>      +            datum -&gt; {\r\n<br>      +              K label = datum.label();\r\n<br>      +              Counter vec = datum.asFeaturesCounter();\r\n<br>      +              instances.add(label, vec);\r\n<br>      +              classLookup.put(vec, label);\r\n<br>      +            });\r\n<br>        }\r\n<br>    \r\n<br><br></p>',NULL,'2019-01-10 10:12:32','2019-01-10 10:21:53','diff-5d135c1703ac38f273814bfee66438e9-20190110101232','https://github.com/stanfordnlp/CoreNLP/pull/545/commits/f950190a60d01c522578ddea728a5180e09b0f40#diff-5d135c1703ac38f273814bfee66438e9','/var/www/QARefactorings/app/webroot/files/diff-5d135c1703ac38f273814bfee66438e9-20190110101232/a.txt','/var/www/QARefactorings/app/webroot/files/diff-5d135c1703ac38f273814bfee66438e9-20190110101232/b.txt','L42','R52','S'),(1172,2,1,5,'<p><br>          Counter c = new ClassicCounter&lt;&gt;();\r\n<br>          L label  = labelIndex.get(i);\r\n<br>          double[] w =  weights[i];\r\n<br>      -          for (F f : featureIndex) {\r\n<br>      -            int indexf = featureIndex.indexOf(f);\r\n<br>      -            if(w[indexf] != 0.0)\r\n<br>      -              c.setCount(f, w[indexf]);\r\n<br>      -    \r\n<br>\r\n<br>      -          }\r\n<br>          allweights.put(label, c);\r\n<br>        }\r\n<br>        return allweights;\r\n<br>      }\r\n<br>      -    \r\n<br>\r\n<br>    \r\n<br><br></p>',NULL,'<p><br>          Counter c = new ClassicCounter&lt;&gt;();\r\n<br>          L label  = labelIndex.get(i);\r\n<br>          double[] w =  weights[i];\r\n<br>\r\n<br>      +          featureIndex.forEach(\r\n<br>      +              f -&gt; {\r\n<br>      +                int indexf = featureIndex.indexOf(f);\r\n<br>      +                if (w[indexf] != 0.0) c.setCount(f, w[indexf]);\r\n<br>      +              });\r\n<br>          allweights.put(label, c);\r\n<br>        }\r\n<br>        return allweights;\r\n<br>      }\r\n<br>\r\n<br>    \r\n<br><br></p>',NULL,'2019-01-10 10:12:38','2019-01-10 10:21:34','diff-f77dd07722fcafadcbac366ced02ee16-20190110101238','https://github.com/stanfordnlp/CoreNLP/pull/545/commits/f950190a60d01c522578ddea728a5180e09b0f40#diff-f77dd07722fcafadcbac366ced02ee16','/var/www/QARefactorings/app/webroot/files/diff-f77dd07722fcafadcbac366ced02ee16-20190110101238/a.txt','/var/www/QARefactorings/app/webroot/files/diff-f77dd07722fcafadcbac366ced02ee16-20190110101238/b.txt','L147','R159','S'),(1173,2,1,5,'<p><br>    \r\n<br>\r\n<br>            Counter&gt; goldCounts = new ClassicCounter&lt;&gt;();\r\n<br>            double correct = 0;\r\n<br>      -            for (int m : c) {\r\n<br>      -              List goldCluster = mentionToGold.get(m);\r\n<br>      -              if (goldCluster != null) {\r\n<br>      -                goldCounts.incrementCount(goldCluster);\r\n<br>      -              }\r\n<br>      -            }\r\n<br>    \r\n<br><br></p>',NULL,'<p><br>    \r\n<br>\r\n<br>            Counter&gt; goldCounts = new ClassicCounter&lt;&gt;();\r\n<br>            double correct = 0;\r\n<br>      +            c.forEach(\r\n<br>      +                m -&gt; {\r\n<br>      +                  List goldCluster = mentionToGold.get(m);\r\n<br>      +                  if (goldCluster != null) {\r\n<br>      +                    goldCounts.incrementCount(goldCluster);\r\n<br>      +                  }\r\n<br>      +                });\r\n<br>    \r\n<br><br></p>',NULL,'2019-01-10 10:12:43','2019-01-10 10:21:28','diff-f3ea6b6fbb8e460e10f865aa18330641-20190110101243','https://github.com/stanfordnlp/CoreNLP/pull/545/commits/f950190a60d01c522578ddea728a5180e09b0f40#diff-f3ea6b6fbb8e460e10f865aa18330641','/var/www/QARefactorings/app/webroot/files/diff-f3ea6b6fbb8e460e10f865aa18330641-20190110101243/a.txt','/var/www/QARefactorings/app/webroot/files/diff-f3ea6b6fbb8e460e10f865aa18330641-20190110101243/b.txt','L127','R137','S'),(1174,1,1,5,'<p><br>    \r\n<br>\r\n<br>      private static String join(List tokens) {\r\n<br>      -        return StringUtils.join(Iterables.transform(tokens, new Function() {\r\n<br>      -          public String apply(CoreLabel token) {\r\n<br>      -            return token.get(CoreAnnotations.TextAnnotation.class);\r\n<br>      -          }\r\n<br>      -        }));\r\n<br>      }\r\n<br>    \r\n<br><br></p>',NULL,'<p><br>    \r\n<br>\r\n<br>      private static String join(List tokens) {\r\n<br>      +        return StringUtils.join(Iterables.transform(tokens, (CoreLabel token)-&gt;{ return token.get(CoreAnnotations.TextAnnotation.class);}));\r\n<br>      }\r\n<br>    \r\n<br><br></p>',NULL,'2019-01-10 10:12:49','2019-01-10 10:21:23','diff-564226bdb9959af10d22047d9ca36565-20190110101249','https://github.com/stanfordnlp/CoreNLP/pull/544/commits/b4e6c2e2d89b3939d25cf21948b6d9d7d0be1b2c#diff-564226bdb9959af10d22047d9ca36565','/var/www/QARefactorings/app/webroot/files/diff-564226bdb9959af10d22047d9ca36565-20190110101249/a.txt','/var/www/QARefactorings/app/webroot/files/diff-564226bdb9959af10d22047d9ca36565-20190110101249/b.txt','L143','R147','S'),(1175,1,1,5,'<p><br>\r\n<br>        for (final File file : fileList) {\r\n<br>      -          pool.execute(new Runnable() {\r\n<br>      -              public void run() {\r\n<br>      -                try {\r\n<br>                  Reader in = new BufferedReader(new InputStreamReader(new FileInputStream(file), \"ISO-8859-1\"));\r\n<br>                  TreeReader tr = trf.newTreeReader(file.getPath(), in);\r\n<br>                  process(file, tr, posPattern, wordPattern, plainPrint);\r\n<br>    @@ -501,9 +499,7 @@ public void run() {\r\n<br>                  e.printStackTrace();\r\n<br>                } catch (IOException e) {\r\n<br>                  e.printStackTrace();\r\n<br>      -                }\r\n<br>      -              }\r\n<br>      -            });\r\n<br>        }\r\n<br>    \r\n<br><br></p>',NULL,'<p><br>    \r\n<br>\r\n<br>        for (final File file : fileList) {\r\n<br>      +          pool.execute(()-&gt; { try {\r\n<br>                  Reader in = new BufferedReader(new InputStreamReader(new FileInputStream(file), \"ISO-8859-1\"));\r\n<br>                  TreeReader tr = trf.newTreeReader(file.getPath(), in);\r\n<br>                  process(file, tr, posPattern, wordPattern, plainPrint);\r\n<br>    @@ -501,9 +499,7 @@ public void run() {\r\n<br>                  e.printStackTrace();\r\n<br>                } catch (IOException e) {\r\n<br>                  e.printStackTrace();\r\n<br>      +                }});\r\n<br>        }\r\n<br>    \r\n<br><br></p>',NULL,'2019-01-10 10:12:54','2019-01-10 10:21:02','diff-dbd529f14a214768fb936c4d4e4ba4b8-20190110101254','https://github.com/stanfordnlp/CoreNLP/pull/544/commits/b4e6c2e2d89b3939d25cf21948b6d9d7d0be1b2c#diff-dbd529f14a214768fb936c4d4e4ba4b8','/var/www/QARefactorings/app/webroot/files/diff-dbd529f14a214768fb936c4d4e4ba4b8-20190110101254/a.txt','/var/www/QARefactorings/app/webroot/files/diff-dbd529f14a214768fb936c4d4e4ba4b8-20190110101254/b.txt','L491','R504','S'),(1176,1,1,5,'<p><br>      public static  Iterable transform(\r\n<br>          final Iterable iterable, final Function function) {\r\n<br>    \r\n<br>\r\n<br>      -        return new Iterable() {\r\n<br>      -          public Iterator iterator() {\r\n<br>      -            return new Iterator() {\r\n<br>              Iterator inner = iterable.iterator();\r\n<br>    \r\n<br>\r\n<br>              public boolean hasNext() {\r\n<br>    @@ -56,9 +54,7 @@ public V next() {\r\n<br>              public void remove() {\r\n<br>                inner.remove();\r\n<br>              }\r\n<br>      -            };\r\n<br>      -          }\r\n<br>      -        };\r\n<br>      }\r\n<br>    \r\n<br><br></p>',NULL,'<p><br>      public static  Iterable transform(\r\n<br>          final Iterable iterable, final Function function) {\r\n<br>    \r\n<br>\r\n<br>      +        return ()-&gt; { return new Iterator() {\r\n<br>              Iterator inner = iterable.iterator();\r\n<br>    \r\n<br>\r\n<br>              public boolean hasNext() {\r\n<br>    @@ -56,9 +54,7 @@ public V next() {\r\n<br>              public void remove() {\r\n<br>                inner.remove();\r\n<br>              }\r\n<br>      +            };};\r\n<br>      }\r\n<br>    \r\n<br><br></p>',NULL,'2019-01-10 10:13:00','2019-01-10 10:20:36','diff-2c05cf221bbe0e7556d9ebe78e54b60e-20190110101300','https://github.com/stanfordnlp/CoreNLP/pull/544/commits/b4e6c2e2d89b3939d25cf21948b6d9d7d0be1b2c#diff-2c05cf221bbe0e7556d9ebe78e54b60e','/var/www/QARefactorings/app/webroot/files/diff-2c05cf221bbe0e7556d9ebe78e54b60e-20190110101300/a.txt','/var/www/QARefactorings/app/webroot/files/diff-2c05cf221bbe0e7556d9ebe78e54b60e-20190110101300/b.txt','L40','R59','S'),(1177,1,1,5,'<p><br>      public static  Iterable&gt; zip(\r\n<br>          final Iterable iter1, final Iterable iter2) {\r\n<br>    \r\n<br>\r\n<br>      -        return new Iterable&gt;() {\r\n<br>      -          public Iterator&gt; iterator() {\r\n<br>      -            return zip(iter1.iterator(), iter2.iterator());\r\n<br>      -          }\r\n<br>      -        };\r\n<br>      }\r\n<br>    \r\n<br><br></p>',NULL,'<p><br>      public static  Iterable&gt; zip(\r\n<br>          final Iterable iter1, final Iterable iter2) {\r\n<br>    \r\n<br>\r\n<br>      +        return ()-&gt; { return zip(iter1.iterator(), iter2.iterator());};\r\n<br>      }\r\n<br>    \r\n<br><br></p>',NULL,'2019-01-10 10:13:05','2019-01-10 10:20:31','diff-2c05cf221bbe0e7556d9ebe78e54b60e-20190110101305','https://github.com/stanfordnlp/CoreNLP/pull/544/commits/b4e6c2e2d89b3939d25cf21948b6d9d7d0be1b2c#diff-2c05cf221bbe0e7556d9ebe78e54b60e','/var/www/QARefactorings/app/webroot/files/diff-2c05cf221bbe0e7556d9ebe78e54b60e-20190110101305/a.txt','/var/www/QARefactorings/app/webroot/files/diff-2c05cf221bbe0e7556d9ebe78e54b60e-20190110101305/b.txt','L304','R301','S'),(1178,1,1,5,'<p><br>    public class GoldenSectionLineSearchTest extends TestCase {\r\n<br>        public void testEasy() {\r\n<br>          GoldenSectionLineSearch min = new GoldenSectionLineSearch(false, 0.00001, 0.0, 1.0, false);\r\n<br>      -          Function f2 = new Function() {\r\n<br>      -            public Double apply(Double x) {\r\n<br>      -              // this function used to fail in Galen\'s version; min should be 0.2\r\n<br>      -              // return - x * (2 * x - 1) * (x - 0.8);\r\n<br>      -              // this function fails if you don\'t find an initial bracketing\r\n<br>      -              return x &lt; 0.1 ? 0.0: (x &gt; 0.2 ? 0.0: (x - 0.1) * (x - 0.2));\r\n<br>      -              // return - Math.sin(x * Math.PI);\r\n<br>      -              // return -(3 + 6 * x - 4 * x * x);\r\n<br>      -            }\r\n<br>      -          };\r\n<br>          assertEquals(0.15,min.minimize(f2),1E-4);\r\n<br>        }\r\n<br>    \r\n<br><br></p>',NULL,'<p><br>    public class GoldenSectionLineSearchTest extends TestCase {\r\n<br>        public void testEasy() {\r\n<br>          GoldenSectionLineSearch min = new GoldenSectionLineSearch(false, 0.00001, 0.0, 1.0, false);\r\n<br>      +          Function f2 = (Double x)-&gt;{ return x &lt; 0.1 ? 0.0: (x &gt; 0.2 ? 0.0: (x - 0.1) * (x - 0.2));};\r\n<br>          assertEquals(0.15,min.minimize(f2),1E-4);\r\n<br>        }\r\n<br>    \r\n<br><br></p>',NULL,'2019-01-10 10:13:11','2019-01-10 10:20:27','diff-7a87d4cbe4ae26134c556cd3b13420ff-20190110101311','https://github.com/stanfordnlp/CoreNLP/pull/544/commits/b4e6c2e2d89b3939d25cf21948b6d9d7d0be1b2c#diff-7a87d4cbe4ae26134c556cd3b13420ff','/var/www/QARefactorings/app/webroot/files/diff-7a87d4cbe4ae26134c556cd3b13420ff-20190110101311/a.txt','/var/www/QARefactorings/app/webroot/files/diff-7a87d4cbe4ae26134c556cd3b13420ff-20190110101311/b.txt','L6','R12','S'),(1179,1,1,5,'<p><br>        Tree tree = convertTree(commaTreeString);\r\n<br>        List transitions = CreateTransitionSequence.createTransitionSequence(tree, true, Collections.singleton(\"ROOT\"), Collections.singleton(\"ROOT\"));\r\n<br>        List expectedTransitions = Arrays.asList(new String[] { \"Shift\", \"Shift\", \"Shift\", \"Shift\", \"RightBinary(@ADJP)\", \"RightBinary(ADJP)\", \"Shift\", \"RightBinary(@NP)\", \"RightBinary(NP)\", \"CompoundUnary*([ROOT, FRAG])\", \"Finalize\", \"Idle\" });\r\n<br>      -        assertEquals(expectedTransitions, CollectionUtils.transformAsList(transitions, new Function() { public String apply(Transition t) { return t.toString(); } }));\r\n<br>    \r\n<br>\r\n<br>        String expectedSeparators = \"[{2=,}]\";\r\n<br>    \r\n<br><br></p>',NULL,'<p><br>        Tree tree = convertTree(commaTreeString);\r\n<br>        List transitions = CreateTransitionSequence.createTransitionSequence(tree, true, Collections.singleton(\"ROOT\"), Collections.singleton(\"ROOT\"));\r\n<br>        List expectedTransitions = Arrays.asList(new String[] { \"Shift\", \"Shift\", \"Shift\", \"Shift\", \"RightBinary(@ADJP)\", \"RightBinary(ADJP)\", \"Shift\", \"RightBinary(@NP)\", \"RightBinary(NP)\", \"CompoundUnary*([ROOT, FRAG])\", \"Finalize\", \"Idle\" });\r\n<br>      +        assertEquals(expectedTransitions, CollectionUtils.transformAsList(transitions, (Transition t)-&gt;{ return t.toString();}));\r\n<br>    \r\n<br>\r\n<br>        String expectedSeparators = \"[{2=,}]\";\r\n<br>    \r\n<br><br></p>',NULL,'2019-01-10 10:13:16','2019-01-10 10:20:23','diff-5e62f540b473742abaf13268fd2b9a1d-20190110101316','https://github.com/stanfordnlp/CoreNLP/pull/544/commits/b4e6c2e2d89b3939d25cf21948b6d9d7d0be1b2c#diff-5e62f540b473742abaf13268fd2b9a1d','/var/www/QARefactorings/app/webroot/files/diff-5e62f540b473742abaf13268fd2b9a1d-20190110101316/a.txt','/var/www/QARefactorings/app/webroot/files/diff-5e62f540b473742abaf13268fd2b9a1d-20190110101316/b.txt','L74','R80','S'),(1180,1,1,5,'<p><br>      private String expectedAnswer2 =\r\n<br>              \"  yo! C&amp;C!yo! C&amp;C!  \";\r\n<br>    \r\n<br>\r\n<br>      -      private Function duplicate = new Function() {\r\n<br>      -        public String apply(String in) {\r\n<br>      -          return in + in;\r\n<br>      -        }\r\n<br>      -      };\r\n<br>    \r\n<br><br></p>',NULL,'<p><br>      private String expectedAnswer2 =\r\n<br>              \"  yo! C&amp;C!yo! C&amp;C!  \";\r\n<br>    \r\n<br>\r\n<br>      +      private Function duplicate = (String in)-&gt;{ return in + in;};\r\n<br>    \r\n<br><br></p>',NULL,'2019-01-10 10:13:22','2019-01-10 10:20:02','diff-5e64cc93947463b84a2731a5e1e459d1-20190110101322','https://github.com/stanfordnlp/CoreNLP/pull/544/commits/b4e6c2e2d89b3939d25cf21948b6d9d7d0be1b2c#diff-5e64cc93947463b84a2731a5e1e459d1','/var/www/QARefactorings/app/webroot/files/diff-5e64cc93947463b84a2731a5e1e459d1-20190110101322/a.txt','/var/www/QARefactorings/app/webroot/files/diff-5e64cc93947463b84a2731a5e1e459d1-20190110101322/b.txt','L21','R25','S'),(1181,2,1,5,'<p><br>                assertEquals(0, options.getOffset());\r\n<br>                assertEquals(4, options.getLength());\r\n<br>                assertEquals(2 ,options.getOptions().size());\r\n<br>      -                for (Suggest.Suggestion.Entry.Option option : options) {\r\n<br>      -                    assertThat(option.getScore(), greaterThan(0f));\r\n<br>      -                    assertThat(option.getText().string(), either(equalTo(\"type1\")).or(equalTo(\"type2\")));\r\n<br>      -                }\r\n<br>            }\r\n<br>        }\r\n<br>    \r\n<br><br></p>',NULL,'<p><br>                assertEquals(0, options.getOffset());\r\n<br>                assertEquals(4, options.getLength());\r\n<br>                assertEquals(2 ,options.getOptions().size());\r\n<br>      +                options.stream()\r\n<br>      +                        .map(\r\n<br>      +                                option -&gt; {\r\n<br>      +                                    assertThat(option.getScore(), greaterThan(0f));\r\n<br>      +                                    return option;\r\n<br>      +                                })\r\n<br>      +                        .forEach(\r\n<br>      +                                option -&gt; {\r\n<br>      +                                    assertThat(\r\n<br>      +                                            option.getText().string(),\r\n<br>      +                                            either(equalTo(\"type1\")).or(equalTo(\"type2\")));\r\n<br>      +                                });\r\n<br>            }\r\n<br>        }\r\n<br>    \r\n<br><br></p>',NULL,'2019-01-10 10:13:31','2019-01-10 10:19:48','diff-8e288e58f92d7cd10297be593f101a3c-20190110101331','https://github.com/elastic/elasticsearch/pull/27015/commits/393741e05ccde6ad778e767653a35cbf87dd7679#diff-8e288e58f92d7cd10297be593f101a3c','/var/www/QARefactorings/app/webroot/files/diff-8e288e58f92d7cd10297be593f101a3c-20190110101331/a.txt','/var/www/QARefactorings/app/webroot/files/diff-8e288e58f92d7cd10297be593f101a3c-20190110101331/b.txt','L398','R415','S'),(1182,2,1,5,'<p><br>    \r\n<br>\r\n<br>            assertEquals(numRequests, responses.size());\r\n<br>      -            for (TestResponse testResponse : responses) {\r\n<br>      -                Response response = testResponse.getResponse();\r\n<br>      -                assertEquals(testResponse.method, response.getRequestLine().getMethod());\r\n<br>      -                assertEquals(testResponse.statusCode, response.getStatusLine().getStatusCode());\r\n<br>      -                assertEquals((pathPrefix.length() &gt; 0 ? pathPrefix : \"\") + \"/\" + testResponse.statusCode,\r\n<br>      -                        response.getRequestLine().getUri());\r\n<br>      -            }\r\n<br>        }\r\n<br>    \r\n<br><br></p>',NULL,'<p><br>    \r\n<br>\r\n<br>            assertEquals(numRequests, responses.size());\r\n<br>      +            responses.forEach(\r\n<br>      +                    testResponse -&gt; {\r\n<br>      +                        Response response = testResponse.getResponse();\r\n<br>      +                        assertEquals(testResponse.method, response.getRequestLine().getMethod());\r\n<br>      +                        assertEquals(testResponse.statusCode, response.getStatusLine().getStatusCode());\r\n<br>      +                        assertEquals(\r\n<br>      +                                (pathPrefix.length() &gt; 0 ? pathPrefix : \"\")\r\n<br>      +                                        + \"/\"\r\n<br>      +                                        + testResponse.statusCode,\r\n<br>      +                                response.getRequestLine().getUri());\r\n<br>      +                    });\r\n<br>        }\r\n<br>    \r\n<br><br></p>',NULL,'2019-01-10 10:13:37','2019-01-10 10:19:43','diff-05934ddddf4778538f0e13e907708437-20190110101337','https://github.com/elastic/elasticsearch/pull/27015/commits/393741e05ccde6ad778e767653a35cbf87dd7679#diff-05934ddddf4778538f0e13e907708437','/var/www/QARefactorings/app/webroot/files/diff-05934ddddf4778538f0e13e907708437-20190110101337/a.txt','/var/www/QARefactorings/app/webroot/files/diff-05934ddddf4778538f0e13e907708437-20190110101337/b.txt','L179','R193','S'),(1183,10,1,5,'<p><br>    \r\n<br>\r\n<br>      -        private List buildSimpleSnapshotInfos(final Set toResolve,\r\n<br>      -                                                            final RepositoryData repositoryData,\r\n<br>      -                                                            final List currentSnapshots) {\r\n<br>            List snapshotInfos = new ArrayList&lt;&gt;();\r\n<br>      -            for (SnapshotInfo snapshotInfo : currentSnapshots) {\r\n<br>      -                if (toResolve.remove(snapshotInfo.snapshotId())) {\r\n<br>      -                    snapshotInfos.add(snapshotInfo.basic());\r\n<br>      -                }\r\n<br>      -            }\r\n<br>    \r\n<br><br></p>',NULL,'<p><br>    \r\n<br>\r\n<br>      +        private List buildSimpleSnapshotInfos(\r\n<br>      +                final Set toResolve,\r\n<br>      +                final RepositoryData repositoryData,\r\n<br>      +                final List currentSnapshots) {\r\n<br>            List snapshotInfos = new ArrayList&lt;&gt;();\r\n<br>      +            currentSnapshots\r\n<br>      +                    .stream()\r\n<br>      +                    .filter(snapshotInfo -&gt; toResolve.remove(snapshotInfo.snapshotId()))\r\n<br>      +                    .forEach(\r\n<br>      +                            snapshotInfo -&gt; {\r\n<br>      +                                snapshotInfos.add(snapshotInfo.basic());\r\n<br>      +                            });\r\n<br>    \r\n<br><br></p>',NULL,'2019-01-10 10:13:42','2019-01-10 10:19:37','diff-2fa0d5d518af9d995eb3afb8e725e43c-20190110101342','https://github.com/elastic/elasticsearch/pull/27015/commits/393741e05ccde6ad778e767653a35cbf87dd7679#diff-2fa0d5d518af9d995eb3afb8e725e43c','/var/www/QARefactorings/app/webroot/files/diff-2fa0d5d518af9d995eb3afb8e725e43c-20190110101342/a.txt','/var/www/QARefactorings/app/webroot/files/diff-2fa0d5d518af9d995eb3afb8e725e43c-20190110101342/b.txt','L161','R174','S'),(1184,2,1,5,'<p><br>\r\n<br>        @Override\r\n<br>      -        protected FieldCapabilitiesIndexResponse shardOperation(final FieldCapabilitiesIndexRequest request, ShardId shardId) {\r\n<br>            MapperService mapperService = indicesService.indexServiceSafe(shardId.getIndex()).mapperService();\r\n<br>            Set fieldNames = new HashSet&lt;&gt;();\r\n<br>            for (String field : request.fields()) {\r\n<br>                fieldNames.addAll(mapperService.simpleMatchToIndexNames(field));\r\n<br>            }\r\n<br>            Map responseMap = new HashMap&lt;&gt;();\r\n<br>      -            for (String field : fieldNames) {\r\n<br>      -                MappedFieldType ft = mapperService.fullName(field);\r\n<br>      -                if (ft != null) {\r\n<br>      -                    FieldCapabilities fieldCap = new FieldCapabilities(field, ft.typeName(), ft.isSearchable(), ft.isAggregatable());\r\n<br>      -                    responseMap.put(field, fieldCap);\r\n<br>      -                }\r\n<br>      -            }\r\n<br>            return new FieldCapabilitiesIndexResponse(shardId.getIndexName(), responseMap);\r\n<br>        }\r\n<br>    \r\n<br><br></p>',NULL,'<p><br><br>        @Override\r\n<br>      +        protected FieldCapabilitiesIndexResponse shardOperation(\r\n<br>      +                final FieldCapabilitiesIndexRequest request, ShardId shardId) {\r\n<br>            MapperService mapperService = indicesService.indexServiceSafe(shardId.getIndex()).mapperService();\r\n<br>            Set fieldNames = new HashSet&lt;&gt;();\r\n<br>            for (String field : request.fields()) {\r\n<br>                fieldNames.addAll(mapperService.simpleMatchToIndexNames(field));\r\n<br>            }\r\n<br>            Map responseMap = new HashMap&lt;&gt;();\r\n<br>      +            fieldNames.forEach(\r\n<br>      +                    field -&gt; {\r\n<br>      +                        MappedFieldType ft = mapperService.fullName(field);\r\n<br>      +                        if (ft != null) {\r\n<br>      +                            FieldCapabilities fieldCap =\r\n<br>      +                                    new FieldCapabilities(\r\n<br>      +                                            field,\r\n<br>      +                                            ft.typeName(),\r\n<br>      +                                            ft.isSearchable(),\r\n<br>      +                                            ft.isAggregatable());\r\n<br>      +                            responseMap.put(field, fieldCap);\r\n<br>      +                        }\r\n<br>      +                    });\r\n<br>            return new FieldCapabilitiesIndexResponse(shardId.getIndexName(), responseMap);\r\n<br>        }\r\n<br>    \r\n<br><br></p>',NULL,'2019-01-10 10:13:47','2019-01-10 10:23:25','diff-0a2e388b76e6a461ba52ca00e6f89ca2-20190110101347','https://github.com/elastic/elasticsearch/pull/27015/commits/393741e05ccde6ad778e767653a35cbf87dd7679#diff-0a2e388b76e6a461ba52ca00e6f89ca2','/var/www/QARefactorings/app/webroot/files/diff-0a2e388b76e6a461ba52ca00e6f89ca2-20190110101347/a.txt','/var/www/QARefactorings/app/webroot/files/diff-0a2e388b76e6a461ba52ca00e6f89ca2-20190110101347/b.txt','L72','R97','S'),(1185,2,1,5,'<p><br>    \r\n<br>\r\n<br>    	public List findWebElements(SearchContext context) {\r\n<br>    		Set elements = new LinkedHashSet&lt;&gt;();\r\n<br>      -    		for (TagComponent tagComponent : tagComponents) {\r\n<br>      -    			List elementsFound = tagComponent.findWebElements(context);\r\n<br>      -    			elements.addAll(elementsFound);\r\n<br>      -    		}\r\n<br>    		return new ArrayList&lt;&gt;(elements);\r\n<br>    \r\n<br><br></p>',NULL,'<p><br>    \r\n<br>\r\n<br>    	public List findWebElements(SearchContext context) {\r\n<br>    		Set elements = new LinkedHashSet&lt;&gt;();\r\n<br>      +    		tagComponents.stream().map(elementsFound -&gt; tagComponent.findWebElements(context)).forEach(elementsFound -&gt; {\r\n<br>      +                        elements.addAll(elementsFound);\r\n<br>      +                    });\r\n<br>    		return new ArrayList&lt;&gt;(elements);\r\n<br>    \r\n<br><br></p>',NULL,'2019-01-10 10:14:11','2019-01-10 10:19:10','diff-72c518537836c9460436f9f51c832435-20190110101411','https://github.com/seleniumQuery/seleniumQuery/pull/178/commits/0b01ab2eec4a0ed816a9e57c34c2dcd5dd1530be#diff-72c518537836c9460436f9f51c832435','/var/www/QARefactorings/app/webroot/files/diff-72c518537836c9460436f9f51c832435-20190110101411/a.txt','/var/www/QARefactorings/app/webroot/files/diff-72c518537836c9460436f9f51c832435-20190110101411/b.txt','L47','R54','S'),(1186,2,1,5,'<p><br>    \r\n<br>\r\n<br>    	public static TagComponentList compileSelectorList(String selector) {\r\n<br>      -    		CssParsedSelectorList parsedSelectorList = CssSelectorParser.parseSelector(selector);\r\n<br>    \r\n<br>\r\n<br>      -        	List tagComponents = new ArrayList&lt;&gt;(parsedSelectorList.size());\r\n<br>      -            for (CssParsedSelector cssParsedSelector : parsedSelectorList) {\r\n<br>      -                tagComponents.add(compileIntoTagComponent(cssParsedSelector));\r\n<br>      -            }\r\n<br>        	return new TagComponentList(tagComponents);\r\n<br>    	}\r\n<br>    \r\n<br><br></p>',NULL,'<p><br>    \r\n<br>\r\n<br>    	public static TagComponentList compileSelectorList(String selector) {\r\n<br>      +    	    CssParsedSelectorList parsedSelectorList = CssSelectorParser.parseSelector(selector);\r\n<br>    \r\n<br>\r\n<br>      +        	    List tagComponents = new ArrayList&lt;&gt;(parsedSelectorList.size());\r\n<br>      +                parsedSelectorList.forEach(cssParsedSelector -&gt; {\r\n<br>      +                    tagComponents.add(compileIntoTagComponent(cssParsedSelector));\r\n<br>      +                });\r\n<br>        	return new TagComponentList(tagComponents);\r\n<br>    	}\r\n<br>    \r\n<br><br></p>',NULL,'2019-01-10 10:14:16','2019-01-10 10:19:05','diff-72fab0f1330def096c5bf187a4a785ad-20190110101416','https://github.com/seleniumQuery/seleniumQuery/pull/178/commits/0b01ab2eec4a0ed816a9e57c34c2dcd5dd1530be#diff-72fab0f1330def096c5bf187a4a785ad','/var/www/QARefactorings/app/webroot/files/diff-72fab0f1330def096c5bf187a4a785ad-20190110101416/a.txt','/var/www/QARefactorings/app/webroot/files/diff-72fab0f1330def096c5bf187a4a785ad-20190110101416/b.txt','L34','R44','S'),(1187,2,1,5,'<p><br>        public List findElements(SearchContext context, String selector) {\r\n<br>            CssSelectorList parse = ParseTreeBuilder.parse(selector);\r\n<br>            Set elements = new LinkedHashSet&lt;&gt;();\r\n<br>      -            for (CssSelector s : parse) {\r\n<br>      -                List elementsFound = s.toElementFinder((WebDriver) context).findWebElements(context);\r\n<br>                elements.addAll(elementsFound);\r\n<br>      -            }\r\n<br>            return new ArrayList&lt;&gt;(elements);\r\n<br>        }\r\n<br>    \r\n<br><br></p>',NULL,'<p><br>        public List findElements(SearchContext context, String selector) {\r\n<br>            CssSelectorList parse = ParseTreeBuilder.parse(selector);\r\n<br>            Set elements = new LinkedHashSet&lt;&gt;();\r\n<br>      +            parse.stream().map(elementsFound -&gt; s.toElementFinder((WebDriver) context).findWebElements(context)).forEach(elementsFound -&gt; {\r\n<br>                elements.addAll(elementsFound);\r\n<br>      +            });\r\n<br>            return new ArrayList&lt;&gt;(elements);\r\n<br>        }\r\n<br>    \r\n<br><br></p>',NULL,'2019-01-10 10:14:22','2019-01-10 10:19:00','diff-12ab27e038e37ac437b0a6c2b666895a-20190110101422','https://github.com/seleniumQuery/seleniumQuery/pull/178/commits/0b01ab2eec4a0ed816a9e57c34c2dcd5dd1530be#diff-12ab27e038e37ac437b0a6c2b666895a','/var/www/QARefactorings/app/webroot/files/diff-12ab27e038e37ac437b0a6c2b666895a-20190110101422/a.txt','/var/www/QARefactorings/app/webroot/files/diff-12ab27e038e37ac437b0a6c2b666895a-20190110101422/b.txt','L40','R48','S'),(1188,2,1,5,'<p><br>            private String toChainedNotSelectors(WebDriver webDriver, SqCssFunctionalPseudoClassArgument functionalPseudoClassArgument) {\r\n<br>                CssSelectorList parsedNotPseudoClassArgument = ParseTreeBuilder.parse(functionalPseudoClassArgument.getArgumentAsString());\r\n<br>                StringBuilder chainedNotSelectors = new StringBuilder();\r\n<br>      -                for (CssSelector cssSelector : parsedNotPseudoClassArgument) {\r\n<br>                    chainedNotSelectors.append(\":\").append(PSEUDO_PURE_NOT).append(\"(\").append(cssSelector.toElementFinder(webDriver).toCssString()).append(\")\");\r\n<br>      -                }\r\n<br>                return chainedNotSelectors.toString();\r\n<br>            }\r\n<br>    \r\n<br><br></p>',NULL,'<p><br>            private String toChainedNotSelectors(WebDriver webDriver, SqCssFunctionalPseudoClassArgument functionalPseudoClassArgument) {\r\n<br>                CssSelectorList parsedNotPseudoClassArgument = ParseTreeBuilder.parse(functionalPseudoClassArgument.getArgumentAsString());\r\n<br>                StringBuilder chainedNotSelectors = new StringBuilder();\r\n<br>      +                parsedNotPseudoClassArgument.forEach(cssSelector -&gt; {\r\n<br>                    chainedNotSelectors.append(\":\").append(PSEUDO_PURE_NOT).append(\"(\").append(cssSelector.toElementFinder(webDriver).toCssString()).append(\")\");\r\n<br>      +                });\r\n<br>                return chainedNotSelectors.toString();\r\n<br>            }\r\n<br>    \r\n<br><br></p>',NULL,'2019-01-10 10:14:27','2019-01-10 10:18:26','diff-91dd0adb722e28d50d009221a4caa85c-20190110101427','https://github.com/seleniumQuery/seleniumQuery/pull/178/commits/0b01ab2eec4a0ed816a9e57c34c2dcd5dd1530be#diff-91dd0adb722e28d50d009221a4caa85c','/var/www/QARefactorings/app/webroot/files/diff-91dd0adb722e28d50d009221a4caa85c-20190110101427/a.txt','/var/www/QARefactorings/app/webroot/files/diff-91dd0adb722e28d50d009221a4caa85c-20190110101427/b.txt','L59','R67','S'),(1189,2,1,5,'<p><br>    	public static SeleniumQueryObject focus(SeleniumQueryObject caller) {\r\n<br>    		List elements = caller.get();\r\n<br>    		WebDriver driver = caller.getWebDriver();\r\n<br>      -    		for (WebElement webElement : elements) {\r\n<br>    			focusElement(driver, webElement);\r\n<br>      -    		}\r\n<br>    		return caller;\r\n<br>    	}\r\n<br>    \r\n<br><br></p>',NULL,'<p><br>    	public static SeleniumQueryObject focus(SeleniumQueryObject caller) {\r\n<br>    		List elements = caller.get();\r\n<br>    		WebDriver driver = caller.getWebDriver();\r\n<br>      +    		elements.forEach(webElement -&gt; {\r\n<br>    			focusElement(driver, webElement);\r\n<br>      +    		});\r\n<br>    		return caller;\r\n<br>    	}\r\n<br>    \r\n<br><br></p>',NULL,'2019-01-10 10:14:33','2019-01-10 10:18:19','diff-5be53b2e3e3e17299356795841665894-20190110101433','https://github.com/seleniumQuery/seleniumQuery/pull/178/commits/0b01ab2eec4a0ed816a9e57c34c2dcd5dd1530be#diff-5be53b2e3e3e17299356795841665894','/var/www/QARefactorings/app/webroot/files/diff-5be53b2e3e3e17299356795841665894-20190110101433/a.txt','/var/www/QARefactorings/app/webroot/files/diff-5be53b2e3e3e17299356795841665894-20190110101433/b.txt','L41','R49','S'),(1190,2,1,5,'<p><br>    	public static SeleniumQueryObject val(SeleniumQueryObject seleniumQueryObject, List elements, String value) {\r\n<br>    		LOGGER.debug(\"Setting value of \"+ seleniumQueryObject +\" to: \\\"\"+value+\"\\\".\");\r\n<br>      -    		for (WebElement element : elements) {\r\n<br>      -                changeElementValue(seleniumQueryObject.getWebDriver(), element, value);\r\n<br>      -    		}\r\n<br>    		return seleniumQueryObject;\r\n<br>    	}\r\n<br>    \r\n<br><br></p>',NULL,'<p><br>    	public static SeleniumQueryObject val(SeleniumQueryObject seleniumQueryObject, List elements, String value) {\r\n<br>    		LOGGER.debug(\"Setting value of \"+ seleniumQueryObject +\" to: \\\"\"+value+\"\\\".\");\r\n<br>      +    		elements.forEach(element -&gt; {\r\n<br>      +    			changeElementValue(seleniumQueryObject.getWebDriver(), element, value);\r\n<br>      +    		});\r\n<br>    		return seleniumQueryObject;\r\n<br>    	}\r\n<br>    \r\n<br><br></p>',NULL,'2019-01-10 10:14:38','2019-01-10 10:17:56','diff-7f9156317a6175887c810b9a188fb18b-20190110101438','https://github.com/seleniumQuery/seleniumQuery/pull/178/commits/0b01ab2eec4a0ed816a9e57c34c2dcd5dd1530be#diff-7f9156317a6175887c810b9a188fb18b','/var/www/QARefactorings/app/webroot/files/diff-7f9156317a6175887c810b9a188fb18b-20190110101438/a.txt','/var/www/QARefactorings/app/webroot/files/diff-7f9156317a6175887c810b9a188fb18b-20190110101438/b.txt','L85','R93','S'),(1191,2,1,5,'<p><br>    \r\n<br>\r\n<br>    	public static String text(List webElements) {\r\n<br>    		StringBuilder sb = new StringBuilder();\r\n<br>      -    		for (WebElement element : webElements) {\r\n<br>      -    			// Warning!\r\n<br>      -    			// It is impossible to read text from hidden elements in Selenium:\r\n<br>      -    			// Since a user cannot read text in a hidden element, WebDriver will not allow access to it as well.\r\n<br>      -    &nbsp; &nbsp; &nbsp; // More in WebDriver FAQs: <a target=\"_blank\" rel=\"nofollow\" href=\"https://code.google.com/p/selenium/wiki/FrequentlyAskedQuestions#Q:_Why_is_it_not_possible_to_interact_with_hidden_elements\">https://code.google.com/p/selenium/wiki/FrequentlyAskedQuestions#Q:_Why_is_it_not_possible_to_intera...</a>?\r\n<br>    			sb.append(element.getText()).append(\" \");\r\n<br>      -    		}\r\n<br>    		if (sb.length() &gt; 0) {\r\n<br>    			// remove the last added \" \"\r\n<br>    			sb.deleteCharAt(sb.length()-1);\r\n<br>    		}\r\n<br>    		return sb.toString();\r\n<br>    	}\r\n<br>      -    }\r\n<br>\r\n<br>    \r\n<br><br></p>',NULL,'<p><br>    \r\n<br>\r\n<br>    	public static String text(List webElements) {\r\n<br>    		StringBuilder sb = new StringBuilder();\r\n<br>      +    		webElements.forEach(element -&gt; {\r\n<br>    			sb.append(element.getText()).append(\" \");\r\n<br>      +    		});\r\n<br>    		if (sb.length() &gt; 0) {\r\n<br>    			// remove the last added \" \"\r\n<br>    			sb.deleteCharAt(sb.length()-1);\r\n<br>    		}\r\n<br>    		return sb.toString();\r\n<br>    	}\r\n<br>      +    \r\n<br>\r\n<br>    \r\n<br><br></p>',NULL,'2019-01-10 10:14:44','2019-01-10 10:17:21','diff-ec312d537747aae57bd34b7cc0c30900-20190110101444','https://github.com/seleniumQuery/seleniumQuery/pull/178/commits/0b01ab2eec4a0ed816a9e57c34c2dcd5dd1530be#diff-ec312d537747aae57bd34b7cc0c30900','/var/www/QARefactorings/app/webroot/files/diff-ec312d537747aae57bd34b7cc0c30900-20190110101444/a.txt','/var/www/QARefactorings/app/webroot/files/diff-ec312d537747aae57bd34b7cc0c30900-20190110101444/b.txt','L38','R51','S'),(1192,10,1,5,'<p><br>      -    	public static SeleniumQueryObject closest(SeleniumQueryObject caller, String selector) {\r\n<br>    		List elements = caller.get();\r\n<br>    		WebDriver driver = caller.getWebDriver();\r\n<br>    \r\n<br>\r\n<br>    		List closests = new ArrayList&lt;&gt;(elements.size());\r\n<br>      -    		for (WebElement element : elements) {\r\n<br>      -    			WebElement closestElement = closest(driver, element, selector);\r\n<br>      -    			if (closestElement != null) {\r\n<br>    				closests.add(closestElement);\r\n<br>      -    			}\r\n<br>      -    		}\r\n<br>    \r\n<br>\r\n<br>    		return SqObjectFactory.instance().createWithInvalidSelector(caller.getWebDriver(), closests, caller);\r\n<br>      -    	}\r\n<br>      - <br></p>',NULL,'<p><br>      +    	public static SeleniumQueryObject closest(SeleniumQueryObject caller, String selector)  {\r\n<br>    		List elements = caller.get();\r\n<br>    		WebDriver driver = caller.getWebDriver();\r\n<br>    \r\n<br>\r\n<br>    		List closests = new ArrayList&lt;&gt;(elements.size());\r\n<br>      +    		elements.stream().map(closestElement -&gt; closest(driver, element, selector)).filter(closestElement -&gt; closestElement != null).forEach(closestElement -&gt; {\r\n<br>    				closests.add(closestElement);\r\n<br>      +    			});\r\n<br>    \r\n<br>\r\n<br>    		return SqObjectFactory.instance().createWithInvalidSelector(caller.getWebDriver(), closests, caller);\r\n<br></p>',NULL,'2019-01-10 10:14:50','2019-02-19 17:04:09','diff-44de24affeaa90427a2cd6085b8981c0-20190110101450','https://github.com/seleniumQuery/seleniumQuery/pull/178/commits/0b01ab2eec4a0ed816a9e57c34c2dcd5dd1530be#diff-44de24affeaa90427a2cd6085b8981c0','/var/www/QARefactorings/app/webroot/files/diff-44de24affeaa90427a2cd6085b8981c0-20190110101450/a.txt','/var/www/QARefactorings/app/webroot/files/diff-44de24affeaa90427a2cd6085b8981c0-20190110101450/b.txt','L38','R49','S'),(1193,2,1,5,'<p><br>        private static String[] ids(String selector) {\r\n<br>            SeleniumQueryObject f = $(selector);\r\n<br>            List actualIds = new ArrayList&lt;&gt;();\r\n<br>      -            for (WebElement webElement : f) {\r\n<br>                actualIds.add(id(webElement));\r\n<br>      -            }\r\n<br>            return actualIds.toArray(new String[actualIds.size()]);\r\n<br>        }\r\n<br>    \r\n<br><br></p>',NULL,'<p><br>        private static String[] ids(String selector) {\r\n<br>            SeleniumQueryObject f = $(selector);\r\n<br>            List actualIds = new ArrayList&lt;&gt;();\r\n<br>      +            f.forEach(webElement -&gt; {\r\n<br>                actualIds.add(id(webElement));\r\n<br>      +            });\r\n<br>            return actualIds.toArray(new String[actualIds.size()]);\r\n<br>        }\r\n<br>    \r\n<br><br></p>',NULL,'2019-01-10 10:14:56','2019-01-10 10:16:54','diff-09ca2af84f91a6be588ae68222d8333c-20190110101456','https://github.com/seleniumQuery/seleniumQuery/pull/178/commits/0b01ab2eec4a0ed816a9e57c34c2dcd5dd1530be#diff-09ca2af84f91a6be588ae68222d8333c','/var/www/QARefactorings/app/webroot/files/diff-09ca2af84f91a6be588ae68222d8333c-20190110101456/a.txt','/var/www/QARefactorings/app/webroot/files/diff-09ca2af84f91a6be588ae68222d8333c-20190110101456/b.txt','L91','R99','S'),(1194,2,1,5,'<p>public static List ids(SeleniumQueryObject sq) {\r\n<br>            List ids = new ArrayList&lt;&gt;(sq.size());\r\n<br>      -            for (WebElement element : sq) {\r\n<br>                ids.add(id(element));\r\n<br>      -            }\r\n<br>            return ids;\r\n<br>        }\r\n<br>    \r\n<br><br></p>',NULL,'<p>public static List ids(SeleniumQueryObject sq) {\r\n<br>            List ids = new ArrayList&lt;&gt;(sq.size());\r\n<br>      +            sq.forEach(element -&gt; {\r\n<br>                ids.add(id(element));\r\n<br>      +            });\r\n<br>            return ids;\r\n<br>        }\r\n<br>    \r\n<br><br></p>',NULL,'2019-01-10 10:15:02','2019-01-10 10:16:05','diff-09ca2af84f91a6be588ae68222d8333c-20190110101502','https://github.com/seleniumQuery/seleniumQuery/pull/178/commits/0b01ab2eec4a0ed816a9e57c34c2dcd5dd1530be#diff-09ca2af84f91a6be588ae68222d8333c','/var/www/QARefactorings/app/webroot/files/diff-09ca2af84f91a6be588ae68222d8333c-20190110101502/a.txt','/var/www/QARefactorings/app/webroot/files/diff-09ca2af84f91a6be588ae68222d8333c-20190110101502/b.txt','L122','R130','S');
/*!40000 ALTER TABLE `transformations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user_languages`
--

DROP TABLE IF EXISTS `user_languages`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user_languages` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `language_id` tinyint(4) NOT NULL,
  `experience` tinyint(2) DEFAULT NULL,
  `created` datetime DEFAULT NULL,
  `modified` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `fk_users_has_languages_languages1_idx` (`language_id`),
  KEY `fk_users_has_languages_users1_idx` (`user_id`),
  CONSTRAINT `fk_users_has_languages_languages1` FOREIGN KEY (`language_id`) REFERENCES `languages` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_users_has_languages_users1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=56 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user_languages`
--

LOCK TABLES `user_languages` WRITE;
/*!40000 ALTER TABLE `user_languages` DISABLE KEYS */;
INSERT INTO `user_languages` VALUES (21,2,1,5,'2019-01-09 08:25:19','2019-01-09 08:25:19'),(22,3,1,7,'2019-01-10 07:22:33','2019-01-10 07:22:33'),(23,12,1,11,'2019-01-11 12:03:37','2019-01-11 12:03:37'),(24,13,1,4,'2019-01-11 13:30:25','2019-01-11 13:30:25'),(25,14,1,10,'2019-01-11 14:25:43','2019-01-11 14:25:43'),(26,15,1,11,'2019-01-11 14:48:01','2019-01-11 14:48:01'),(27,16,1,11,'2019-01-11 15:59:21','2019-01-11 15:59:21'),(28,17,1,11,'2019-01-11 21:12:15','2019-01-11 21:12:15'),(29,18,1,1,'2019-01-13 14:05:55','2019-01-13 14:05:55'),(30,19,1,7,'2019-01-14 10:24:42','2019-01-14 10:24:42'),(31,20,1,5,'2019-01-14 17:40:26','2019-01-14 17:40:26'),(32,22,1,5,'2019-01-15 13:33:06','2019-01-15 13:33:06'),(33,23,1,8,'2019-01-15 18:09:51','2019-01-15 18:09:51'),(34,25,1,10,'2019-01-16 09:39:11','2019-01-16 09:39:11'),(35,26,1,11,'2019-01-16 11:08:47','2019-01-16 11:08:47'),(36,27,1,5,'2019-01-16 11:15:38','2019-01-16 11:15:38'),(37,28,1,7,'2019-01-16 12:14:46','2019-01-16 12:14:46'),(38,30,1,5,'2019-01-16 12:19:28','2019-01-16 12:19:28'),(39,6,1,4,'2019-01-17 09:10:17','2019-01-17 09:10:17'),(40,31,1,4,'2019-01-18 16:15:35','2019-01-18 16:15:35'),(41,32,1,2,'2019-01-21 11:20:14','2019-01-21 11:20:14'),(42,33,1,1,'2019-01-21 19:18:00','2019-01-21 19:18:00'),(43,34,1,7,'2019-01-21 19:25:09','2019-01-21 19:25:09'),(44,35,1,2,'2019-01-21 22:43:54','2019-01-21 22:43:54'),(45,36,1,11,'2019-01-22 01:39:55','2019-01-22 01:39:55'),(46,7,1,2,'2019-01-22 12:17:33','2019-01-22 12:17:33'),(47,38,1,1,'2019-01-22 12:24:58','2019-01-22 12:24:58'),(48,39,1,1,'2019-01-22 12:25:18','2019-01-22 12:25:18'),(49,41,1,1,'2019-01-22 12:46:04','2019-01-22 12:46:04'),(50,40,1,9,'2019-01-22 12:53:15','2019-01-22 12:53:15'),(51,43,1,4,'2019-01-22 13:00:41','2019-01-22 13:00:41'),(52,44,1,1,'2019-01-22 14:14:25','2019-01-22 14:14:25'),(53,45,1,5,'2019-01-22 15:21:10','2019-01-22 15:21:10'),(54,46,1,1,'2019-01-24 17:03:22','2019-01-24 17:03:22'),(55,47,1,11,'2019-01-27 21:38:28','2019-01-27 21:38:28');
/*!40000 ALTER TABLE `user_languages` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user_types`
--

DROP TABLE IF EXISTS `user_types`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user_types` (
  `id` tinyint(4) NOT NULL AUTO_INCREMENT,
  `description` varchar(25) NOT NULL,
  `created` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user_types`
--

LOCK TABLES `user_types` WRITE;
/*!40000 ALTER TABLE `user_types` DISABLE KEYS */;
INSERT INTO `user_types` VALUES (1,'candidato','2018-01-30 21:28:00'),(2,'pesquisador','2018-01-30 21:28:00'),(3,'administrador','2018-01-30 21:28:00');
/*!40000 ALTER TABLE `user_types` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `users` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_type_id` tinyint(4) NOT NULL,
  `username` varchar(60) NOT NULL,
  `password` varchar(120) NOT NULL,
  `name` varchar(100) NOT NULL,
  `sex` varchar(20) DEFAULT NULL,
  `status` char(1) DEFAULT NULL,
  `email` varchar(255) NOT NULL,
  `trophy` int(11) DEFAULT NULL,
  `created` datetime DEFAULT NULL,
  `modified` datetime DEFAULT NULL,
  `formation` varchar(100) DEFAULT NULL,
  `profession` varchar(100) DEFAULT NULL,
  `lambda_exp` varchar(45) DEFAULT NULL,
  `functional_program` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `email` (`email`),
  KEY `FK` (`user_type_id`),
  CONSTRAINT `fk_users_user_types` FOREIGN KEY (`user_type_id`) REFERENCES `user_types` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=49 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES (2,3,'waltimlmm','1f75709e015b999a84abc0c7ad810b22d7ce5e47','Walter Lucas','Masculino','1','waltimlmm@gmail.com',0,'2018-01-30 21:37:26','2019-01-09 08:25:19','SC','AD','N','1'),(3,1,'jose','f59f2822bb2354b93ab71a6d93104c1137f76210','jose','Masculino','1','jose@jose.com',0,'2018-03-07 17:42:33','2019-01-10 07:22:33','SC','AD','N','1-4'),(4,3,'rbonifacio123','26b25a5963b9b7c4180507ba5d7c308b856f9d34','rbonifacio','Masculino','1','rbonifacio123@gmail.com',0,'2018-11-26 14:46:48','2018-12-03 07:18:15','DC','OT',NULL,NULL),(5,1,'thiagohd93','303438fec1c1a0a4400324a5ef3d6f3bc5b1c05d','Thiago Dias','Masculino','1','thiagohd93@gmail.com',0,'2018-11-26 21:02:29','2018-11-26 21:03:40','SC','',NULL,NULL),(6,1,'carvalhosobrinhomatheus','5a8896569dda900fff4ded12652c77ca797c7ccc','Matheus de Carvalho Sobrinho','Masculino','1','carvalhosobrinhomatheus@gmail.com',42,'2018-12-03 13:21:50','2019-01-17 09:20:56','PGI','DJ','N','1-4'),(7,1,'dariosantosbsb','f59f2822bb2354b93ab71a6d93104c1137f76210','Dário Samtos','Masculino','1','dario.santos.bsb@redes.unb.br',42,'2018-12-03 13:22:06','2019-01-22 12:25:56','SC','OT','S','1-4'),(8,1,'guns945','213db0ed6dc3384885a392cfb4e832fa2ea69b6d','willian junior','Masculino','1','guns945@gmail.com',0,'2018-12-04 00:04:54','2018-12-04 00:45:10','MM','OT',NULL,NULL),(9,1,'luisfrt','f59f2822bb2354b93ab71a6d93104c1137f76210','Luis Felipe','Masculino','1','luisfrt@gmail.com',0,'2018-12-04 08:59:31','2018-12-04 09:21:09','MM','AD',NULL,NULL),(10,1,'evertonagilar','f59f2822bb2354b93ab71a6d93104c1137f76210','EVERTON DE VARGAS AGILAR','Masculino','1','evertonagilar@gmail.com',0,'2018-12-05 18:43:48','2018-12-05 19:08:08','MM','DS',NULL,NULL),(11,1,'contrariador','85b94e4f10cd22a0f7d09d30c303093115b8e60d','Fabio R','Masculino','1','contrariador@gmail.com',0,'2018-12-05 19:33:22','2018-12-05 19:33:22','','',NULL,NULL),(12,1,'mcesarhm','f59f2822bb2354b93ab71a6d93104c1137f76210','Marcos César de Oliveira','Masculino','1','mcesarhm@gmail.com',42,'2019-01-11 11:52:21','2019-01-11 12:09:20','MM','DS','S','5+'),(13,1,'urielbcs','bac6617e47fc7ea63c1afe03645ec330af86e647','Uriel Silva','Masculino','1','urielbcs@gmail.com',42,'2019-01-11 13:28:45','2019-01-11 13:36:09','SC','DJ','S','1-4'),(14,1,'wweellddeerr','7df19c1755a3b3bcdf99c05e519c393b5236e9f0','Welder Luz','Masculino','1','wweellddeerr@gmail.com',42,'2019-01-11 14:24:54','2019-01-21 12:38:34','MM','DS','S','1-4'),(15,1,'fredericoalmeida5','c8f1c86476ab7977c760528c590b7315c994e562','Frederico Almeida','Masculino','1','frederico.almeida5@gmail.com',42,'2019-01-11 14:46:01','2019-01-11 14:52:33','PGC','OT','N','5+'),(16,1,'phtcosta','f787027ca0267284ae19731b4fd8e3c53514c771','Pedro Henrique Teixeira Costa','Masculino','1','phtcosta@gmail.com',42,'2019-01-11 15:57:31','2019-01-21 11:34:40','MM','AD','S','1-4'),(17,1,'thiagomael','e7ae9621b6aaa5bef8150e59d1d309de28d836c7','Thiago Mael de Castro','Masculino','1','thiago.mael@gmail.com',42,'2019-01-11 21:09:27','2019-01-11 21:47:57','MM','DS','S','5+'),(18,1,'brunomatissek','ddb30837d111cd2d9c05d8c6651ac43fbba757e6','Bruno Matissek','Masculino','1','bruno.matissek@gmail.com',0,'2019-01-13 14:05:07','2019-01-13 14:05:55','SC','AD','S','1-4'),(19,1,'fvitorlopes','9e308c214263553c8d73d4a479aea6d4dafabe00','FRANCISCO VITOR LOPES DA FROTA','Masculino','1','fvitorlopes@gmail.com',42,'2019-01-14 10:22:13','2019-01-14 10:32:26','MM','DP','N','NC'),(20,1,'ze12augusto','f59f2822bb2354b93ab71a6d93104c1137f76210','José Augusto Martins Regis','Masculino','1','ze12augusto@gmail.com',42,'2019-01-14 11:52:43','2019-01-14 17:45:20','SC','AD','S','1-4'),(21,1,'andreiamlopes','ff6f244cdb8ca0d66d4bc8b748399ae52ab9ee4c','Andreia martins lopes','Feminino','1','andreiamlopes@yahoo.com.br',0,'2019-01-14 12:53:05','2019-01-14 12:53:05','','',NULL,NULL),(22,1,'fernandolacerda','d357f0d7e71b00262cfb109ba0a41a52965151f9','fernando lacerda','Masculino','1','fernando.lacerda@redes.unb.br',42,'2019-01-15 13:31:15','2019-01-22 10:20:05','SC','DP','S','5+'),(23,1,'jesimararantes','9732513a7ed83a77edd68ba5b9e80dbcbf718faa','Jesimar Arantes','Masculino','1','jesimar.arantes@gmail.com',7,'2019-01-15 18:05:14','2019-01-15 18:11:50','PGI','OT','N','1'),(24,1,'andrecamposdecarvalho','ca25b730897e5310bddd3fff64b4a23d4e26bf64','Andre Campos','Masculino','1','andrecamposdecarvalho@gmail.com',0,'2019-01-15 18:15:26','2019-01-15 18:15:26','','',NULL,NULL),(25,1,'hazevedo','4da2a43cb96120474ef7638672eb3ae5fd4fbef3','Helio Azevedo','Masculino','1','hazevedo@usp.br',42,'2019-01-16 09:36:07','2019-01-16 11:13:21','DC','AD','S','NC'),(26,1,'sidleal','d150a57ce9e75a0fed4f56731aed757913c9bc90','Sidney Leal','Masculino','1','sidleal@gmail.com',42,'2019-01-16 11:06:31','2019-01-16 11:27:31','PGC','AD','S','1'),(27,1,'professoraleila10','285d6331c38ffad5d075aec2c7d485187588a162','Leila Aparecida Alves ','Feminino','1','professoraleila10@gmail.com',42,'2019-01-16 11:10:58','2019-01-16 11:19:46','MM','OT','N','NC'),(28,1,'jpcarvalhocastro','971f0d60ee11186a737daf23008b77b5e15bdace','João Pedro de Carvalho Castro','Masculino','1','jpcarvalhocastro@ufmg.br',42,'2019-01-16 12:13:24','2019-01-16 12:24:22','MM','AD','S','NC'),(29,1,'silasferreiralopes','66b54c0331cc1e027e8a40a00e7ae71f3582cb18','Silas Ferreira Lopes ','Masculino','1','silasferreiralopes@gmail.com',0,'2019-01-16 12:14:18','2019-01-16 12:14:18','','',NULL,NULL),(30,1,'mcaztei','c88fb0b8ab5cdfe4c36cea324dcb70cf87969812','Mirela Cazzolato','Feminino','1','mcaztei@hotmail.com',42,'2019-01-16 12:16:33','2019-01-16 12:28:27','DC','OT','N','4-5'),(31,1,'thadeuafm','660a16ebf4894422dfe39b63e07beeaed7c4c11e','Thadeu Melo','Masculino','1','thadeu.afm@gmail.com',42,'2019-01-18 16:14:43','2019-01-18 16:25:48','MM','DS','S','1'),(32,1,'danielluz1995','e2badc60c7ca2abfb2301c0247e321fb1227ab3f','Daniel Luz','Masculino','1','danielluz1995@gmail.com',42,'2019-01-21 11:18:34','2019-01-21 11:27:18','SC','DP','S','1-4'),(33,1,'shayaneliebe','ab722507fc8690b24fde9bd188d028b11b5dd37f','Shayane Marques','Feminino','1','shayaneliebe@gmail.com',42,'2019-01-21 19:16:43','2019-01-21 19:25:10','SI','DJ','N','1'),(34,1,'diegosamuelalves','e303b122ff78958c23a9a8cd691b77b33910b0ef','DIEGO SAMUEL ALVES','Masculino','1','diego.samuel.alves@gmail.com',42,'2019-01-21 19:23:38','2019-01-23 07:56:21','PGC','AD','S','NC'),(35,1,'maddan','23e564f9396503ea00abec662a795219ba7ca246','Danilo Santos','Masculino','1','mad.dan@live.com',0,'2019-01-21 22:42:58','2019-01-21 22:43:54','SI','DJ','S','1'),(36,1,'acdcjunior','586e477f824485e406416820537888e67af94965','Antonio Carvalho Jr','Masculino','1','acdcjunior@gmail.com',42,'2019-01-22 01:37:28','2019-01-24 01:22:12','PGI','DS','S','5+'),(37,1,'mathgomes02','126fb048e680658e57d2e57fabae27808a3a3be9','matheus gomes','Masculino','1','math.gomes02@gmail.com',0,'2019-01-22 07:58:02','2019-01-22 07:58:02','','',NULL,NULL),(38,1,'josefortesneto','f59f2822bb2354b93ab71a6d93104c1137f76210','José Fortes Neto','Masculino','1','jose.fortes.neto@gmail.com',42,'2019-01-22 12:21:40','2019-01-22 12:45:21','SI','OT','S','NC'),(39,1,'andrelrsv','7dee11d1663df5c299ea95d1cf52bc44d894d2f9','André Lucas','Masculino','1','andrelrs.v@outlook.com',42,'2019-01-22 12:23:54','2019-01-22 12:49:21','SC','DJ','S','1'),(40,1,'geraldosenshi','cb05cafc7be9d030efcc226eea69eef640b1cf89','Geraldo Alves Pereira Júnior','Masculino','1','geraldo.senshi@gmail.com',0,'2019-01-22 12:44:39','2019-01-22 12:53:15','SC','AD','N','NC'),(41,1,'cleiyton2016','17a031efde6450ab964cf5fca36c19f1c34f8950','cleiton alex','Masculino','1','cleiyton2016@gmail.com',42,'2019-01-22 12:44:49','2019-01-22 23:28:04','SI','DJ','S','NC'),(42,1,'marioramosn98','b8473c88532eb774bf54bcf52bcec5e2263da870','Mário Ramos ','Masculino','1','marioramosn98@gmail.com',0,'2019-01-22 12:49:15','2019-01-22 12:49:15','','',NULL,NULL),(43,1,'wellington88tads','c641b9f4720a12081c82ffb5a71386f7c704f1c7','wellington mesquita santos','Masculino','1','wellington88tads@gmail.com',42,'2019-01-22 12:57:13','2019-01-22 13:07:34','SI','DJ','S','1'),(44,1,'alexmagalhaesjunior','6075d093acfb8d28f9ccf4763e188141738e727a','Alex Sandro da Silva Magalhães Junior','Masculino','1','alexmagalhaesjunior@gmail.com',7,'2019-01-22 14:11:56','2019-01-22 14:16:31','SC','DJ','N','NC'),(45,1,'abreu223','d8abb4e86c477694bc84dabbb2521dc207579763','Pedro Abreu','Masculino','1','abreu223@hotmail.com',42,'2019-01-22 15:20:04','2019-01-22 15:38:45','PGI','OT','S','4-5'),(46,1,'jonathanrdo','4492d2407c9857365017652205523c17d688cff8','Jonathan Ribeiro','Masculino','1','jonathanrdo@outlook.com',42,'2019-01-24 17:02:06','2019-01-24 17:11:08','PGC','OT','N','NC'),(47,1,'kamyponce','b539d7c4722ca7268f0df3930a69f0df00bf462c','Kamy Ponce','Masculino','1','kamy.ponce@gmail.com',42,'2019-01-27 16:05:50','2019-01-27 21:56:45','PGC','AD','S','NC'),(48,1,'teste1','1f75709e015b999a84abc0c7ad810b22d7ce5e47','teste1',NULL,'1','teste1@teste1.com',0,'2019-02-13 15:50:40','2019-02-13 15:50:40',NULL,NULL,NULL,NULL);
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2019-02-19 19:39:43
